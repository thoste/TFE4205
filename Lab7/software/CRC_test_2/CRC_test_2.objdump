
CRC_test_2.elf:     file format elf32-littlenios2
CRC_test_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000101d0 memsz 0x000101d0 flags r-x
    LOAD off    0x000111f0 vaddr 0x000501f0 paddr 0x00051cdc align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000137c8 vaddr 0x000537c8 paddr 0x000537c8 align 2**12
         filesz 0x00000000 memsz 0x00002560 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f91c  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000690  0004fb60  0004fb60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000501f0  00051cdc  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00002560  000537c8  000537c8  000137c8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00055d28  00055d28  00012cdc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012cdc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ed8  00000000  00000000  00012d00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023505  00000000  00000000  00013bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008fd6  00000000  00000000  000370dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b476  00000000  00000000  000400b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020f4  00000000  00000000  0004b52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000037fb  00000000  00000000  0004d620  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  00050e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00068684  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  000686b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d016  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006d019  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d01c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d01d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006d01e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006d027  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006d030  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0006d039  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  0006d045  2**0
                  CONTENTS, READONLY
 26 .jdi          000069b7  00000000  00000000  0006d06f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00034bc4  00000000  00000000  00073a26  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
0004fb60 l    d  .rodata	00000000 .rodata
000501f0 l    d  .rwdata	00000000 .rwdata
000537c8 l    d  .bss	00000000 .bss
00055d28 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CRC_test_2_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ci_crc.c
00000000 l    df *ABS*	00000000 crc.c
00040390 l     F .text	00000090 reflect
00000000 l    df *ABS*	00000000 crc_main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000501f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004ff42 l     O .rodata	00000010 zeroes.4404
00042fc4 l     F .text	000000bc __sbprintf
0004ff52 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00043354 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044e84 l     F .text	00000008 __fp_unlock
00044e98 l     F .text	0000019c __sinit.part.1
00045034 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00050634 l     O .rwdata	00000020 lc_ctype_charset
00050614 l     O .rwdata	00000020 lc_message_charset
00050654 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004ff80 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00048430 l     F .text	000000fc __sprint_r.part.0
000500b4 l     O .rodata	00000010 blanks.4348
000500a4 l     O .rodata	00000010 zeroes.4349
000499bc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004d678 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004d784 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004d7e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004d8d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004d9b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004da9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004dc70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00051ccc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004debc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004dff0 l     F .text	00000034 alt_dev_reg
00050c3c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004e2c8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0004e4d4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004ec80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004f0f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004f234 l     F .text	0000003c alt_get_errno
0004f270 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
000537fc g     O .bss	00000004 alt_instruction_exception_handler
00047a74 g     F .text	00000074 _mprec_log10
00047b60 g     F .text	0000008c __any_on
00049f58 g     F .text	00000054 _isatty_r
0004ff8c g     O .rodata	00000028 __mprec_tinytens
0004dbac g     F .text	0000007c alt_main
00040c44 g     F .text	000000c0 _puts_r
00055c28 g     O .bss	00000100 alt_irq
00049fac g     F .text	00000060 _lseek_r
00051cdc g       *ABS*	00000000 __flash_rwdata_start
0004c1a4 g     F .text	00000088 .hidden __eqdf2
00055d28 g       *ABS*	00000000 __alt_heap_start
00040c08 g     F .text	0000003c printf
0004a1c4 g     F .text	0000009c _wcrtomb_r
000482f0 g     F .text	0000005c __sseek
000451d4 g     F .text	00000010 __sinit
0004a06c g     F .text	00000140 __swbuf_r
00045c9c g     F .text	0000007c _setlocale_r
0004503c g     F .text	00000068 __sfmoreglue
0004dc4c g     F .text	00000024 __malloc_unlock
0004696c g     F .text	0000015c memmove
000451bc g     F .text	00000018 _cleanup
00046bf0 g     F .text	000000a8 _Balloc
0004c22c g     F .text	000000dc .hidden __gtdf2
0004f62c g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00049efc g     F .text	0000005c _fstat_r
000537e0 g     O .bss	00000004 errno
0004826c g     F .text	00000008 __seofread
000537e8 g     O .bss	00000004 alt_argv
00059c9c g       *ABS*	00000000 _gp
00050abc g     O .rwdata	00000180 alt_fd_list
0004f650 g     F .text	00000090 alt_find_dev
00046824 g     F .text	00000148 memcpy
00044e8c g     F .text	0000000c _cleanup_r
0004d490 g     F .text	000000dc .hidden __floatsidf
0004f1b8 g     F .text	0000007c alt_io_redirect
0004c308 g     F .text	000000f4 .hidden __ltdf2
0004fb60 g       *ABS*	00000000 __DTOR_END__
00040d04 g     F .text	00000014 puts
0004f91c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00048150 g     F .text	00000074 __fpclassifyd
000479d0 g     F .text	000000a4 __ratio
000499a0 g     F .text	0000001c __vfiprintf_internal
0004e6cc g     F .text	0000021c altera_avalon_jtag_uart_read
00040bd8 g     F .text	00000030 _printf_r
0004af54 g     F .text	00000064 .hidden __udivsi3
0004d90c g     F .text	000000a4 isatty
0004ffdc g     O .rodata	000000c8 __mprec_tens
00045d18 g     F .text	0000000c __locale_charset
0004f88c g     F .text	00000090 alt_icache_flush
000537dc g     O .bss	00000004 __malloc_top_pad
00051ca4 g     O .rwdata	00000004 __mb_cur_max
00045d48 g     F .text	0000000c _localeconv_r
00046ffc g     F .text	0000003c __i2b
00045658 g     F .text	000004bc __sfvwrite_r
000481c4 g     F .text	00000054 _sbrk_r
0004a00c g     F .text	00000060 _read_r
00051cc4 g     O .rwdata	00000004 alt_max_fd
00049bf0 g     F .text	000000f0 _fclose_r
00044e54 g     F .text	00000030 fflush
000537d8 g     O .bss	00000004 __malloc_max_sbrked_mem
0004b010 g     F .text	000008ac .hidden __adddf3
00047778 g     F .text	0000010c __b2d
0004a924 g     F .text	00000538 .hidden __umoddi3
0004dad8 g     F .text	000000d4 lseek
00051c9c g     O .rwdata	00000004 _global_impure_ptr
00047bec g     F .text	00000564 _realloc_r
00055d28 g       *ABS*	00000000 __bss_end
0004f004 g     F .text	000000f0 alt_iic_isr_register
0004f524 g     F .text	00000108 alt_tick
0004a3ac g     F .text	00000578 .hidden __udivdi3
00049e58 g     F .text	00000024 _fputwc_r
0004ffb4 g     O .rodata	00000028 __mprec_bigtens
00046de0 g     F .text	00000104 __s2b
0004d56c g     F .text	000000a8 .hidden __floatunsidf
000474b8 g     F .text	00000060 __mcmp
000451f4 g     F .text	00000018 __fp_lock_all
0004efb8 g     F .text	0000004c alt_ic_irq_enabled
0004f488 g     F .text	0000009c alt_alarm_stop
000537f0 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00050a94 g     O .rwdata	00000028 alt_dev_null
0004ec38 g     F .text	00000048 alt_dcache_flush_all
00046ee4 g     F .text	00000068 __hi0bits
0004d410 g     F .text	00000080 .hidden __fixdfsi
00051cdc g       *ABS*	00000000 __ram_rwdata_end
00051cbc g     O .rwdata	00000008 alt_dev_list
0004def8 g     F .text	000000f8 write
00040420 g     F .text	000000ec crcSlow
000501f0 g       *ABS*	00000000 __ram_rodata_end
0004d820 g     F .text	000000b0 fstat
0004c308 g     F .text	000000f4 .hidden __ledf2
00047230 g     F .text	00000140 __pow5mult
00048544 g     F .text	0000145c ___vfiprintf_internal_r
000537d0 g     O .bss	00000004 __nlocale_changed
0004afb8 g     F .text	00000058 .hidden __umodsi3
00055d28 g       *ABS*	00000000 end
00053c28 g     O .bss	00002000 data_buffer_region
0004e208 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0004fb60 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0004d614 g     F .text	00000064 .hidden __clzsi2
0004e8e8 g     F .text	00000224 altera_avalon_jtag_uart_write
000451e4 g     F .text	00000004 __sfp_lock_acquire
00046740 g     F .text	000000e4 memchr
00040db0 g     F .text	000021f8 ___vfprintf_internal_r
00045348 g     F .text	00000310 _free_r
00045d24 g     F .text	00000010 __locale_mb_cur_max
000431d4 g     F .text	00000180 __call_exitprocs
000537cc g     O .bss	00000004 __mlocale_changed
00051ca8 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
000537f4 g     O .bss	00000004 _alt_tick_rate
00047370 g     F .text	00000148 __lshift
000537f8 g     O .bss	00000004 _alt_nticks
0004dcac g     F .text	000000fc read
0004e05c g     F .text	00000048 alt_sys_init
0004fa48 g     F .text	00000118 __register_exitproc
00047038 g     F .text	000001f8 __multiply
0004e574 g     F .text	00000068 altera_avalon_jtag_uart_close
000501f0 g       *ABS*	00000000 __ram_rwdata_start
0004fb60 g       *ABS*	00000000 __ram_rodata_start
00053800 g     O .bss	00000028 __malloc_current_mallinfo
00047884 g     F .text	0000014c __d2b
0004e0a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004f7e8 g     F .text	000000a4 alt_get_fd
00049ad8 g     F .text	00000054 _close_r
0004f9cc g     F .text	0000007c memcmp
0004e164 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00055d28 g       *ABS*	00000000 __alt_stack_base
0004e1b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00043080 g     F .text	00000154 __swsetup_r
0004b8bc g     F .text	000008e8 .hidden __divdf3
0004050c g     F .text	000000c0 crcInit
000450a4 g     F .text	00000118 __sfp
00047ae8 g     F .text	00000078 __copybits
0005068c g     O .rwdata	00000408 __malloc_av_
000451f0 g     F .text	00000004 __sinit_lock_release
0004c3fc g     F .text	00000718 .hidden __muldf3
00048218 g     F .text	00000054 __sread
00040290 g     F .text	00000100 crcCI
0004f6e0 g     F .text	00000108 alt_find_file
0004ecbc g     F .text	000000a4 alt_dev_llist_insert
0004dc28 g     F .text	00000024 __malloc_lock
0004de0c g     F .text	000000b0 sbrk
00044df8 g     F .text	0000005c _fflush_r
00049b2c g     F .text	000000c4 _calloc_r
000537c8 g       *ABS*	00000000 __bss_start
00046ac8 g     F .text	00000128 memset
00040690 g     F .text	00000510 main
000537ec g     O .bss	00000004 alt_envp
000537d4 g     O .bss	00000004 __malloc_max_total_mem
0004e104 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004a1ac g     F .text	00000018 __swbuf
0004834c g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
00049ce0 g     F .text	00000014 fclose
00043554 g     F .text	00001688 _dtoa_r
00045f34 g     F .text	0000080c _malloc_r
0004a320 g     F .text	00000030 __ascii_wctomb
00051cc8 g     O .rwdata	00000004 alt_errno
00045b14 g     F .text	000000c4 _fwalk
0004ae5c g     F .text	00000084 .hidden __divsi3
00045224 g     F .text	00000124 _malloc_trim_r
0004fb60 g       *ABS*	00000000 __CTOR_END__
00048354 g     F .text	000000dc strcmp
0004fb60 g       *ABS*	00000000 __flash_rodata_start
0004fb60 g       *ABS*	00000000 __DTOR_LIST__
0004c1a4 g     F .text	00000088 .hidden __nedf2
0004e024 g     F .text	00000038 alt_irq_init
0004dda8 g     F .text	00000064 alt_release_fd
000500c4 g     O .rodata	00000100 .hidden __clz_tab
000537c8 g     O .bss	00000004 _PathLocale
0004f9b8 g     F .text	00000014 atexit
00049a78 g     F .text	00000060 _write_r
00045d54 g     F .text	00000018 setlocale
00051ca0 g     O .rwdata	00000004 _impure_ptr
000537e4 g     O .bss	00000004 alt_argc
00044bdc g     F .text	0000021c __sflush_r
0004edc0 g     F .text	00000060 _do_dtors
00045d40 g     F .text	00000008 __locale_cjk_lang
000405cc g     F .text	000000c4 crcFast
00040020 g       .exceptions	00000000 alt_irq_entry
00047714 g     F .text	00000064 __ulp
0004520c g     F .text	00000018 __fp_unlock_all
00051cb4 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045d6c g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0004ee54 g     F .text	00000050 alt_ic_isr_register
00051cdc g       *ABS*	00000000 _edata
00055d28 g       *ABS*	00000000 _end
00053828 g     O .bss	00000400 crcTable
00049cf4 g     F .text	00000164 __fputwc
00040244 g       *ABS*	00000000 __ram_exceptions_end
0004e5dc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0004ef2c g     F .text	0000008c alt_ic_irq_disable
00048274 g     F .text	0000007c __swrite
00051cac g     O .rwdata	00000004 __malloc_trim_threshold
00045d34 g     F .text	0000000c __locale_msgcharset
00040ba0 g     F .text	00000038 exit
00045bd8 g     F .text	000000c4 _fwalk_reent
00047518 g     F .text	000001fc __mdiff
0004aee0 g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000451e8 g     F .text	00000004 __sfp_lock_release
0004d7b0 g     F .text	00000034 _exit
0004eb0c g     F .text	0000012c alt_alarm_start
00045d78 g     F .text	000001bc __smakebuf_r
00040d18 g     F .text	00000098 strlen
0004f334 g     F .text	00000154 open
0004c22c g     F .text	000000dc .hidden __gedf2
00051cb0 g     O .rwdata	00000004 __wctomb
0004852c g     F .text	00000018 __sprint_r
0004ee20 g     F .text	00000034 alt_icache_flush_all
00051cd0 g     O .rwdata	00000004 alt_priority_mask
0004eea4 g     F .text	00000088 alt_ic_irq_enable
00042fa8 g     F .text	0000001c __vfprintf_internal
0004a350 g     F .text	0000005c _wctomb_r
0004cb14 g     F .text	000008fc .hidden __subdf3
00046f4c g     F .text	000000b0 __lo0bits
00051cd4 g     O .rwdata	00000008 alt_alarm_list
0004ed60 g     F .text	00000060 _do_ctors
0004a260 g     F .text	000000c0 wcrtomb
0004d6b4 g     F .text	000000d0 close
0004da18 g     F .text	00000084 alt_load
00049e7c g     F .text	00000080 fputwc
000451ec g     F .text	00000004 __sinit_lock_acquire
00046cc0 g     F .text	00000120 __multadd
00046c98 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffce004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10970a04 	addi	r2,r2,23592
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10970a04 	addi	r2,r2,23592
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a6d817 	ldw	r2,-25760(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a6d817 	ldw	r2,-25760(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffce248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6a72714 	ori	gp,gp,40092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40268:	108df214 	ori	r2,r2,14280

    movhi r3, %hi(__bss_end)
   4026c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40270:	18d74a14 	ori	r3,r3,23848

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffce278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	004da180 	call	4da18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	004dbac0 	call	4dbac <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffce28c>

00040290 <crcCI>:
 * n = 6, Read  96 bits data from the custom instruction
 * n = 7, Read 128 bits data from the custom instruction*/
#define CRC_CI_MACRO(n, A)        __builtin_custom_ini(ALT_CI_CRC_0_N + (n & 0x7), (A))

unsigned long crcCI(unsigned char * input_data, unsigned long input_data_length)
{
   40290:	defffb04 	addi	sp,sp,-20
   40294:	df000415 	stw	fp,16(sp)
   40298:	df000404 	addi	fp,sp,16
   4029c:	e13ffe15 	stw	r4,-8(fp)
   402a0:	e17fff15 	stw	r5,-4(fp)
  unsigned long index;
  /* copy of the data buffer pointer so that it can advance by different widths */
  void * input_data_copy = (void *)input_data;
   402a4:	e0bffe17 	ldw	r2,-8(fp)
   402a8:	e0bffd15 	stw	r2,-12(fp)

  /* The custom instruction CRC will initialize to the inital remainder value */    
  CRC_CI_MACRO(0,0);
   402ac:	0005883a 	mov	r2,zero
   402b0:	1005c032 	custom	0,r2,r2,zero
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
   402b4:	e03ffc15 	stw	zero,-16(fp)
   402b8:	00000906 	br	402e0 <crcCI+0x50>
  {
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	10800017 	ldw	r2,0(r2)
   402c4:	1005c0f2 	custom	3,r2,r2,zero
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
   402c8:	e0bffd17 	ldw	r2,-12(fp)
   402cc:	10800104 	addi	r2,r2,4
   402d0:	e0bffd15 	stw	r2,-12(fp)
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
   402d4:	e0bffc17 	ldw	r2,-16(fp)
   402d8:	10800104 	addi	r2,r2,4
   402dc:	e0bffc15 	stw	r2,-16(fp)
   402e0:	e0ffff17 	ldw	r3,-4(fp)
   402e4:	00bfff04 	movi	r2,-4
   402e8:	1884703a 	and	r2,r3,r2
   402ec:	e0fffc17 	ldw	r3,-16(fp)
   402f0:	18bff236 	bltu	r3,r2,402bc <__alt_data_end+0xfffce2bc>
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
  }

  /* Write the remainder of the buffer if it does not end on a word boundary */  
  if((input_data_length & 0x3) == 0x3)  /* 3 bytes left */
   402f4:	e0bfff17 	ldw	r2,-4(fp)
   402f8:	108000cc 	andi	r2,r2,3
   402fc:	108000d8 	cmpnei	r2,r2,3
   40300:	10000c1e 	bne	r2,zero,40334 <crcCI+0xa4>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);
   40304:	e0bffd17 	ldw	r2,-12(fp)
   40308:	1080000b 	ldhu	r2,0(r2)
   4030c:	10bfffcc 	andi	r2,r2,65535
   40310:	1005c0b2 	custom	2,r2,r2,zero
    input_data_copy += 2;
   40314:	e0bffd17 	ldw	r2,-12(fp)
   40318:	10800084 	addi	r2,r2,2
   4031c:	e0bffd15 	stw	r2,-12(fp)
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);
   40320:	e0bffd17 	ldw	r2,-12(fp)
   40324:	10800003 	ldbu	r2,0(r2)
   40328:	10803fcc 	andi	r2,r2,255
   4032c:	1005c072 	custom	1,r2,r2,zero
   40330:	00001106 	br	40378 <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x2) /* 2 bytes left */
   40334:	e0bfff17 	ldw	r2,-4(fp)
   40338:	108000cc 	andi	r2,r2,3
   4033c:	10800098 	cmpnei	r2,r2,2
   40340:	1000051e 	bne	r2,zero,40358 <crcCI+0xc8>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);    
   40344:	e0bffd17 	ldw	r2,-12(fp)
   40348:	1080000b 	ldhu	r2,0(r2)
   4034c:	10bfffcc 	andi	r2,r2,65535
   40350:	1005c0b2 	custom	2,r2,r2,zero
   40354:	00000806 	br	40378 <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x1) /* 1 byte left */
   40358:	e0bfff17 	ldw	r2,-4(fp)
   4035c:	108000cc 	andi	r2,r2,3
   40360:	10800058 	cmpnei	r2,r2,1
   40364:	1000041e 	bne	r2,zero,40378 <crcCI+0xe8>
  {
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);    
   40368:	e0bffd17 	ldw	r2,-12(fp)
   4036c:	10800003 	ldbu	r2,0(r2)
   40370:	10803fcc 	andi	r2,r2,255
   40374:	1005c072 	custom	1,r2,r2,zero
  
  /* There are 4 registers in the CRC custom instruction.  Since
   * this example uses CRC-32 only the first register must be read
   * in order to receive the full result.
   */
  return CRC_CI_MACRO(4, 0);
   40378:	0005883a 	mov	r2,zero
   4037c:	1005c132 	custom	4,r2,r2,zero
}
   40380:	e037883a 	mov	sp,fp
   40384:	df000017 	ldw	fp,0(sp)
   40388:	dec00104 	addi	sp,sp,4
   4038c:	f800283a 	ret

00040390 <reflect>:
 * Returns:   The reflection of the original data.
 *
 *********************************************************************/
static unsigned long
reflect(unsigned long data, unsigned char nBits)
{
   40390:	defffb04 	addi	sp,sp,-20
   40394:	df000415 	stw	fp,16(sp)
   40398:	df000404 	addi	fp,sp,16
   4039c:	e13ffe15 	stw	r4,-8(fp)
   403a0:	2805883a 	mov	r2,r5
   403a4:	e0bfff05 	stb	r2,-4(fp)
  unsigned long  reflection = 0x00000000;
   403a8:	e03ffc15 	stw	zero,-16(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
   403ac:	e03ffd05 	stb	zero,-12(fp)
   403b0:	00001306 	br	40400 <reflect+0x70>
  {
    /*
     * If the LSB bit is set, set the reflection of it.
     */
    if (data & 0x01)
   403b4:	e0bffe17 	ldw	r2,-8(fp)
   403b8:	1080004c 	andi	r2,r2,1
   403bc:	10000a26 	beq	r2,zero,403e8 <reflect+0x58>
    {
      reflection |= (1 << ((nBits - 1) - bit));
   403c0:	e0bfff03 	ldbu	r2,-4(fp)
   403c4:	10ffffc4 	addi	r3,r2,-1
   403c8:	e0bffd03 	ldbu	r2,-12(fp)
   403cc:	1885c83a 	sub	r2,r3,r2
   403d0:	00c00044 	movi	r3,1
   403d4:	1884983a 	sll	r2,r3,r2
   403d8:	1007883a 	mov	r3,r2
   403dc:	e0bffc17 	ldw	r2,-16(fp)
   403e0:	10c4b03a 	or	r2,r2,r3
   403e4:	e0bffc15 	stw	r2,-16(fp)
    }

    data = (data >> 1);
   403e8:	e0bffe17 	ldw	r2,-8(fp)
   403ec:	1004d07a 	srli	r2,r2,1
   403f0:	e0bffe15 	stw	r2,-8(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
   403f4:	e0bffd03 	ldbu	r2,-12(fp)
   403f8:	10800044 	addi	r2,r2,1
   403fc:	e0bffd05 	stb	r2,-12(fp)
   40400:	e0fffd03 	ldbu	r3,-12(fp)
   40404:	e0bfff03 	ldbu	r2,-4(fp)
   40408:	18bfea36 	bltu	r3,r2,403b4 <__alt_data_end+0xfffce3b4>
    }

    data = (data >> 1);
  }

  return (reflection);
   4040c:	e0bffc17 	ldw	r2,-16(fp)

} /* reflect() */
   40410:	e037883a 	mov	sp,fp
   40414:	df000017 	ldw	fp,0(sp)
   40418:	dec00104 	addi	sp,sp,4
   4041c:	f800283a 	ret

00040420 <crcSlow>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
   40420:	defff904 	addi	sp,sp,-28
   40424:	dfc00615 	stw	ra,24(sp)
   40428:	df000515 	stw	fp,20(sp)
   4042c:	df000504 	addi	fp,sp,20
   40430:	e13ffe15 	stw	r4,-8(fp)
   40434:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
   40438:	00bfffc4 	movi	r2,-1
   4043c:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   40440:	e03ffc15 	stw	zero,-16(fp)
   40444:	00002506 	br	404dc <crcSlow+0xbc>
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
   40448:	e0bffc17 	ldw	r2,-16(fp)
   4044c:	e0fffe17 	ldw	r3,-8(fp)
   40450:	1885883a 	add	r2,r3,r2
   40454:	10800003 	ldbu	r2,0(r2)
   40458:	10803fcc 	andi	r2,r2,255
   4045c:	01400204 	movi	r5,8
   40460:	1009883a 	mov	r4,r2
   40464:	00403900 	call	40390 <reflect>
   40468:	1004963a 	slli	r2,r2,24
   4046c:	1007883a 	mov	r3,r2
   40470:	e0bffb17 	ldw	r2,-20(fp)
   40474:	10c4f03a 	xor	r2,r2,r3
   40478:	e0bffb15 	stw	r2,-20(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   4047c:	00800204 	movi	r2,8
   40480:	e0bffd05 	stb	r2,-12(fp)
   40484:	00001006 	br	404c8 <crcSlow+0xa8>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
   40488:	e0bffb17 	ldw	r2,-20(fp)
   4048c:	1000080e 	bge	r2,zero,404b0 <crcSlow+0x90>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
   40490:	e0bffb17 	ldw	r2,-20(fp)
   40494:	1085883a 	add	r2,r2,r2
   40498:	1007883a 	mov	r3,r2
   4049c:	00813074 	movhi	r2,1217
   404a0:	10876dc4 	addi	r2,r2,7607
   404a4:	1884f03a 	xor	r2,r3,r2
   404a8:	e0bffb15 	stw	r2,-20(fp)
   404ac:	00000306 	br	404bc <crcSlow+0x9c>
            }
            else
            {
                remainder = (remainder << 1);
   404b0:	e0bffb17 	ldw	r2,-20(fp)
   404b4:	1085883a 	add	r2,r2,r2
   404b8:	e0bffb15 	stw	r2,-20(fp)
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   404bc:	e0bffd03 	ldbu	r2,-12(fp)
   404c0:	10bfffc4 	addi	r2,r2,-1
   404c4:	e0bffd05 	stb	r2,-12(fp)
   404c8:	e0bffd03 	ldbu	r2,-12(fp)
   404cc:	103fee1e 	bne	r2,zero,40488 <__alt_data_end+0xfffce488>


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   404d0:	e0bffc17 	ldw	r2,-16(fp)
   404d4:	10800044 	addi	r2,r2,1
   404d8:	e0bffc15 	stw	r2,-16(fp)
   404dc:	e0fffc17 	ldw	r3,-16(fp)
   404e0:	e0bfff17 	ldw	r2,-4(fp)
   404e4:	18bfd816 	blt	r3,r2,40448 <__alt_data_end+0xfffce448>
    }

    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
   404e8:	01400804 	movi	r5,32
   404ec:	e13ffb17 	ldw	r4,-20(fp)
   404f0:	00403900 	call	40390 <reflect>
   404f4:	0084303a 	nor	r2,zero,r2

}   /* crcSlow() */
   404f8:	e037883a 	mov	sp,fp
   404fc:	dfc00117 	ldw	ra,4(sp)
   40500:	df000017 	ldw	fp,0(sp)
   40504:	dec00204 	addi	sp,sp,8
   40508:	f800283a 	ret

0004050c <crcInit>:
 * Returns:   None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
   4050c:	defffc04 	addi	sp,sp,-16
   40510:	df000315 	stw	fp,12(sp)
   40514:	df000304 	addi	fp,sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
   40518:	e03ffe15 	stw	zero,-8(fp)
   4051c:	00002306 	br	405ac <crcInit+0xa0>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
   40520:	e0bffe17 	ldw	r2,-8(fp)
   40524:	1004963a 	slli	r2,r2,24
   40528:	e0bffd15 	stw	r2,-12(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   4052c:	00800204 	movi	r2,8
   40530:	e0bfff05 	stb	r2,-4(fp)
   40534:	00001006 	br	40578 <crcInit+0x6c>
        {
            /*
             * Try to divide the current data bit.
             */     
            if (remainder & TOPBIT)
   40538:	e0bffd17 	ldw	r2,-12(fp)
   4053c:	1000080e 	bge	r2,zero,40560 <crcInit+0x54>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
   40540:	e0bffd17 	ldw	r2,-12(fp)
   40544:	1085883a 	add	r2,r2,r2
   40548:	1007883a 	mov	r3,r2
   4054c:	00813074 	movhi	r2,1217
   40550:	10876dc4 	addi	r2,r2,7607
   40554:	1884f03a 	xor	r2,r3,r2
   40558:	e0bffd15 	stw	r2,-12(fp)
   4055c:	00000306 	br	4056c <crcInit+0x60>
            }
            else
            {
                remainder = (remainder << 1);
   40560:	e0bffd17 	ldw	r2,-12(fp)
   40564:	1085883a 	add	r2,r2,r2
   40568:	e0bffd15 	stw	r2,-12(fp)
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   4056c:	e0bfff03 	ldbu	r2,-4(fp)
   40570:	10bfffc4 	addi	r2,r2,-1
   40574:	e0bfff05 	stb	r2,-4(fp)
   40578:	e0bfff03 	ldbu	r2,-4(fp)
   4057c:	103fee1e 	bne	r2,zero,40538 <__alt_data_end+0xfffce538>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
   40580:	00800174 	movhi	r2,5
   40584:	108e0a04 	addi	r2,r2,14376
   40588:	e0fffe17 	ldw	r3,-8(fp)
   4058c:	18c7883a 	add	r3,r3,r3
   40590:	18c7883a 	add	r3,r3,r3
   40594:	10c5883a 	add	r2,r2,r3
   40598:	e0fffd17 	ldw	r3,-12(fp)
   4059c:	10c00015 	stw	r3,0(r2)


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
   405a0:	e0bffe17 	ldw	r2,-8(fp)
   405a4:	10800044 	addi	r2,r2,1
   405a8:	e0bffe15 	stw	r2,-8(fp)
   405ac:	e0bffe17 	ldw	r2,-8(fp)
   405b0:	10804010 	cmplti	r2,r2,256
   405b4:	103fda1e 	bne	r2,zero,40520 <__alt_data_end+0xfffce520>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
   405b8:	0001883a 	nop
   405bc:	e037883a 	mov	sp,fp
   405c0:	df000017 	ldw	fp,0(sp)
   405c4:	dec00104 	addi	sp,sp,4
   405c8:	f800283a 	ret

000405cc <crcFast>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
   405cc:	defff904 	addi	sp,sp,-28
   405d0:	dfc00615 	stw	ra,24(sp)
   405d4:	df000515 	stw	fp,20(sp)
   405d8:	df000504 	addi	fp,sp,20
   405dc:	e13ffe15 	stw	r4,-8(fp)
   405e0:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
   405e4:	00bfffc4 	movi	r2,-1
   405e8:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   405ec:	e03ffc15 	stw	zero,-16(fp)
   405f0:	00001b06 	br	40660 <crcFast+0x94>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
   405f4:	e0bffc17 	ldw	r2,-16(fp)
   405f8:	e0fffe17 	ldw	r3,-8(fp)
   405fc:	1885883a 	add	r2,r3,r2
   40600:	10800003 	ldbu	r2,0(r2)
   40604:	10803fcc 	andi	r2,r2,255
   40608:	01400204 	movi	r5,8
   4060c:	1009883a 	mov	r4,r2
   40610:	00403900 	call	40390 <reflect>
   40614:	1007883a 	mov	r3,r2
   40618:	e0bffb17 	ldw	r2,-20(fp)
   4061c:	1004d63a 	srli	r2,r2,24
   40620:	1884f03a 	xor	r2,r3,r2
   40624:	e0bffd05 	stb	r2,-12(fp)
      remainder = crcTable[data] ^ (remainder << 8);
   40628:	e0fffd03 	ldbu	r3,-12(fp)
   4062c:	00800174 	movhi	r2,5
   40630:	108e0a04 	addi	r2,r2,14376
   40634:	18c7883a 	add	r3,r3,r3
   40638:	18c7883a 	add	r3,r3,r3
   4063c:	10c5883a 	add	r2,r2,r3
   40640:	10c00017 	ldw	r3,0(r2)
   40644:	e0bffb17 	ldw	r2,-20(fp)
   40648:	1004923a 	slli	r2,r2,8
   4064c:	1884f03a 	xor	r2,r3,r2
   40650:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   40654:	e0bffc17 	ldw	r2,-16(fp)
   40658:	10800044 	addi	r2,r2,1
   4065c:	e0bffc15 	stw	r2,-16(fp)
   40660:	e0fffc17 	ldw	r3,-16(fp)
   40664:	e0bfff17 	ldw	r2,-4(fp)
   40668:	18bfe216 	blt	r3,r2,405f4 <__alt_data_end+0xfffce5f4>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
   4066c:	01400804 	movi	r5,32
   40670:	e13ffb17 	ldw	r4,-20(fp)
   40674:	00403900 	call	40390 <reflect>
   40678:	0084303a 	nor	r2,zero,r2

}   /* crcFast() */
   4067c:	e037883a 	mov	sp,fp
   40680:	dfc00117 	ldw	ra,4(sp)
   40684:	df000017 	ldw	fp,0(sp)
   40688:	dec00204 	addi	sp,sp,8
   4068c:	f800283a 	ret

00040690 <main>:




int main()
{
   40690:	deff9904 	addi	sp,sp,-412
   40694:	dfc06615 	stw	ra,408(sp)
   40698:	df006515 	stw	fp,404(sp)
   4069c:	df006504 	addi	fp,sp,404
  unsigned long buffer_counter, data_counter;
  unsigned long sw_slow_results[NUMBER_OF_BUFFERS];
  unsigned long sw_fast_results[NUMBER_OF_BUFFERS];
  unsigned long ci_results[NUMBER_OF_BUFFERS];
  unsigned char random_data = 0x5A;
   406a0:	00801684 	movi	r2,90
   406a4:	e0bf9d05 	stb	r2,-396(fp)

  int repeat;
  int countSpeed = 0;
   406a8:	e03f9f15 	stw	zero,-388(fp)

  /* Turn off LED if on*/
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);
   406ac:	e0bf9f17 	ldw	r2,-388(fp)
   406b0:	10c0004c 	andi	r3,r2,1
   406b4:	00800234 	movhi	r2,8
   406b8:	10840004 	addi	r2,r2,4096
   406bc:	10c00035 	stwio	r3,0(r2)
  countSpeed++;
   406c0:	e0bf9f17 	ldw	r2,-388(fp)
   406c4:	10800044 	addi	r2,r2,1
   406c8:	e0bf9f15 	stw	r2,-388(fp)


  printf("+-----------------------------------------------------------+\n");
   406cc:	01000174 	movhi	r4,5
   406d0:	213ed804 	addi	r4,r4,-1184
   406d4:	0040d040 	call	40d04 <puts>
  printf("| Comparison between software and custom instruction CRC32  |\n");
   406d8:	01000174 	movhi	r4,5
   406dc:	213ee804 	addi	r4,r4,-1120
   406e0:	0040d040 	call	40d04 <puts>
  printf("+-----------------------------------------------------------+\n\n\n");
   406e4:	01000174 	movhi	r4,5
   406e8:	213ef804 	addi	r4,r4,-1056
   406ec:	0040d040 	call	40d04 <puts>

  printf("System specification\n");
   406f0:	01000174 	movhi	r4,5
   406f4:	213f0804 	addi	r4,r4,-992
   406f8:	0040d040 	call	40d04 <puts>
  printf("--------------------\n");
   406fc:	01000174 	movhi	r4,5
   40700:	213f0e04 	addi	r4,r4,-968
   40704:	0040d040 	call	40d04 <puts>

  printf("System clock speed = %lu MHz\n", (unsigned long)ALT_CPU_FREQ /(unsigned long)1000000);
   40708:	01400c84 	movi	r5,50
   4070c:	01000174 	movhi	r4,5
   40710:	213f1404 	addi	r4,r4,-944
   40714:	0040c080 	call	40c08 <printf>
  printf("Number of buffer locations = %d\n", NUMBER_OF_BUFFERS);
   40718:	01400804 	movi	r5,32
   4071c:	01000174 	movhi	r4,5
   40720:	213f1c04 	addi	r4,r4,-912
   40724:	0040c080 	call	40c08 <printf>
  printf("Size of each buffer = %d bytes\n\n\n", BUFFER_SIZE);
   40728:	01404004 	movi	r5,256
   4072c:	01000174 	movhi	r4,5
   40730:	213f2504 	addi	r4,r4,-876
   40734:	0040c080 	call	40c08 <printf>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
   40738:	01000174 	movhi	r4,5
   4073c:	213f2e04 	addi	r4,r4,-840
   40740:	0040d040 	call	40d04 <puts>
  printf("-------------------------------------------------------\n");
   40744:	01000174 	movhi	r4,5
   40748:	213f3c04 	addi	r4,r4,-784
   4074c:	0040d040 	call	40d04 <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40750:	e03f9b15 	stw	zero,-404(fp)
   40754:	00001d06 	br	407cc <main+0x13c>
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
   40758:	e03f9c15 	stw	zero,-400(fp)
   4075c:	00001506 	br	407b4 <main+0x124>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
   40760:	00800174 	movhi	r2,5
   40764:	108f0a04 	addi	r2,r2,15400
   40768:	e0ff9b17 	ldw	r3,-404(fp)
   4076c:	1806923a 	slli	r3,r3,8
   40770:	10c7883a 	add	r3,r2,r3
   40774:	e0bf9c17 	ldw	r2,-400(fp)
   40778:	1885883a 	add	r2,r3,r2
   4077c:	e0ff9d03 	ldbu	r3,-396(fp)
   40780:	10c00005 	stb	r3,0(r2)
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
   40784:	e0bf9d03 	ldbu	r2,-396(fp)
   40788:	1006913a 	slli	r3,r2,4
   4078c:	10803fcc 	andi	r2,r2,255
   40790:	1004d13a 	srli	r2,r2,4
   40794:	1884b03a 	or	r2,r3,r2
   40798:	1007883a 	mov	r3,r2
   4079c:	e0bf9c17 	ldw	r2,-400(fp)
   407a0:	1885883a 	add	r2,r3,r2
   407a4:	e0bf9d05 	stb	r2,-396(fp)
  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
   407a8:	e0bf9c17 	ldw	r2,-400(fp)
   407ac:	10800044 	addi	r2,r2,1
   407b0:	e0bf9c15 	stw	r2,-400(fp)
   407b4:	e0bf9c17 	ldw	r2,-400(fp)
   407b8:	10804030 	cmpltui	r2,r2,256
   407bc:	103fe81e 	bne	r2,zero,40760 <__alt_data_end+0xfffce760>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   407c0:	e0bf9b17 	ldw	r2,-404(fp)
   407c4:	10800044 	addi	r2,r2,1
   407c8:	e0bf9b15 	stw	r2,-404(fp)
   407cc:	e0bf9b17 	ldw	r2,-404(fp)
   407d0:	10800830 	cmpltui	r2,r2,32
   407d4:	103fe01e 	bne	r2,zero,40758 <__alt_data_end+0xfffce758>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
    }
  }
  printf("Initialization completed\n\n\n");
   407d8:	01000174 	movhi	r4,5
   407dc:	213f4a04 	addi	r4,r4,-728
   407e0:	0040d040 	call	40d04 <puts>

  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
   407e4:	01000174 	movhi	r4,5
   407e8:	213f5104 	addi	r4,r4,-700
   407ec:	0040d040 	call	40d04 <puts>
  printf("------------------------\n");
   407f0:	01000174 	movhi	r4,5
   407f4:	213f5804 	addi	r4,r4,-672
   407f8:	0040d040 	call	40d04 <puts>

  /* Set LED start slow software CRC*/
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);
   407fc:	e0bf9f17 	ldw	r2,-388(fp)
   40800:	10c0004c 	andi	r3,r2,1
   40804:	00800234 	movhi	r2,8
   40808:	10840004 	addi	r2,r2,4096
   4080c:	10c00035 	stwio	r3,0(r2)

  repeat = 0;
   40810:	e03f9e15 	stw	zero,-392(fp)
  while(repeat < 100) /* Repeat CRC to get visible delay */
   40814:	00001b06 	br	40884 <main+0x1f4>
  {
     for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40818:	e03f9b15 	stw	zero,-404(fp)
   4081c:	00001306 	br	4086c <main+0x1dc>
     {
        sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
   40820:	e0bf9b17 	ldw	r2,-404(fp)
   40824:	1006923a 	slli	r3,r2,8
   40828:	00800174 	movhi	r2,5
   4082c:	108f0a04 	addi	r2,r2,15400
   40830:	1885883a 	add	r2,r3,r2
   40834:	01404004 	movi	r5,256
   40838:	1009883a 	mov	r4,r2
   4083c:	00404200 	call	40420 <crcSlow>
   40840:	1007883a 	mov	r3,r2
   40844:	e0bf9b17 	ldw	r2,-404(fp)
   40848:	1085883a 	add	r2,r2,r2
   4084c:	1085883a 	add	r2,r2,r2
   40850:	e13f9b04 	addi	r4,fp,-404
   40854:	2085883a 	add	r2,r4,r2
   40858:	10800504 	addi	r2,r2,20
   4085c:	10c00015 	stw	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);

  repeat = 0;
  while(repeat < 100) /* Repeat CRC to get visible delay */
  {
     for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40860:	e0bf9b17 	ldw	r2,-404(fp)
   40864:	10800044 	addi	r2,r2,1
   40868:	e0bf9b15 	stw	r2,-404(fp)
   4086c:	e0bf9b17 	ldw	r2,-404(fp)
   40870:	10800830 	cmpltui	r2,r2,32
   40874:	103fea1e 	bne	r2,zero,40820 <__alt_data_end+0xfffce820>
     {
        sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
     }
     repeat++;
   40878:	e0bf9e17 	ldw	r2,-392(fp)
   4087c:	10800044 	addi	r2,r2,1
   40880:	e0bf9e15 	stw	r2,-392(fp)

  /* Set LED start slow software CRC*/
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);

  repeat = 0;
  while(repeat < 100) /* Repeat CRC to get visible delay */
   40884:	e0bf9e17 	ldw	r2,-392(fp)
   40888:	10801910 	cmplti	r2,r2,100
   4088c:	103fe21e 	bne	r2,zero,40818 <__alt_data_end+0xfffce818>
     {
        sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
     }
     repeat++;
  }
  printf("Completed\n\n\n");
   40890:	01000174 	movhi	r4,5
   40894:	213f5f04 	addi	r4,r4,-644
   40898:	0040d040 	call	40d04 <puts>


  /* Fast software CRC based on a lookup table implementation */
  crcInit();
   4089c:	004050c0 	call	4050c <crcInit>
  printf("Running the optimized software CRC\n");
   408a0:	01000174 	movhi	r4,5
   408a4:	213f6204 	addi	r4,r4,-632
   408a8:	0040d040 	call	40d04 <puts>
  printf("----------------------------------\n");
   408ac:	01000174 	movhi	r4,5
   408b0:	213f6b04 	addi	r4,r4,-596
   408b4:	0040d040 	call	40d04 <puts>

  /* Set LED start fast software CRC */
  countSpeed++;
   408b8:	e0bf9f17 	ldw	r2,-388(fp)
   408bc:	10800044 	addi	r2,r2,1
   408c0:	e0bf9f15 	stw	r2,-388(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);
   408c4:	e0bf9f17 	ldw	r2,-388(fp)
   408c8:	10c0004c 	andi	r3,r2,1
   408cc:	00800234 	movhi	r2,8
   408d0:	10840004 	addi	r2,r2,4096
   408d4:	10c00035 	stwio	r3,0(r2)

  repeat = 0;
   408d8:	e03f9e15 	stw	zero,-392(fp)
  while(repeat < 100) /* Repeat CRC to get visible delay */
   408dc:	00001b06 	br	4094c <main+0x2bc>
  {
    for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   408e0:	e03f9b15 	stw	zero,-404(fp)
   408e4:	00001306 	br	40934 <main+0x2a4>
    {
      sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
   408e8:	e0bf9b17 	ldw	r2,-404(fp)
   408ec:	1006923a 	slli	r3,r2,8
   408f0:	00800174 	movhi	r2,5
   408f4:	108f0a04 	addi	r2,r2,15400
   408f8:	1885883a 	add	r2,r3,r2
   408fc:	01404004 	movi	r5,256
   40900:	1009883a 	mov	r4,r2
   40904:	00405cc0 	call	405cc <crcFast>
   40908:	1007883a 	mov	r3,r2
   4090c:	e0bf9b17 	ldw	r2,-404(fp)
   40910:	1085883a 	add	r2,r2,r2
   40914:	1085883a 	add	r2,r2,r2
   40918:	e17f9b04 	addi	r5,fp,-404
   4091c:	2885883a 	add	r2,r5,r2
   40920:	10802504 	addi	r2,r2,148
   40924:	10c00015 	stw	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);

  repeat = 0;
  while(repeat < 100) /* Repeat CRC to get visible delay */
  {
    for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40928:	e0bf9b17 	ldw	r2,-404(fp)
   4092c:	10800044 	addi	r2,r2,1
   40930:	e0bf9b15 	stw	r2,-404(fp)
   40934:	e0bf9b17 	ldw	r2,-404(fp)
   40938:	10800830 	cmpltui	r2,r2,32
   4093c:	103fea1e 	bne	r2,zero,408e8 <__alt_data_end+0xfffce8e8>
    {
      sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
    }
    repeat++;
   40940:	e0bf9e17 	ldw	r2,-392(fp)
   40944:	10800044 	addi	r2,r2,1
   40948:	e0bf9e15 	stw	r2,-392(fp)
  /* Set LED start fast software CRC */
  countSpeed++;
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);

  repeat = 0;
  while(repeat < 100) /* Repeat CRC to get visible delay */
   4094c:	e0bf9e17 	ldw	r2,-392(fp)
   40950:	10801910 	cmplti	r2,r2,100
   40954:	103fe21e 	bne	r2,zero,408e0 <__alt_data_end+0xfffce8e0>
    {
      sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
    }
    repeat++;
  }
  printf("Completed\n\n\n");
   40958:	01000174 	movhi	r4,5
   4095c:	213f5f04 	addi	r4,r4,-644
   40960:	0040d040 	call	40d04 <puts>


  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
   40964:	01000174 	movhi	r4,5
   40968:	213f7404 	addi	r4,r4,-560
   4096c:	0040d040 	call	40d04 <puts>
  printf("----------------------------------\n");
   40970:	01000174 	movhi	r4,5
   40974:	213f6b04 	addi	r4,r4,-596
   40978:	0040d040 	call	40d04 <puts>

  /* Set LED start Custom instruction CRC */
  countSpeed++;
   4097c:	e0bf9f17 	ldw	r2,-388(fp)
   40980:	10800044 	addi	r2,r2,1
   40984:	e0bf9f15 	stw	r2,-388(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);
   40988:	e0bf9f17 	ldw	r2,-388(fp)
   4098c:	10c0004c 	andi	r3,r2,1
   40990:	00800234 	movhi	r2,8
   40994:	10840004 	addi	r2,r2,4096
   40998:	10c00035 	stwio	r3,0(r2)

  repeat = 0;
   4099c:	e03f9e15 	stw	zero,-392(fp)
  while(repeat < 100) /* Repeat CRC to get visible delay */
   409a0:	00001b06 	br	40a10 <main+0x380>
  {
    for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   409a4:	e03f9b15 	stw	zero,-404(fp)
   409a8:	00001306 	br	409f8 <main+0x368>
    {
      ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
   409ac:	e0bf9b17 	ldw	r2,-404(fp)
   409b0:	1006923a 	slli	r3,r2,8
   409b4:	00800174 	movhi	r2,5
   409b8:	108f0a04 	addi	r2,r2,15400
   409bc:	1885883a 	add	r2,r3,r2
   409c0:	01404004 	movi	r5,256
   409c4:	1009883a 	mov	r4,r2
   409c8:	00402900 	call	40290 <crcCI>
   409cc:	1007883a 	mov	r3,r2
   409d0:	e0bf9b17 	ldw	r2,-404(fp)
   409d4:	1085883a 	add	r2,r2,r2
   409d8:	1085883a 	add	r2,r2,r2
   409dc:	e13f9b04 	addi	r4,fp,-404
   409e0:	2085883a 	add	r2,r4,r2
   409e4:	10804504 	addi	r2,r2,276
   409e8:	10c00015 	stw	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);

  repeat = 0;
  while(repeat < 100) /* Repeat CRC to get visible delay */
  {
    for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   409ec:	e0bf9b17 	ldw	r2,-404(fp)
   409f0:	10800044 	addi	r2,r2,1
   409f4:	e0bf9b15 	stw	r2,-404(fp)
   409f8:	e0bf9b17 	ldw	r2,-404(fp)
   409fc:	10800830 	cmpltui	r2,r2,32
   40a00:	103fea1e 	bne	r2,zero,409ac <__alt_data_end+0xfffce9ac>
    {
      ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
    }
    repeat++;
   40a04:	e0bf9e17 	ldw	r2,-392(fp)
   40a08:	10800044 	addi	r2,r2,1
   40a0c:	e0bf9e15 	stw	r2,-392(fp)
  /* Set LED start Custom instruction CRC */
  countSpeed++;
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, countSpeed & 0x01);

  repeat = 0;
  while(repeat < 100) /* Repeat CRC to get visible delay */
   40a10:	e0bf9e17 	ldw	r2,-392(fp)
   40a14:	10801910 	cmplti	r2,r2,100
   40a18:	103fe21e 	bne	r2,zero,409a4 <__alt_data_end+0xfffce9a4>
    {
      ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
    }
    repeat++;
  }
  printf("Completed\n\n\n");
   40a1c:	01000174 	movhi	r4,5
   40a20:	213f5f04 	addi	r4,r4,-644
   40a24:	0040d040 	call	40d04 <puts>

  /* Validation of results */
  printf("Validating the CRC results from all implementations\n");
   40a28:	01000174 	movhi	r4,5
   40a2c:	213f7d04 	addi	r4,r4,-524
   40a30:	0040d040 	call	40d04 <puts>
  printf("----------------------------------------------------\n");
   40a34:	01000174 	movhi	r4,5
   40a38:	213f8a04 	addi	r4,r4,-472
   40a3c:	0040d040 	call	40d04 <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40a40:	e03f9b15 	stw	zero,-404(fp)
   40a44:	00004606 	br	40b60 <main+0x4d0>
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) |
   40a48:	e0bf9b17 	ldw	r2,-404(fp)
   40a4c:	1085883a 	add	r2,r2,r2
   40a50:	1085883a 	add	r2,r2,r2
   40a54:	e17f9b04 	addi	r5,fp,-404
   40a58:	2885883a 	add	r2,r5,r2
   40a5c:	10800504 	addi	r2,r2,20
   40a60:	10c00017 	ldw	r3,0(r2)
   40a64:	e0bf9b17 	ldw	r2,-404(fp)
   40a68:	1085883a 	add	r2,r2,r2
   40a6c:	1085883a 	add	r2,r2,r2
   40a70:	e13f9b04 	addi	r4,fp,-404
   40a74:	2085883a 	add	r2,r4,r2
   40a78:	10804504 	addi	r2,r2,276
   40a7c:	10800017 	ldw	r2,0(r2)
   40a80:	1884c03a 	cmpne	r2,r3,r2
   40a84:	1009883a 	mov	r4,r2
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
   40a88:	e0bf9b17 	ldw	r2,-404(fp)
   40a8c:	1085883a 	add	r2,r2,r2
   40a90:	1085883a 	add	r2,r2,r2
   40a94:	e17f9b04 	addi	r5,fp,-404
   40a98:	2885883a 	add	r2,r5,r2
   40a9c:	10802504 	addi	r2,r2,148
   40aa0:	10c00017 	ldw	r3,0(r2)
   40aa4:	e0bf9b17 	ldw	r2,-404(fp)
   40aa8:	1085883a 	add	r2,r2,r2
   40aac:	1085883a 	add	r2,r2,r2
   40ab0:	e17f9b04 	addi	r5,fp,-404
   40ab4:	2885883a 	add	r2,r5,r2
   40ab8:	10804504 	addi	r2,r2,276
   40abc:	10800017 	ldw	r2,0(r2)
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) |
   40ac0:	1884c03a 	cmpne	r2,r3,r2
   40ac4:	2084b03a 	or	r2,r4,r2
   40ac8:	10803fcc 	andi	r2,r2,255
   40acc:	10002126 	beq	r2,zero,40b54 <main+0x4c4>
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
    {
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
   40ad0:	e0bf9b17 	ldw	r2,-404(fp)
   40ad4:	1085883a 	add	r2,r2,r2
   40ad8:	1085883a 	add	r2,r2,r2
   40adc:	e0ff9b04 	addi	r3,fp,-404
   40ae0:	1885883a 	add	r2,r3,r2
   40ae4:	10800504 	addi	r2,r2,20
   40ae8:	10c00017 	ldw	r3,0(r2)
   40aec:	e0bf9b17 	ldw	r2,-404(fp)
   40af0:	1085883a 	add	r2,r2,r2
   40af4:	1085883a 	add	r2,r2,r2
   40af8:	e13f9b04 	addi	r4,fp,-404
   40afc:	2085883a 	add	r2,r4,r2
   40b00:	10802504 	addi	r2,r2,148
   40b04:	11000017 	ldw	r4,0(r2)
   40b08:	e0bf9b17 	ldw	r2,-404(fp)
   40b0c:	1085883a 	add	r2,r2,r2
   40b10:	1085883a 	add	r2,r2,r2
   40b14:	e17f9b04 	addi	r5,fp,-404
   40b18:	2885883a 	add	r2,r5,r2
   40b1c:	10804504 	addi	r2,r2,276
   40b20:	10800017 	ldw	r2,0(r2)
   40b24:	100f883a 	mov	r7,r2
   40b28:	200d883a 	mov	r6,r4
   40b2c:	180b883a 	mov	r5,r3
   40b30:	01000174 	movhi	r4,5
   40b34:	213f9804 	addi	r4,r4,-416
   40b38:	0040c080 	call	40c08 <printf>
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);
      IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, 0x03);
   40b3c:	00c000c4 	movi	r3,3
   40b40:	00800234 	movhi	r2,8
   40b44:	10840004 	addi	r2,r2,4096
   40b48:	10c00035 	stwio	r3,0(r2)
      exit(1);
   40b4c:	01000044 	movi	r4,1
   40b50:	0040ba00 	call	40ba0 <exit>
  printf("Completed\n\n\n");

  /* Validation of results */
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40b54:	e0bf9b17 	ldw	r2,-404(fp)
   40b58:	10800044 	addi	r2,r2,1
   40b5c:	e0bf9b15 	stw	r2,-404(fp)
   40b60:	e0bf9b17 	ldw	r2,-404(fp)
   40b64:	10800830 	cmpltui	r2,r2,32
   40b68:	103fb71e 	bne	r2,zero,40a48 <__alt_data_end+0xfffcea48>
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);
      IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, 0x03);
      exit(1);
    }
  }
  printf("All CRC implementations produced the same results\n\n\n");
   40b6c:	01000174 	movhi	r4,5
   40b70:	213fb104 	addi	r4,r4,-316
   40b74:	0040d040 	call	40d04 <puts>
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, 0x02);
   40b78:	00c00084 	movi	r3,2
   40b7c:	00800234 	movhi	r2,8
   40b80:	10840004 	addi	r2,r2,4096
   40b84:	10c00035 	stwio	r3,0(r2)

  return 0;
   40b88:	0005883a 	mov	r2,zero
}
   40b8c:	e037883a 	mov	sp,fp
   40b90:	dfc00117 	ldw	ra,4(sp)
   40b94:	df000017 	ldw	fp,0(sp)
   40b98:	dec00204 	addi	sp,sp,8
   40b9c:	f800283a 	ret

00040ba0 <exit>:
   40ba0:	defffe04 	addi	sp,sp,-8
   40ba4:	000b883a 	mov	r5,zero
   40ba8:	dc000015 	stw	r16,0(sp)
   40bac:	dfc00115 	stw	ra,4(sp)
   40bb0:	2021883a 	mov	r16,r4
   40bb4:	00431d40 	call	431d4 <__call_exitprocs>
   40bb8:	00800174 	movhi	r2,5
   40bbc:	10872704 	addi	r2,r2,7324
   40bc0:	11000017 	ldw	r4,0(r2)
   40bc4:	20800f17 	ldw	r2,60(r4)
   40bc8:	10000126 	beq	r2,zero,40bd0 <exit+0x30>
   40bcc:	103ee83a 	callr	r2
   40bd0:	8009883a 	mov	r4,r16
   40bd4:	004d7b00 	call	4d7b0 <_exit>

00040bd8 <_printf_r>:
   40bd8:	defffd04 	addi	sp,sp,-12
   40bdc:	2805883a 	mov	r2,r5
   40be0:	dfc00015 	stw	ra,0(sp)
   40be4:	d9800115 	stw	r6,4(sp)
   40be8:	d9c00215 	stw	r7,8(sp)
   40bec:	21400217 	ldw	r5,8(r4)
   40bf0:	d9c00104 	addi	r7,sp,4
   40bf4:	100d883a 	mov	r6,r2
   40bf8:	0040db00 	call	40db0 <___vfprintf_internal_r>
   40bfc:	dfc00017 	ldw	ra,0(sp)
   40c00:	dec00304 	addi	sp,sp,12
   40c04:	f800283a 	ret

00040c08 <printf>:
   40c08:	defffc04 	addi	sp,sp,-16
   40c0c:	dfc00015 	stw	ra,0(sp)
   40c10:	d9400115 	stw	r5,4(sp)
   40c14:	d9800215 	stw	r6,8(sp)
   40c18:	d9c00315 	stw	r7,12(sp)
   40c1c:	00800174 	movhi	r2,5
   40c20:	10872804 	addi	r2,r2,7328
   40c24:	10800017 	ldw	r2,0(r2)
   40c28:	200b883a 	mov	r5,r4
   40c2c:	d9800104 	addi	r6,sp,4
   40c30:	11000217 	ldw	r4,8(r2)
   40c34:	0042fa80 	call	42fa8 <__vfprintf_internal>
   40c38:	dfc00017 	ldw	ra,0(sp)
   40c3c:	dec00404 	addi	sp,sp,16
   40c40:	f800283a 	ret

00040c44 <_puts_r>:
   40c44:	defff604 	addi	sp,sp,-40
   40c48:	dc000715 	stw	r16,28(sp)
   40c4c:	2021883a 	mov	r16,r4
   40c50:	2809883a 	mov	r4,r5
   40c54:	dc400815 	stw	r17,32(sp)
   40c58:	dfc00915 	stw	ra,36(sp)
   40c5c:	2823883a 	mov	r17,r5
   40c60:	0040d180 	call	40d18 <strlen>
   40c64:	10c00044 	addi	r3,r2,1
   40c68:	d8800115 	stw	r2,4(sp)
   40c6c:	00800174 	movhi	r2,5
   40c70:	10bfbf04 	addi	r2,r2,-260
   40c74:	d8800215 	stw	r2,8(sp)
   40c78:	00800044 	movi	r2,1
   40c7c:	d8800315 	stw	r2,12(sp)
   40c80:	00800084 	movi	r2,2
   40c84:	dc400015 	stw	r17,0(sp)
   40c88:	d8c00615 	stw	r3,24(sp)
   40c8c:	dec00415 	stw	sp,16(sp)
   40c90:	d8800515 	stw	r2,20(sp)
   40c94:	80000226 	beq	r16,zero,40ca0 <_puts_r+0x5c>
   40c98:	80800e17 	ldw	r2,56(r16)
   40c9c:	10001426 	beq	r2,zero,40cf0 <_puts_r+0xac>
   40ca0:	81400217 	ldw	r5,8(r16)
   40ca4:	2880030b 	ldhu	r2,12(r5)
   40ca8:	10c8000c 	andi	r3,r2,8192
   40cac:	1800061e 	bne	r3,zero,40cc8 <_puts_r+0x84>
   40cb0:	29001917 	ldw	r4,100(r5)
   40cb4:	00f7ffc4 	movi	r3,-8193
   40cb8:	10880014 	ori	r2,r2,8192
   40cbc:	20c6703a 	and	r3,r4,r3
   40cc0:	2880030d 	sth	r2,12(r5)
   40cc4:	28c01915 	stw	r3,100(r5)
   40cc8:	d9800404 	addi	r6,sp,16
   40ccc:	8009883a 	mov	r4,r16
   40cd0:	00456580 	call	45658 <__sfvwrite_r>
   40cd4:	1000091e 	bne	r2,zero,40cfc <_puts_r+0xb8>
   40cd8:	00800284 	movi	r2,10
   40cdc:	dfc00917 	ldw	ra,36(sp)
   40ce0:	dc400817 	ldw	r17,32(sp)
   40ce4:	dc000717 	ldw	r16,28(sp)
   40ce8:	dec00a04 	addi	sp,sp,40
   40cec:	f800283a 	ret
   40cf0:	8009883a 	mov	r4,r16
   40cf4:	00451d40 	call	451d4 <__sinit>
   40cf8:	003fe906 	br	40ca0 <__alt_data_end+0xfffceca0>
   40cfc:	00bfffc4 	movi	r2,-1
   40d00:	003ff606 	br	40cdc <__alt_data_end+0xfffcecdc>

00040d04 <puts>:
   40d04:	00800174 	movhi	r2,5
   40d08:	10872804 	addi	r2,r2,7328
   40d0c:	200b883a 	mov	r5,r4
   40d10:	11000017 	ldw	r4,0(r2)
   40d14:	0040c441 	jmpi	40c44 <_puts_r>

00040d18 <strlen>:
   40d18:	208000cc 	andi	r2,r4,3
   40d1c:	10002026 	beq	r2,zero,40da0 <strlen+0x88>
   40d20:	20800007 	ldb	r2,0(r4)
   40d24:	10002026 	beq	r2,zero,40da8 <strlen+0x90>
   40d28:	2005883a 	mov	r2,r4
   40d2c:	00000206 	br	40d38 <strlen+0x20>
   40d30:	10c00007 	ldb	r3,0(r2)
   40d34:	18001826 	beq	r3,zero,40d98 <strlen+0x80>
   40d38:	10800044 	addi	r2,r2,1
   40d3c:	10c000cc 	andi	r3,r2,3
   40d40:	183ffb1e 	bne	r3,zero,40d30 <__alt_data_end+0xfffced30>
   40d44:	10c00017 	ldw	r3,0(r2)
   40d48:	01ffbff4 	movhi	r7,65279
   40d4c:	39ffbfc4 	addi	r7,r7,-257
   40d50:	00ca303a 	nor	r5,zero,r3
   40d54:	01a02074 	movhi	r6,32897
   40d58:	19c7883a 	add	r3,r3,r7
   40d5c:	31a02004 	addi	r6,r6,-32640
   40d60:	1946703a 	and	r3,r3,r5
   40d64:	1986703a 	and	r3,r3,r6
   40d68:	1800091e 	bne	r3,zero,40d90 <strlen+0x78>
   40d6c:	10800104 	addi	r2,r2,4
   40d70:	10c00017 	ldw	r3,0(r2)
   40d74:	19cb883a 	add	r5,r3,r7
   40d78:	00c6303a 	nor	r3,zero,r3
   40d7c:	28c6703a 	and	r3,r5,r3
   40d80:	1986703a 	and	r3,r3,r6
   40d84:	183ff926 	beq	r3,zero,40d6c <__alt_data_end+0xfffced6c>
   40d88:	00000106 	br	40d90 <strlen+0x78>
   40d8c:	10800044 	addi	r2,r2,1
   40d90:	10c00007 	ldb	r3,0(r2)
   40d94:	183ffd1e 	bne	r3,zero,40d8c <__alt_data_end+0xfffced8c>
   40d98:	1105c83a 	sub	r2,r2,r4
   40d9c:	f800283a 	ret
   40da0:	2005883a 	mov	r2,r4
   40da4:	003fe706 	br	40d44 <__alt_data_end+0xfffced44>
   40da8:	0005883a 	mov	r2,zero
   40dac:	f800283a 	ret

00040db0 <___vfprintf_internal_r>:
   40db0:	deffb804 	addi	sp,sp,-288
   40db4:	dfc04715 	stw	ra,284(sp)
   40db8:	ddc04515 	stw	r23,276(sp)
   40dbc:	dd404315 	stw	r21,268(sp)
   40dc0:	d9002c15 	stw	r4,176(sp)
   40dc4:	282f883a 	mov	r23,r5
   40dc8:	302b883a 	mov	r21,r6
   40dcc:	d9c02d15 	stw	r7,180(sp)
   40dd0:	df004615 	stw	fp,280(sp)
   40dd4:	dd804415 	stw	r22,272(sp)
   40dd8:	dd004215 	stw	r20,264(sp)
   40ddc:	dcc04115 	stw	r19,260(sp)
   40de0:	dc804015 	stw	r18,256(sp)
   40de4:	dc403f15 	stw	r17,252(sp)
   40de8:	dc003e15 	stw	r16,248(sp)
   40dec:	0045d480 	call	45d48 <_localeconv_r>
   40df0:	10800017 	ldw	r2,0(r2)
   40df4:	1009883a 	mov	r4,r2
   40df8:	d8803415 	stw	r2,208(sp)
   40dfc:	0040d180 	call	40d18 <strlen>
   40e00:	d8803715 	stw	r2,220(sp)
   40e04:	d8802c17 	ldw	r2,176(sp)
   40e08:	10000226 	beq	r2,zero,40e14 <___vfprintf_internal_r+0x64>
   40e0c:	10800e17 	ldw	r2,56(r2)
   40e10:	1000f926 	beq	r2,zero,411f8 <___vfprintf_internal_r+0x448>
   40e14:	b880030b 	ldhu	r2,12(r23)
   40e18:	10c8000c 	andi	r3,r2,8192
   40e1c:	1800061e 	bne	r3,zero,40e38 <___vfprintf_internal_r+0x88>
   40e20:	b9001917 	ldw	r4,100(r23)
   40e24:	00f7ffc4 	movi	r3,-8193
   40e28:	10880014 	ori	r2,r2,8192
   40e2c:	20c6703a 	and	r3,r4,r3
   40e30:	b880030d 	sth	r2,12(r23)
   40e34:	b8c01915 	stw	r3,100(r23)
   40e38:	10c0020c 	andi	r3,r2,8
   40e3c:	1800c126 	beq	r3,zero,41144 <___vfprintf_internal_r+0x394>
   40e40:	b8c00417 	ldw	r3,16(r23)
   40e44:	1800bf26 	beq	r3,zero,41144 <___vfprintf_internal_r+0x394>
   40e48:	1080068c 	andi	r2,r2,26
   40e4c:	00c00284 	movi	r3,10
   40e50:	10c0c426 	beq	r2,r3,41164 <___vfprintf_internal_r+0x3b4>
   40e54:	d8c00404 	addi	r3,sp,16
   40e58:	05000174 	movhi	r20,5
   40e5c:	d9001e04 	addi	r4,sp,120
   40e60:	a53fd084 	addi	r20,r20,-190
   40e64:	d8c01e15 	stw	r3,120(sp)
   40e68:	d8002015 	stw	zero,128(sp)
   40e6c:	d8001f15 	stw	zero,124(sp)
   40e70:	d8003315 	stw	zero,204(sp)
   40e74:	d8003615 	stw	zero,216(sp)
   40e78:	d8003815 	stw	zero,224(sp)
   40e7c:	1811883a 	mov	r8,r3
   40e80:	d8003915 	stw	zero,228(sp)
   40e84:	d8003a15 	stw	zero,232(sp)
   40e88:	d8002f15 	stw	zero,188(sp)
   40e8c:	d9002815 	stw	r4,160(sp)
   40e90:	a8800007 	ldb	r2,0(r21)
   40e94:	10027b26 	beq	r2,zero,41884 <___vfprintf_internal_r+0xad4>
   40e98:	00c00944 	movi	r3,37
   40e9c:	a821883a 	mov	r16,r21
   40ea0:	10c0021e 	bne	r2,r3,40eac <___vfprintf_internal_r+0xfc>
   40ea4:	00001406 	br	40ef8 <___vfprintf_internal_r+0x148>
   40ea8:	10c00326 	beq	r2,r3,40eb8 <___vfprintf_internal_r+0x108>
   40eac:	84000044 	addi	r16,r16,1
   40eb0:	80800007 	ldb	r2,0(r16)
   40eb4:	103ffc1e 	bne	r2,zero,40ea8 <__alt_data_end+0xfffceea8>
   40eb8:	8563c83a 	sub	r17,r16,r21
   40ebc:	88000e26 	beq	r17,zero,40ef8 <___vfprintf_internal_r+0x148>
   40ec0:	d8c02017 	ldw	r3,128(sp)
   40ec4:	d8801f17 	ldw	r2,124(sp)
   40ec8:	45400015 	stw	r21,0(r8)
   40ecc:	1c47883a 	add	r3,r3,r17
   40ed0:	10800044 	addi	r2,r2,1
   40ed4:	d8c02015 	stw	r3,128(sp)
   40ed8:	44400115 	stw	r17,4(r8)
   40edc:	d8801f15 	stw	r2,124(sp)
   40ee0:	00c001c4 	movi	r3,7
   40ee4:	1880a716 	blt	r3,r2,41184 <___vfprintf_internal_r+0x3d4>
   40ee8:	42000204 	addi	r8,r8,8
   40eec:	d9402f17 	ldw	r5,188(sp)
   40ef0:	2c4b883a 	add	r5,r5,r17
   40ef4:	d9402f15 	stw	r5,188(sp)
   40ef8:	80800007 	ldb	r2,0(r16)
   40efc:	1000a826 	beq	r2,zero,411a0 <___vfprintf_internal_r+0x3f0>
   40f00:	84400047 	ldb	r17,1(r16)
   40f04:	00bfffc4 	movi	r2,-1
   40f08:	85400044 	addi	r21,r16,1
   40f0c:	d8002785 	stb	zero,158(sp)
   40f10:	0007883a 	mov	r3,zero
   40f14:	000f883a 	mov	r7,zero
   40f18:	d8802915 	stw	r2,164(sp)
   40f1c:	d8003115 	stw	zero,196(sp)
   40f20:	0025883a 	mov	r18,zero
   40f24:	01401604 	movi	r5,88
   40f28:	01800244 	movi	r6,9
   40f2c:	02800a84 	movi	r10,42
   40f30:	02401b04 	movi	r9,108
   40f34:	ad400044 	addi	r21,r21,1
   40f38:	88bff804 	addi	r2,r17,-32
   40f3c:	28830436 	bltu	r5,r2,41b50 <___vfprintf_internal_r+0xda0>
   40f40:	100490ba 	slli	r2,r2,2
   40f44:	01000134 	movhi	r4,4
   40f48:	2103d604 	addi	r4,r4,3928
   40f4c:	1105883a 	add	r2,r2,r4
   40f50:	10800017 	ldw	r2,0(r2)
   40f54:	1000683a 	jmp	r2
   40f58:	00041a70 	cmpltui	zero,zero,4201
   40f5c:	00041b50 	cmplti	zero,zero,4205
   40f60:	00041b50 	cmplti	zero,zero,4205
   40f64:	00041a90 	cmplti	zero,zero,4202
   40f68:	00041b50 	cmplti	zero,zero,4205
   40f6c:	00041b50 	cmplti	zero,zero,4205
   40f70:	00041b50 	cmplti	zero,zero,4205
   40f74:	00041b50 	cmplti	zero,zero,4205
   40f78:	00041b50 	cmplti	zero,zero,4205
   40f7c:	00041b50 	cmplti	zero,zero,4205
   40f80:	00041204 	movi	zero,4168
   40f84:	000419ac 	andhi	zero,zero,4198
   40f88:	00041b50 	cmplti	zero,zero,4205
   40f8c:	000410cc 	andi	zero,zero,4163
   40f90:	0004122c 	andhi	zero,zero,4168
   40f94:	00041b50 	cmplti	zero,zero,4205
   40f98:	0004126c 	andhi	zero,zero,4169
   40f9c:	00041278 	rdprs	zero,zero,4169
   40fa0:	00041278 	rdprs	zero,zero,4169
   40fa4:	00041278 	rdprs	zero,zero,4169
   40fa8:	00041278 	rdprs	zero,zero,4169
   40fac:	00041278 	rdprs	zero,zero,4169
   40fb0:	00041278 	rdprs	zero,zero,4169
   40fb4:	00041278 	rdprs	zero,zero,4169
   40fb8:	00041278 	rdprs	zero,zero,4169
   40fbc:	00041278 	rdprs	zero,zero,4169
   40fc0:	00041b50 	cmplti	zero,zero,4205
   40fc4:	00041b50 	cmplti	zero,zero,4205
   40fc8:	00041b50 	cmplti	zero,zero,4205
   40fcc:	00041b50 	cmplti	zero,zero,4205
   40fd0:	00041b50 	cmplti	zero,zero,4205
   40fd4:	00041b50 	cmplti	zero,zero,4205
   40fd8:	00041b50 	cmplti	zero,zero,4205
   40fdc:	00041b50 	cmplti	zero,zero,4205
   40fe0:	00041b50 	cmplti	zero,zero,4205
   40fe4:	00041b50 	cmplti	zero,zero,4205
   40fe8:	000412ac 	andhi	zero,zero,4170
   40fec:	00041368 	cmpgeui	zero,zero,4173
   40ff0:	00041b50 	cmplti	zero,zero,4205
   40ff4:	00041368 	cmpgeui	zero,zero,4173
   40ff8:	00041b50 	cmplti	zero,zero,4205
   40ffc:	00041b50 	cmplti	zero,zero,4205
   41000:	00041b50 	cmplti	zero,zero,4205
   41004:	00041b50 	cmplti	zero,zero,4205
   41008:	00041408 	cmpgei	zero,zero,4176
   4100c:	00041b50 	cmplti	zero,zero,4205
   41010:	00041b50 	cmplti	zero,zero,4205
   41014:	00041414 	movui	zero,4176
   41018:	00041b50 	cmplti	zero,zero,4205
   4101c:	00041b50 	cmplti	zero,zero,4205
   41020:	00041b50 	cmplti	zero,zero,4205
   41024:	00041b50 	cmplti	zero,zero,4205
   41028:	00041b50 	cmplti	zero,zero,4205
   4102c:	0004188c 	andi	zero,zero,4194
   41030:	00041b50 	cmplti	zero,zero,4205
   41034:	00041b50 	cmplti	zero,zero,4205
   41038:	000418ec 	andhi	zero,zero,4195
   4103c:	00041b50 	cmplti	zero,zero,4205
   41040:	00041b50 	cmplti	zero,zero,4205
   41044:	00041b50 	cmplti	zero,zero,4205
   41048:	00041b50 	cmplti	zero,zero,4205
   4104c:	00041b50 	cmplti	zero,zero,4205
   41050:	00041b50 	cmplti	zero,zero,4205
   41054:	00041b50 	cmplti	zero,zero,4205
   41058:	00041b50 	cmplti	zero,zero,4205
   4105c:	00041b50 	cmplti	zero,zero,4205
   41060:	00041b50 	cmplti	zero,zero,4205
   41064:	00041afc 	xorhi	zero,zero,4203
   41068:	00041a9c 	xori	zero,zero,4202
   4106c:	00041368 	cmpgeui	zero,zero,4173
   41070:	00041368 	cmpgeui	zero,zero,4173
   41074:	00041368 	cmpgeui	zero,zero,4173
   41078:	00041aac 	andhi	zero,zero,4202
   4107c:	00041a9c 	xori	zero,zero,4202
   41080:	00041b50 	cmplti	zero,zero,4205
   41084:	00041b50 	cmplti	zero,zero,4205
   41088:	00041ab8 	rdprs	zero,zero,4202
   4108c:	00041b50 	cmplti	zero,zero,4205
   41090:	00041ac8 	cmpgei	zero,zero,4203
   41094:	0004199c 	xori	zero,zero,4198
   41098:	000410d8 	cmpnei	zero,zero,4163
   4109c:	000419bc 	xorhi	zero,zero,4198
   410a0:	00041b50 	cmplti	zero,zero,4205
   410a4:	000419c8 	cmpgei	zero,zero,4199
   410a8:	00041b50 	cmplti	zero,zero,4205
   410ac:	00041a24 	muli	zero,zero,4200
   410b0:	00041b50 	cmplti	zero,zero,4205
   410b4:	00041b50 	cmplti	zero,zero,4205
   410b8:	00041a34 	movhi	zero,4200
   410bc:	d9003117 	ldw	r4,196(sp)
   410c0:	d8802d15 	stw	r2,180(sp)
   410c4:	0109c83a 	sub	r4,zero,r4
   410c8:	d9003115 	stw	r4,196(sp)
   410cc:	94800114 	ori	r18,r18,4
   410d0:	ac400007 	ldb	r17,0(r21)
   410d4:	003f9706 	br	40f34 <__alt_data_end+0xfffcef34>
   410d8:	00800c04 	movi	r2,48
   410dc:	d9002d17 	ldw	r4,180(sp)
   410e0:	d9402917 	ldw	r5,164(sp)
   410e4:	d8802705 	stb	r2,156(sp)
   410e8:	00801e04 	movi	r2,120
   410ec:	d8802745 	stb	r2,157(sp)
   410f0:	d8002785 	stb	zero,158(sp)
   410f4:	20c00104 	addi	r3,r4,4
   410f8:	24c00017 	ldw	r19,0(r4)
   410fc:	002d883a 	mov	r22,zero
   41100:	90800094 	ori	r2,r18,2
   41104:	28029a16 	blt	r5,zero,41b70 <___vfprintf_internal_r+0xdc0>
   41108:	00bfdfc4 	movi	r2,-129
   4110c:	90a4703a 	and	r18,r18,r2
   41110:	d8c02d15 	stw	r3,180(sp)
   41114:	94800094 	ori	r18,r18,2
   41118:	9802871e 	bne	r19,zero,41b38 <___vfprintf_internal_r+0xd88>
   4111c:	00800174 	movhi	r2,5
   41120:	10bfc904 	addi	r2,r2,-220
   41124:	d8803915 	stw	r2,228(sp)
   41128:	04401e04 	movi	r17,120
   4112c:	d8802917 	ldw	r2,164(sp)
   41130:	0039883a 	mov	fp,zero
   41134:	1001e926 	beq	r2,zero,418dc <___vfprintf_internal_r+0xb2c>
   41138:	0027883a 	mov	r19,zero
   4113c:	002d883a 	mov	r22,zero
   41140:	00020506 	br	41958 <___vfprintf_internal_r+0xba8>
   41144:	d9002c17 	ldw	r4,176(sp)
   41148:	b80b883a 	mov	r5,r23
   4114c:	00430800 	call	43080 <__swsetup_r>
   41150:	1005ac1e 	bne	r2,zero,42804 <___vfprintf_internal_r+0x1a54>
   41154:	b880030b 	ldhu	r2,12(r23)
   41158:	00c00284 	movi	r3,10
   4115c:	1080068c 	andi	r2,r2,26
   41160:	10ff3c1e 	bne	r2,r3,40e54 <__alt_data_end+0xfffcee54>
   41164:	b880038f 	ldh	r2,14(r23)
   41168:	103f3a16 	blt	r2,zero,40e54 <__alt_data_end+0xfffcee54>
   4116c:	d9c02d17 	ldw	r7,180(sp)
   41170:	d9002c17 	ldw	r4,176(sp)
   41174:	a80d883a 	mov	r6,r21
   41178:	b80b883a 	mov	r5,r23
   4117c:	0042fc40 	call	42fc4 <__sbprintf>
   41180:	00001106 	br	411c8 <___vfprintf_internal_r+0x418>
   41184:	d9002c17 	ldw	r4,176(sp)
   41188:	d9801e04 	addi	r6,sp,120
   4118c:	b80b883a 	mov	r5,r23
   41190:	004852c0 	call	4852c <__sprint_r>
   41194:	1000081e 	bne	r2,zero,411b8 <___vfprintf_internal_r+0x408>
   41198:	da000404 	addi	r8,sp,16
   4119c:	003f5306 	br	40eec <__alt_data_end+0xfffceeec>
   411a0:	d8802017 	ldw	r2,128(sp)
   411a4:	10000426 	beq	r2,zero,411b8 <___vfprintf_internal_r+0x408>
   411a8:	d9002c17 	ldw	r4,176(sp)
   411ac:	d9801e04 	addi	r6,sp,120
   411b0:	b80b883a 	mov	r5,r23
   411b4:	004852c0 	call	4852c <__sprint_r>
   411b8:	b880030b 	ldhu	r2,12(r23)
   411bc:	1080100c 	andi	r2,r2,64
   411c0:	1005901e 	bne	r2,zero,42804 <___vfprintf_internal_r+0x1a54>
   411c4:	d8802f17 	ldw	r2,188(sp)
   411c8:	dfc04717 	ldw	ra,284(sp)
   411cc:	df004617 	ldw	fp,280(sp)
   411d0:	ddc04517 	ldw	r23,276(sp)
   411d4:	dd804417 	ldw	r22,272(sp)
   411d8:	dd404317 	ldw	r21,268(sp)
   411dc:	dd004217 	ldw	r20,264(sp)
   411e0:	dcc04117 	ldw	r19,260(sp)
   411e4:	dc804017 	ldw	r18,256(sp)
   411e8:	dc403f17 	ldw	r17,252(sp)
   411ec:	dc003e17 	ldw	r16,248(sp)
   411f0:	dec04804 	addi	sp,sp,288
   411f4:	f800283a 	ret
   411f8:	d9002c17 	ldw	r4,176(sp)
   411fc:	00451d40 	call	451d4 <__sinit>
   41200:	003f0406 	br	40e14 <__alt_data_end+0xfffcee14>
   41204:	d8802d17 	ldw	r2,180(sp)
   41208:	d9002d17 	ldw	r4,180(sp)
   4120c:	10800017 	ldw	r2,0(r2)
   41210:	d8803115 	stw	r2,196(sp)
   41214:	20800104 	addi	r2,r4,4
   41218:	d9003117 	ldw	r4,196(sp)
   4121c:	203fa716 	blt	r4,zero,410bc <__alt_data_end+0xfffcf0bc>
   41220:	d8802d15 	stw	r2,180(sp)
   41224:	ac400007 	ldb	r17,0(r21)
   41228:	003f4206 	br	40f34 <__alt_data_end+0xfffcef34>
   4122c:	ac400007 	ldb	r17,0(r21)
   41230:	aac00044 	addi	r11,r21,1
   41234:	8a872826 	beq	r17,r10,42ed8 <___vfprintf_internal_r+0x2128>
   41238:	88bff404 	addi	r2,r17,-48
   4123c:	0009883a 	mov	r4,zero
   41240:	30867d36 	bltu	r6,r2,42c38 <___vfprintf_internal_r+0x1e88>
   41244:	5c400007 	ldb	r17,0(r11)
   41248:	210002a4 	muli	r4,r4,10
   4124c:	5d400044 	addi	r21,r11,1
   41250:	a817883a 	mov	r11,r21
   41254:	2089883a 	add	r4,r4,r2
   41258:	88bff404 	addi	r2,r17,-48
   4125c:	30bff92e 	bgeu	r6,r2,41244 <__alt_data_end+0xfffcf244>
   41260:	2005c916 	blt	r4,zero,42988 <___vfprintf_internal_r+0x1bd8>
   41264:	d9002915 	stw	r4,164(sp)
   41268:	003f3306 	br	40f38 <__alt_data_end+0xfffcef38>
   4126c:	94802014 	ori	r18,r18,128
   41270:	ac400007 	ldb	r17,0(r21)
   41274:	003f2f06 	br	40f34 <__alt_data_end+0xfffcef34>
   41278:	a809883a 	mov	r4,r21
   4127c:	d8003115 	stw	zero,196(sp)
   41280:	88bff404 	addi	r2,r17,-48
   41284:	0017883a 	mov	r11,zero
   41288:	24400007 	ldb	r17,0(r4)
   4128c:	5ac002a4 	muli	r11,r11,10
   41290:	ad400044 	addi	r21,r21,1
   41294:	a809883a 	mov	r4,r21
   41298:	12d7883a 	add	r11,r2,r11
   4129c:	88bff404 	addi	r2,r17,-48
   412a0:	30bff92e 	bgeu	r6,r2,41288 <__alt_data_end+0xfffcf288>
   412a4:	dac03115 	stw	r11,196(sp)
   412a8:	003f2306 	br	40f38 <__alt_data_end+0xfffcef38>
   412ac:	18c03fcc 	andi	r3,r3,255
   412b0:	18072b1e 	bne	r3,zero,42f60 <___vfprintf_internal_r+0x21b0>
   412b4:	94800414 	ori	r18,r18,16
   412b8:	9080080c 	andi	r2,r18,32
   412bc:	10037b26 	beq	r2,zero,420ac <___vfprintf_internal_r+0x12fc>
   412c0:	d9402d17 	ldw	r5,180(sp)
   412c4:	28800117 	ldw	r2,4(r5)
   412c8:	2cc00017 	ldw	r19,0(r5)
   412cc:	29400204 	addi	r5,r5,8
   412d0:	d9402d15 	stw	r5,180(sp)
   412d4:	102d883a 	mov	r22,r2
   412d8:	10044b16 	blt	r2,zero,42408 <___vfprintf_internal_r+0x1658>
   412dc:	d9402917 	ldw	r5,164(sp)
   412e0:	df002783 	ldbu	fp,158(sp)
   412e4:	2803bc16 	blt	r5,zero,421d8 <___vfprintf_internal_r+0x1428>
   412e8:	00ffdfc4 	movi	r3,-129
   412ec:	9d84b03a 	or	r2,r19,r22
   412f0:	90e4703a 	and	r18,r18,r3
   412f4:	10017726 	beq	r2,zero,418d4 <___vfprintf_internal_r+0xb24>
   412f8:	b0038326 	beq	r22,zero,42108 <___vfprintf_internal_r+0x1358>
   412fc:	dc402a15 	stw	r17,168(sp)
   41300:	dc001e04 	addi	r16,sp,120
   41304:	b023883a 	mov	r17,r22
   41308:	402d883a 	mov	r22,r8
   4130c:	9809883a 	mov	r4,r19
   41310:	880b883a 	mov	r5,r17
   41314:	01800284 	movi	r6,10
   41318:	000f883a 	mov	r7,zero
   4131c:	004a9240 	call	4a924 <__umoddi3>
   41320:	10800c04 	addi	r2,r2,48
   41324:	843fffc4 	addi	r16,r16,-1
   41328:	9809883a 	mov	r4,r19
   4132c:	880b883a 	mov	r5,r17
   41330:	80800005 	stb	r2,0(r16)
   41334:	01800284 	movi	r6,10
   41338:	000f883a 	mov	r7,zero
   4133c:	004a3ac0 	call	4a3ac <__udivdi3>
   41340:	1027883a 	mov	r19,r2
   41344:	10c4b03a 	or	r2,r2,r3
   41348:	1823883a 	mov	r17,r3
   4134c:	103fef1e 	bne	r2,zero,4130c <__alt_data_end+0xfffcf30c>
   41350:	d8c02817 	ldw	r3,160(sp)
   41354:	dc402a17 	ldw	r17,168(sp)
   41358:	b011883a 	mov	r8,r22
   4135c:	1c07c83a 	sub	r3,r3,r16
   41360:	d8c02e15 	stw	r3,184(sp)
   41364:	00005906 	br	414cc <___vfprintf_internal_r+0x71c>
   41368:	18c03fcc 	andi	r3,r3,255
   4136c:	1806fa1e 	bne	r3,zero,42f58 <___vfprintf_internal_r+0x21a8>
   41370:	9080020c 	andi	r2,r18,8
   41374:	10048a26 	beq	r2,zero,425a0 <___vfprintf_internal_r+0x17f0>
   41378:	d8c02d17 	ldw	r3,180(sp)
   4137c:	d9002d17 	ldw	r4,180(sp)
   41380:	d9402d17 	ldw	r5,180(sp)
   41384:	18c00017 	ldw	r3,0(r3)
   41388:	21000117 	ldw	r4,4(r4)
   4138c:	29400204 	addi	r5,r5,8
   41390:	d8c03615 	stw	r3,216(sp)
   41394:	d9003815 	stw	r4,224(sp)
   41398:	d9402d15 	stw	r5,180(sp)
   4139c:	d9003617 	ldw	r4,216(sp)
   413a0:	d9403817 	ldw	r5,224(sp)
   413a4:	da003d15 	stw	r8,244(sp)
   413a8:	04000044 	movi	r16,1
   413ac:	00481500 	call	48150 <__fpclassifyd>
   413b0:	da003d17 	ldw	r8,244(sp)
   413b4:	14041f1e 	bne	r2,r16,42434 <___vfprintf_internal_r+0x1684>
   413b8:	d9003617 	ldw	r4,216(sp)
   413bc:	d9403817 	ldw	r5,224(sp)
   413c0:	000d883a 	mov	r6,zero
   413c4:	000f883a 	mov	r7,zero
   413c8:	004c3080 	call	4c308 <__ledf2>
   413cc:	da003d17 	ldw	r8,244(sp)
   413d0:	1005be16 	blt	r2,zero,42acc <___vfprintf_internal_r+0x1d1c>
   413d4:	df002783 	ldbu	fp,158(sp)
   413d8:	008011c4 	movi	r2,71
   413dc:	1445330e 	bge	r2,r17,428ac <___vfprintf_internal_r+0x1afc>
   413e0:	04000174 	movhi	r16,5
   413e4:	843fc104 	addi	r16,r16,-252
   413e8:	00c000c4 	movi	r3,3
   413ec:	00bfdfc4 	movi	r2,-129
   413f0:	d8c02a15 	stw	r3,168(sp)
   413f4:	90a4703a 	and	r18,r18,r2
   413f8:	d8c02e15 	stw	r3,184(sp)
   413fc:	d8002915 	stw	zero,164(sp)
   41400:	d8003215 	stw	zero,200(sp)
   41404:	00003706 	br	414e4 <___vfprintf_internal_r+0x734>
   41408:	94800214 	ori	r18,r18,8
   4140c:	ac400007 	ldb	r17,0(r21)
   41410:	003ec806 	br	40f34 <__alt_data_end+0xfffcef34>
   41414:	18c03fcc 	andi	r3,r3,255
   41418:	1806db1e 	bne	r3,zero,42f88 <___vfprintf_internal_r+0x21d8>
   4141c:	94800414 	ori	r18,r18,16
   41420:	9080080c 	andi	r2,r18,32
   41424:	1002d826 	beq	r2,zero,41f88 <___vfprintf_internal_r+0x11d8>
   41428:	d9402d17 	ldw	r5,180(sp)
   4142c:	d8c02917 	ldw	r3,164(sp)
   41430:	d8002785 	stb	zero,158(sp)
   41434:	28800204 	addi	r2,r5,8
   41438:	2cc00017 	ldw	r19,0(r5)
   4143c:	2d800117 	ldw	r22,4(r5)
   41440:	18048f16 	blt	r3,zero,42680 <___vfprintf_internal_r+0x18d0>
   41444:	013fdfc4 	movi	r4,-129
   41448:	9d86b03a 	or	r3,r19,r22
   4144c:	d8802d15 	stw	r2,180(sp)
   41450:	9124703a 	and	r18,r18,r4
   41454:	1802d91e 	bne	r3,zero,41fbc <___vfprintf_internal_r+0x120c>
   41458:	d8c02917 	ldw	r3,164(sp)
   4145c:	0039883a 	mov	fp,zero
   41460:	1805c326 	beq	r3,zero,42b70 <___vfprintf_internal_r+0x1dc0>
   41464:	0027883a 	mov	r19,zero
   41468:	002d883a 	mov	r22,zero
   4146c:	dc001e04 	addi	r16,sp,120
   41470:	9806d0fa 	srli	r3,r19,3
   41474:	b008977a 	slli	r4,r22,29
   41478:	b02cd0fa 	srli	r22,r22,3
   4147c:	9cc001cc 	andi	r19,r19,7
   41480:	98800c04 	addi	r2,r19,48
   41484:	843fffc4 	addi	r16,r16,-1
   41488:	20e6b03a 	or	r19,r4,r3
   4148c:	80800005 	stb	r2,0(r16)
   41490:	9d86b03a 	or	r3,r19,r22
   41494:	183ff61e 	bne	r3,zero,41470 <__alt_data_end+0xfffcf470>
   41498:	90c0004c 	andi	r3,r18,1
   4149c:	18013b26 	beq	r3,zero,4198c <___vfprintf_internal_r+0xbdc>
   414a0:	10803fcc 	andi	r2,r2,255
   414a4:	1080201c 	xori	r2,r2,128
   414a8:	10bfe004 	addi	r2,r2,-128
   414ac:	00c00c04 	movi	r3,48
   414b0:	10c13626 	beq	r2,r3,4198c <___vfprintf_internal_r+0xbdc>
   414b4:	80ffffc5 	stb	r3,-1(r16)
   414b8:	d8c02817 	ldw	r3,160(sp)
   414bc:	80bfffc4 	addi	r2,r16,-1
   414c0:	1021883a 	mov	r16,r2
   414c4:	1887c83a 	sub	r3,r3,r2
   414c8:	d8c02e15 	stw	r3,184(sp)
   414cc:	d8802e17 	ldw	r2,184(sp)
   414d0:	d9002917 	ldw	r4,164(sp)
   414d4:	1100010e 	bge	r2,r4,414dc <___vfprintf_internal_r+0x72c>
   414d8:	2005883a 	mov	r2,r4
   414dc:	d8802a15 	stw	r2,168(sp)
   414e0:	d8003215 	stw	zero,200(sp)
   414e4:	e7003fcc 	andi	fp,fp,255
   414e8:	e700201c 	xori	fp,fp,128
   414ec:	e73fe004 	addi	fp,fp,-128
   414f0:	e0000326 	beq	fp,zero,41500 <___vfprintf_internal_r+0x750>
   414f4:	d8c02a17 	ldw	r3,168(sp)
   414f8:	18c00044 	addi	r3,r3,1
   414fc:	d8c02a15 	stw	r3,168(sp)
   41500:	90c0008c 	andi	r3,r18,2
   41504:	d8c02b15 	stw	r3,172(sp)
   41508:	18000326 	beq	r3,zero,41518 <___vfprintf_internal_r+0x768>
   4150c:	d8c02a17 	ldw	r3,168(sp)
   41510:	18c00084 	addi	r3,r3,2
   41514:	d8c02a15 	stw	r3,168(sp)
   41518:	90c0210c 	andi	r3,r18,132
   4151c:	d8c03015 	stw	r3,192(sp)
   41520:	1801a31e 	bne	r3,zero,41bb0 <___vfprintf_internal_r+0xe00>
   41524:	d9003117 	ldw	r4,196(sp)
   41528:	d8c02a17 	ldw	r3,168(sp)
   4152c:	20e7c83a 	sub	r19,r4,r3
   41530:	04c19f0e 	bge	zero,r19,41bb0 <___vfprintf_internal_r+0xe00>
   41534:	02400404 	movi	r9,16
   41538:	d8c02017 	ldw	r3,128(sp)
   4153c:	d8801f17 	ldw	r2,124(sp)
   41540:	4cc50d0e 	bge	r9,r19,42978 <___vfprintf_internal_r+0x1bc8>
   41544:	01400174 	movhi	r5,5
   41548:	297fd484 	addi	r5,r5,-174
   4154c:	dc403b15 	stw	r17,236(sp)
   41550:	d9403515 	stw	r5,212(sp)
   41554:	9823883a 	mov	r17,r19
   41558:	482d883a 	mov	r22,r9
   4155c:	9027883a 	mov	r19,r18
   41560:	070001c4 	movi	fp,7
   41564:	8025883a 	mov	r18,r16
   41568:	dc002c17 	ldw	r16,176(sp)
   4156c:	00000306 	br	4157c <___vfprintf_internal_r+0x7cc>
   41570:	8c7ffc04 	addi	r17,r17,-16
   41574:	42000204 	addi	r8,r8,8
   41578:	b440130e 	bge	r22,r17,415c8 <___vfprintf_internal_r+0x818>
   4157c:	01000174 	movhi	r4,5
   41580:	18c00404 	addi	r3,r3,16
   41584:	10800044 	addi	r2,r2,1
   41588:	213fd484 	addi	r4,r4,-174
   4158c:	41000015 	stw	r4,0(r8)
   41590:	45800115 	stw	r22,4(r8)
   41594:	d8c02015 	stw	r3,128(sp)
   41598:	d8801f15 	stw	r2,124(sp)
   4159c:	e0bff40e 	bge	fp,r2,41570 <__alt_data_end+0xfffcf570>
   415a0:	d9801e04 	addi	r6,sp,120
   415a4:	b80b883a 	mov	r5,r23
   415a8:	8009883a 	mov	r4,r16
   415ac:	004852c0 	call	4852c <__sprint_r>
   415b0:	103f011e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   415b4:	8c7ffc04 	addi	r17,r17,-16
   415b8:	d8c02017 	ldw	r3,128(sp)
   415bc:	d8801f17 	ldw	r2,124(sp)
   415c0:	da000404 	addi	r8,sp,16
   415c4:	b47fed16 	blt	r22,r17,4157c <__alt_data_end+0xfffcf57c>
   415c8:	9021883a 	mov	r16,r18
   415cc:	9825883a 	mov	r18,r19
   415d0:	8827883a 	mov	r19,r17
   415d4:	dc403b17 	ldw	r17,236(sp)
   415d8:	d9403517 	ldw	r5,212(sp)
   415dc:	98c7883a 	add	r3,r19,r3
   415e0:	10800044 	addi	r2,r2,1
   415e4:	41400015 	stw	r5,0(r8)
   415e8:	44c00115 	stw	r19,4(r8)
   415ec:	d8c02015 	stw	r3,128(sp)
   415f0:	d8801f15 	stw	r2,124(sp)
   415f4:	010001c4 	movi	r4,7
   415f8:	2082a316 	blt	r4,r2,42088 <___vfprintf_internal_r+0x12d8>
   415fc:	df002787 	ldb	fp,158(sp)
   41600:	42000204 	addi	r8,r8,8
   41604:	e0000c26 	beq	fp,zero,41638 <___vfprintf_internal_r+0x888>
   41608:	d8801f17 	ldw	r2,124(sp)
   4160c:	d9002784 	addi	r4,sp,158
   41610:	18c00044 	addi	r3,r3,1
   41614:	10800044 	addi	r2,r2,1
   41618:	41000015 	stw	r4,0(r8)
   4161c:	01000044 	movi	r4,1
   41620:	41000115 	stw	r4,4(r8)
   41624:	d8c02015 	stw	r3,128(sp)
   41628:	d8801f15 	stw	r2,124(sp)
   4162c:	010001c4 	movi	r4,7
   41630:	20823c16 	blt	r4,r2,41f24 <___vfprintf_internal_r+0x1174>
   41634:	42000204 	addi	r8,r8,8
   41638:	d8802b17 	ldw	r2,172(sp)
   4163c:	10000c26 	beq	r2,zero,41670 <___vfprintf_internal_r+0x8c0>
   41640:	d8801f17 	ldw	r2,124(sp)
   41644:	d9002704 	addi	r4,sp,156
   41648:	18c00084 	addi	r3,r3,2
   4164c:	10800044 	addi	r2,r2,1
   41650:	41000015 	stw	r4,0(r8)
   41654:	01000084 	movi	r4,2
   41658:	41000115 	stw	r4,4(r8)
   4165c:	d8c02015 	stw	r3,128(sp)
   41660:	d8801f15 	stw	r2,124(sp)
   41664:	010001c4 	movi	r4,7
   41668:	20823616 	blt	r4,r2,41f44 <___vfprintf_internal_r+0x1194>
   4166c:	42000204 	addi	r8,r8,8
   41670:	d9003017 	ldw	r4,192(sp)
   41674:	00802004 	movi	r2,128
   41678:	20819926 	beq	r4,r2,41ce0 <___vfprintf_internal_r+0xf30>
   4167c:	d9402917 	ldw	r5,164(sp)
   41680:	d8802e17 	ldw	r2,184(sp)
   41684:	28adc83a 	sub	r22,r5,r2
   41688:	0580310e 	bge	zero,r22,41750 <___vfprintf_internal_r+0x9a0>
   4168c:	07000404 	movi	fp,16
   41690:	d8801f17 	ldw	r2,124(sp)
   41694:	e584140e 	bge	fp,r22,426e8 <___vfprintf_internal_r+0x1938>
   41698:	01400174 	movhi	r5,5
   4169c:	297fd084 	addi	r5,r5,-190
   416a0:	dc402915 	stw	r17,164(sp)
   416a4:	d9402b15 	stw	r5,172(sp)
   416a8:	b023883a 	mov	r17,r22
   416ac:	04c001c4 	movi	r19,7
   416b0:	a82d883a 	mov	r22,r21
   416b4:	902b883a 	mov	r21,r18
   416b8:	8025883a 	mov	r18,r16
   416bc:	dc002c17 	ldw	r16,176(sp)
   416c0:	00000306 	br	416d0 <___vfprintf_internal_r+0x920>
   416c4:	8c7ffc04 	addi	r17,r17,-16
   416c8:	42000204 	addi	r8,r8,8
   416cc:	e440110e 	bge	fp,r17,41714 <___vfprintf_internal_r+0x964>
   416d0:	18c00404 	addi	r3,r3,16
   416d4:	10800044 	addi	r2,r2,1
   416d8:	45000015 	stw	r20,0(r8)
   416dc:	47000115 	stw	fp,4(r8)
   416e0:	d8c02015 	stw	r3,128(sp)
   416e4:	d8801f15 	stw	r2,124(sp)
   416e8:	98bff60e 	bge	r19,r2,416c4 <__alt_data_end+0xfffcf6c4>
   416ec:	d9801e04 	addi	r6,sp,120
   416f0:	b80b883a 	mov	r5,r23
   416f4:	8009883a 	mov	r4,r16
   416f8:	004852c0 	call	4852c <__sprint_r>
   416fc:	103eae1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41700:	8c7ffc04 	addi	r17,r17,-16
   41704:	d8c02017 	ldw	r3,128(sp)
   41708:	d8801f17 	ldw	r2,124(sp)
   4170c:	da000404 	addi	r8,sp,16
   41710:	e47fef16 	blt	fp,r17,416d0 <__alt_data_end+0xfffcf6d0>
   41714:	9021883a 	mov	r16,r18
   41718:	a825883a 	mov	r18,r21
   4171c:	b02b883a 	mov	r21,r22
   41720:	882d883a 	mov	r22,r17
   41724:	dc402917 	ldw	r17,164(sp)
   41728:	d9002b17 	ldw	r4,172(sp)
   4172c:	1d87883a 	add	r3,r3,r22
   41730:	10800044 	addi	r2,r2,1
   41734:	41000015 	stw	r4,0(r8)
   41738:	45800115 	stw	r22,4(r8)
   4173c:	d8c02015 	stw	r3,128(sp)
   41740:	d8801f15 	stw	r2,124(sp)
   41744:	010001c4 	movi	r4,7
   41748:	2081ee16 	blt	r4,r2,41f04 <___vfprintf_internal_r+0x1154>
   4174c:	42000204 	addi	r8,r8,8
   41750:	9080400c 	andi	r2,r18,256
   41754:	1001181e 	bne	r2,zero,41bb8 <___vfprintf_internal_r+0xe08>
   41758:	d9402e17 	ldw	r5,184(sp)
   4175c:	d8801f17 	ldw	r2,124(sp)
   41760:	44000015 	stw	r16,0(r8)
   41764:	1947883a 	add	r3,r3,r5
   41768:	10800044 	addi	r2,r2,1
   4176c:	41400115 	stw	r5,4(r8)
   41770:	d8c02015 	stw	r3,128(sp)
   41774:	d8801f15 	stw	r2,124(sp)
   41778:	010001c4 	movi	r4,7
   4177c:	2081d316 	blt	r4,r2,41ecc <___vfprintf_internal_r+0x111c>
   41780:	42000204 	addi	r8,r8,8
   41784:	9480010c 	andi	r18,r18,4
   41788:	90003226 	beq	r18,zero,41854 <___vfprintf_internal_r+0xaa4>
   4178c:	d9403117 	ldw	r5,196(sp)
   41790:	d8802a17 	ldw	r2,168(sp)
   41794:	28a1c83a 	sub	r16,r5,r2
   41798:	04002e0e 	bge	zero,r16,41854 <___vfprintf_internal_r+0xaa4>
   4179c:	04400404 	movi	r17,16
   417a0:	d8801f17 	ldw	r2,124(sp)
   417a4:	8c04a20e 	bge	r17,r16,42a30 <___vfprintf_internal_r+0x1c80>
   417a8:	01400174 	movhi	r5,5
   417ac:	297fd484 	addi	r5,r5,-174
   417b0:	d9403515 	stw	r5,212(sp)
   417b4:	048001c4 	movi	r18,7
   417b8:	dcc02c17 	ldw	r19,176(sp)
   417bc:	00000306 	br	417cc <___vfprintf_internal_r+0xa1c>
   417c0:	843ffc04 	addi	r16,r16,-16
   417c4:	42000204 	addi	r8,r8,8
   417c8:	8c00130e 	bge	r17,r16,41818 <___vfprintf_internal_r+0xa68>
   417cc:	01000174 	movhi	r4,5
   417d0:	18c00404 	addi	r3,r3,16
   417d4:	10800044 	addi	r2,r2,1
   417d8:	213fd484 	addi	r4,r4,-174
   417dc:	41000015 	stw	r4,0(r8)
   417e0:	44400115 	stw	r17,4(r8)
   417e4:	d8c02015 	stw	r3,128(sp)
   417e8:	d8801f15 	stw	r2,124(sp)
   417ec:	90bff40e 	bge	r18,r2,417c0 <__alt_data_end+0xfffcf7c0>
   417f0:	d9801e04 	addi	r6,sp,120
   417f4:	b80b883a 	mov	r5,r23
   417f8:	9809883a 	mov	r4,r19
   417fc:	004852c0 	call	4852c <__sprint_r>
   41800:	103e6d1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41804:	843ffc04 	addi	r16,r16,-16
   41808:	d8c02017 	ldw	r3,128(sp)
   4180c:	d8801f17 	ldw	r2,124(sp)
   41810:	da000404 	addi	r8,sp,16
   41814:	8c3fed16 	blt	r17,r16,417cc <__alt_data_end+0xfffcf7cc>
   41818:	d9403517 	ldw	r5,212(sp)
   4181c:	1c07883a 	add	r3,r3,r16
   41820:	10800044 	addi	r2,r2,1
   41824:	41400015 	stw	r5,0(r8)
   41828:	44000115 	stw	r16,4(r8)
   4182c:	d8c02015 	stw	r3,128(sp)
   41830:	d8801f15 	stw	r2,124(sp)
   41834:	010001c4 	movi	r4,7
   41838:	2080060e 	bge	r4,r2,41854 <___vfprintf_internal_r+0xaa4>
   4183c:	d9002c17 	ldw	r4,176(sp)
   41840:	d9801e04 	addi	r6,sp,120
   41844:	b80b883a 	mov	r5,r23
   41848:	004852c0 	call	4852c <__sprint_r>
   4184c:	103e5a1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41850:	d8c02017 	ldw	r3,128(sp)
   41854:	d8803117 	ldw	r2,196(sp)
   41858:	d9002a17 	ldw	r4,168(sp)
   4185c:	1100010e 	bge	r2,r4,41864 <___vfprintf_internal_r+0xab4>
   41860:	2005883a 	mov	r2,r4
   41864:	d9402f17 	ldw	r5,188(sp)
   41868:	288b883a 	add	r5,r5,r2
   4186c:	d9402f15 	stw	r5,188(sp)
   41870:	18019e1e 	bne	r3,zero,41eec <___vfprintf_internal_r+0x113c>
   41874:	a8800007 	ldb	r2,0(r21)
   41878:	d8001f15 	stw	zero,124(sp)
   4187c:	da000404 	addi	r8,sp,16
   41880:	103d851e 	bne	r2,zero,40e98 <__alt_data_end+0xfffcee98>
   41884:	a821883a 	mov	r16,r21
   41888:	003d9b06 	br	40ef8 <__alt_data_end+0xfffceef8>
   4188c:	18c03fcc 	andi	r3,r3,255
   41890:	1805c11e 	bne	r3,zero,42f98 <___vfprintf_internal_r+0x21e8>
   41894:	94800414 	ori	r18,r18,16
   41898:	9080080c 	andi	r2,r18,32
   4189c:	10020c26 	beq	r2,zero,420d0 <___vfprintf_internal_r+0x1320>
   418a0:	d8802d17 	ldw	r2,180(sp)
   418a4:	d9002917 	ldw	r4,164(sp)
   418a8:	d8002785 	stb	zero,158(sp)
   418ac:	10c00204 	addi	r3,r2,8
   418b0:	14c00017 	ldw	r19,0(r2)
   418b4:	15800117 	ldw	r22,4(r2)
   418b8:	20040f16 	blt	r4,zero,428f8 <___vfprintf_internal_r+0x1b48>
   418bc:	013fdfc4 	movi	r4,-129
   418c0:	9d84b03a 	or	r2,r19,r22
   418c4:	d8c02d15 	stw	r3,180(sp)
   418c8:	9124703a 	and	r18,r18,r4
   418cc:	0039883a 	mov	fp,zero
   418d0:	103e891e 	bne	r2,zero,412f8 <__alt_data_end+0xfffcf2f8>
   418d4:	d9002917 	ldw	r4,164(sp)
   418d8:	2002c11e 	bne	r4,zero,423e0 <___vfprintf_internal_r+0x1630>
   418dc:	d8002915 	stw	zero,164(sp)
   418e0:	d8002e15 	stw	zero,184(sp)
   418e4:	dc001e04 	addi	r16,sp,120
   418e8:	003ef806 	br	414cc <__alt_data_end+0xfffcf4cc>
   418ec:	18c03fcc 	andi	r3,r3,255
   418f0:	18059d1e 	bne	r3,zero,42f68 <___vfprintf_internal_r+0x21b8>
   418f4:	01400174 	movhi	r5,5
   418f8:	297fc404 	addi	r5,r5,-240
   418fc:	d9403915 	stw	r5,228(sp)
   41900:	9080080c 	andi	r2,r18,32
   41904:	10005226 	beq	r2,zero,41a50 <___vfprintf_internal_r+0xca0>
   41908:	d8802d17 	ldw	r2,180(sp)
   4190c:	14c00017 	ldw	r19,0(r2)
   41910:	15800117 	ldw	r22,4(r2)
   41914:	10800204 	addi	r2,r2,8
   41918:	d8802d15 	stw	r2,180(sp)
   4191c:	9080004c 	andi	r2,r18,1
   41920:	10019026 	beq	r2,zero,41f64 <___vfprintf_internal_r+0x11b4>
   41924:	9d84b03a 	or	r2,r19,r22
   41928:	10036926 	beq	r2,zero,426d0 <___vfprintf_internal_r+0x1920>
   4192c:	d8c02917 	ldw	r3,164(sp)
   41930:	00800c04 	movi	r2,48
   41934:	d8802705 	stb	r2,156(sp)
   41938:	dc402745 	stb	r17,157(sp)
   4193c:	d8002785 	stb	zero,158(sp)
   41940:	90800094 	ori	r2,r18,2
   41944:	18045d16 	blt	r3,zero,42abc <___vfprintf_internal_r+0x1d0c>
   41948:	00bfdfc4 	movi	r2,-129
   4194c:	90a4703a 	and	r18,r18,r2
   41950:	94800094 	ori	r18,r18,2
   41954:	0039883a 	mov	fp,zero
   41958:	d9003917 	ldw	r4,228(sp)
   4195c:	dc001e04 	addi	r16,sp,120
   41960:	988003cc 	andi	r2,r19,15
   41964:	b006973a 	slli	r3,r22,28
   41968:	2085883a 	add	r2,r4,r2
   4196c:	9826d13a 	srli	r19,r19,4
   41970:	10800003 	ldbu	r2,0(r2)
   41974:	b02cd13a 	srli	r22,r22,4
   41978:	843fffc4 	addi	r16,r16,-1
   4197c:	1ce6b03a 	or	r19,r3,r19
   41980:	80800005 	stb	r2,0(r16)
   41984:	9d84b03a 	or	r2,r19,r22
   41988:	103ff51e 	bne	r2,zero,41960 <__alt_data_end+0xfffcf960>
   4198c:	d8c02817 	ldw	r3,160(sp)
   41990:	1c07c83a 	sub	r3,r3,r16
   41994:	d8c02e15 	stw	r3,184(sp)
   41998:	003ecc06 	br	414cc <__alt_data_end+0xfffcf4cc>
   4199c:	18c03fcc 	andi	r3,r3,255
   419a0:	183e9f26 	beq	r3,zero,41420 <__alt_data_end+0xfffcf420>
   419a4:	d9c02785 	stb	r7,158(sp)
   419a8:	003e9d06 	br	41420 <__alt_data_end+0xfffcf420>
   419ac:	00c00044 	movi	r3,1
   419b0:	01c00ac4 	movi	r7,43
   419b4:	ac400007 	ldb	r17,0(r21)
   419b8:	003d5e06 	br	40f34 <__alt_data_end+0xfffcef34>
   419bc:	94800814 	ori	r18,r18,32
   419c0:	ac400007 	ldb	r17,0(r21)
   419c4:	003d5b06 	br	40f34 <__alt_data_end+0xfffcef34>
   419c8:	d8c02d17 	ldw	r3,180(sp)
   419cc:	d8002785 	stb	zero,158(sp)
   419d0:	1c000017 	ldw	r16,0(r3)
   419d4:	1cc00104 	addi	r19,r3,4
   419d8:	80041926 	beq	r16,zero,42a40 <___vfprintf_internal_r+0x1c90>
   419dc:	d9002917 	ldw	r4,164(sp)
   419e0:	2003d016 	blt	r4,zero,42924 <___vfprintf_internal_r+0x1b74>
   419e4:	200d883a 	mov	r6,r4
   419e8:	000b883a 	mov	r5,zero
   419ec:	8009883a 	mov	r4,r16
   419f0:	da003d15 	stw	r8,244(sp)
   419f4:	00467400 	call	46740 <memchr>
   419f8:	da003d17 	ldw	r8,244(sp)
   419fc:	10045426 	beq	r2,zero,42b50 <___vfprintf_internal_r+0x1da0>
   41a00:	1405c83a 	sub	r2,r2,r16
   41a04:	d8802e15 	stw	r2,184(sp)
   41a08:	1003cc16 	blt	r2,zero,4293c <___vfprintf_internal_r+0x1b8c>
   41a0c:	df002783 	ldbu	fp,158(sp)
   41a10:	d8802a15 	stw	r2,168(sp)
   41a14:	dcc02d15 	stw	r19,180(sp)
   41a18:	d8002915 	stw	zero,164(sp)
   41a1c:	d8003215 	stw	zero,200(sp)
   41a20:	003eb006 	br	414e4 <__alt_data_end+0xfffcf4e4>
   41a24:	18c03fcc 	andi	r3,r3,255
   41a28:	183f9b26 	beq	r3,zero,41898 <__alt_data_end+0xfffcf898>
   41a2c:	d9c02785 	stb	r7,158(sp)
   41a30:	003f9906 	br	41898 <__alt_data_end+0xfffcf898>
   41a34:	18c03fcc 	andi	r3,r3,255
   41a38:	1805551e 	bne	r3,zero,42f90 <___vfprintf_internal_r+0x21e0>
   41a3c:	01400174 	movhi	r5,5
   41a40:	297fc904 	addi	r5,r5,-220
   41a44:	d9403915 	stw	r5,228(sp)
   41a48:	9080080c 	andi	r2,r18,32
   41a4c:	103fae1e 	bne	r2,zero,41908 <__alt_data_end+0xfffcf908>
   41a50:	9080040c 	andi	r2,r18,16
   41a54:	1002de26 	beq	r2,zero,425d0 <___vfprintf_internal_r+0x1820>
   41a58:	d8c02d17 	ldw	r3,180(sp)
   41a5c:	002d883a 	mov	r22,zero
   41a60:	1cc00017 	ldw	r19,0(r3)
   41a64:	18c00104 	addi	r3,r3,4
   41a68:	d8c02d15 	stw	r3,180(sp)
   41a6c:	003fab06 	br	4191c <__alt_data_end+0xfffcf91c>
   41a70:	38803fcc 	andi	r2,r7,255
   41a74:	1080201c 	xori	r2,r2,128
   41a78:	10bfe004 	addi	r2,r2,-128
   41a7c:	1002d21e 	bne	r2,zero,425c8 <___vfprintf_internal_r+0x1818>
   41a80:	00c00044 	movi	r3,1
   41a84:	01c00804 	movi	r7,32
   41a88:	ac400007 	ldb	r17,0(r21)
   41a8c:	003d2906 	br	40f34 <__alt_data_end+0xfffcef34>
   41a90:	94800054 	ori	r18,r18,1
   41a94:	ac400007 	ldb	r17,0(r21)
   41a98:	003d2606 	br	40f34 <__alt_data_end+0xfffcef34>
   41a9c:	18c03fcc 	andi	r3,r3,255
   41aa0:	183e0526 	beq	r3,zero,412b8 <__alt_data_end+0xfffcf2b8>
   41aa4:	d9c02785 	stb	r7,158(sp)
   41aa8:	003e0306 	br	412b8 <__alt_data_end+0xfffcf2b8>
   41aac:	94801014 	ori	r18,r18,64
   41ab0:	ac400007 	ldb	r17,0(r21)
   41ab4:	003d1f06 	br	40f34 <__alt_data_end+0xfffcef34>
   41ab8:	ac400007 	ldb	r17,0(r21)
   41abc:	8a438726 	beq	r17,r9,428dc <___vfprintf_internal_r+0x1b2c>
   41ac0:	94800414 	ori	r18,r18,16
   41ac4:	003d1b06 	br	40f34 <__alt_data_end+0xfffcef34>
   41ac8:	18c03fcc 	andi	r3,r3,255
   41acc:	1805341e 	bne	r3,zero,42fa0 <___vfprintf_internal_r+0x21f0>
   41ad0:	9080080c 	andi	r2,r18,32
   41ad4:	1002cd26 	beq	r2,zero,4260c <___vfprintf_internal_r+0x185c>
   41ad8:	d9402d17 	ldw	r5,180(sp)
   41adc:	d9002f17 	ldw	r4,188(sp)
   41ae0:	28800017 	ldw	r2,0(r5)
   41ae4:	2007d7fa 	srai	r3,r4,31
   41ae8:	29400104 	addi	r5,r5,4
   41aec:	d9402d15 	stw	r5,180(sp)
   41af0:	11000015 	stw	r4,0(r2)
   41af4:	10c00115 	stw	r3,4(r2)
   41af8:	003ce506 	br	40e90 <__alt_data_end+0xfffcee90>
   41afc:	d8c02d17 	ldw	r3,180(sp)
   41b00:	d9002d17 	ldw	r4,180(sp)
   41b04:	d8002785 	stb	zero,158(sp)
   41b08:	18800017 	ldw	r2,0(r3)
   41b0c:	21000104 	addi	r4,r4,4
   41b10:	00c00044 	movi	r3,1
   41b14:	d8c02a15 	stw	r3,168(sp)
   41b18:	d8801405 	stb	r2,80(sp)
   41b1c:	d9002d15 	stw	r4,180(sp)
   41b20:	d8c02e15 	stw	r3,184(sp)
   41b24:	d8002915 	stw	zero,164(sp)
   41b28:	d8003215 	stw	zero,200(sp)
   41b2c:	dc001404 	addi	r16,sp,80
   41b30:	0039883a 	mov	fp,zero
   41b34:	003e7206 	br	41500 <__alt_data_end+0xfffcf500>
   41b38:	01000174 	movhi	r4,5
   41b3c:	213fc904 	addi	r4,r4,-220
   41b40:	0039883a 	mov	fp,zero
   41b44:	d9003915 	stw	r4,228(sp)
   41b48:	04401e04 	movi	r17,120
   41b4c:	003f8206 	br	41958 <__alt_data_end+0xfffcf958>
   41b50:	18c03fcc 	andi	r3,r3,255
   41b54:	1805061e 	bne	r3,zero,42f70 <___vfprintf_internal_r+0x21c0>
   41b58:	883d9126 	beq	r17,zero,411a0 <__alt_data_end+0xfffcf1a0>
   41b5c:	00c00044 	movi	r3,1
   41b60:	d8c02a15 	stw	r3,168(sp)
   41b64:	dc401405 	stb	r17,80(sp)
   41b68:	d8002785 	stb	zero,158(sp)
   41b6c:	003fec06 	br	41b20 <__alt_data_end+0xfffcfb20>
   41b70:	01400174 	movhi	r5,5
   41b74:	297fc904 	addi	r5,r5,-220
   41b78:	d9403915 	stw	r5,228(sp)
   41b7c:	d8c02d15 	stw	r3,180(sp)
   41b80:	1025883a 	mov	r18,r2
   41b84:	04401e04 	movi	r17,120
   41b88:	9d84b03a 	or	r2,r19,r22
   41b8c:	1000fc1e 	bne	r2,zero,41f80 <___vfprintf_internal_r+0x11d0>
   41b90:	0039883a 	mov	fp,zero
   41b94:	00800084 	movi	r2,2
   41b98:	10803fcc 	andi	r2,r2,255
   41b9c:	00c00044 	movi	r3,1
   41ba0:	10c20f26 	beq	r2,r3,423e0 <___vfprintf_internal_r+0x1630>
   41ba4:	00c00084 	movi	r3,2
   41ba8:	10fd6326 	beq	r2,r3,41138 <__alt_data_end+0xfffcf138>
   41bac:	003e2d06 	br	41464 <__alt_data_end+0xfffcf464>
   41bb0:	d8c02017 	ldw	r3,128(sp)
   41bb4:	003e9306 	br	41604 <__alt_data_end+0xfffcf604>
   41bb8:	00801944 	movi	r2,101
   41bbc:	14407e0e 	bge	r2,r17,41db8 <___vfprintf_internal_r+0x1008>
   41bc0:	d9003617 	ldw	r4,216(sp)
   41bc4:	d9403817 	ldw	r5,224(sp)
   41bc8:	000d883a 	mov	r6,zero
   41bcc:	000f883a 	mov	r7,zero
   41bd0:	d8c03c15 	stw	r3,240(sp)
   41bd4:	da003d15 	stw	r8,244(sp)
   41bd8:	004c1a40 	call	4c1a4 <__eqdf2>
   41bdc:	d8c03c17 	ldw	r3,240(sp)
   41be0:	da003d17 	ldw	r8,244(sp)
   41be4:	1000f71e 	bne	r2,zero,41fc4 <___vfprintf_internal_r+0x1214>
   41be8:	d8801f17 	ldw	r2,124(sp)
   41bec:	01000174 	movhi	r4,5
   41bf0:	213fd004 	addi	r4,r4,-192
   41bf4:	18c00044 	addi	r3,r3,1
   41bf8:	10800044 	addi	r2,r2,1
   41bfc:	41000015 	stw	r4,0(r8)
   41c00:	01000044 	movi	r4,1
   41c04:	41000115 	stw	r4,4(r8)
   41c08:	d8c02015 	stw	r3,128(sp)
   41c0c:	d8801f15 	stw	r2,124(sp)
   41c10:	010001c4 	movi	r4,7
   41c14:	2082b816 	blt	r4,r2,426f8 <___vfprintf_internal_r+0x1948>
   41c18:	42000204 	addi	r8,r8,8
   41c1c:	d8802617 	ldw	r2,152(sp)
   41c20:	d9403317 	ldw	r5,204(sp)
   41c24:	11400216 	blt	r2,r5,41c30 <___vfprintf_internal_r+0xe80>
   41c28:	9080004c 	andi	r2,r18,1
   41c2c:	103ed526 	beq	r2,zero,41784 <__alt_data_end+0xfffcf784>
   41c30:	d8803717 	ldw	r2,220(sp)
   41c34:	d9003417 	ldw	r4,208(sp)
   41c38:	d9403717 	ldw	r5,220(sp)
   41c3c:	1887883a 	add	r3,r3,r2
   41c40:	d8801f17 	ldw	r2,124(sp)
   41c44:	41000015 	stw	r4,0(r8)
   41c48:	41400115 	stw	r5,4(r8)
   41c4c:	10800044 	addi	r2,r2,1
   41c50:	d8c02015 	stw	r3,128(sp)
   41c54:	d8801f15 	stw	r2,124(sp)
   41c58:	010001c4 	movi	r4,7
   41c5c:	20832916 	blt	r4,r2,42904 <___vfprintf_internal_r+0x1b54>
   41c60:	42000204 	addi	r8,r8,8
   41c64:	d8803317 	ldw	r2,204(sp)
   41c68:	143fffc4 	addi	r16,r2,-1
   41c6c:	043ec50e 	bge	zero,r16,41784 <__alt_data_end+0xfffcf784>
   41c70:	04400404 	movi	r17,16
   41c74:	d8801f17 	ldw	r2,124(sp)
   41c78:	8c00880e 	bge	r17,r16,41e9c <___vfprintf_internal_r+0x10ec>
   41c7c:	01400174 	movhi	r5,5
   41c80:	297fd084 	addi	r5,r5,-190
   41c84:	d9402b15 	stw	r5,172(sp)
   41c88:	058001c4 	movi	r22,7
   41c8c:	dcc02c17 	ldw	r19,176(sp)
   41c90:	00000306 	br	41ca0 <___vfprintf_internal_r+0xef0>
   41c94:	42000204 	addi	r8,r8,8
   41c98:	843ffc04 	addi	r16,r16,-16
   41c9c:	8c00820e 	bge	r17,r16,41ea8 <___vfprintf_internal_r+0x10f8>
   41ca0:	18c00404 	addi	r3,r3,16
   41ca4:	10800044 	addi	r2,r2,1
   41ca8:	45000015 	stw	r20,0(r8)
   41cac:	44400115 	stw	r17,4(r8)
   41cb0:	d8c02015 	stw	r3,128(sp)
   41cb4:	d8801f15 	stw	r2,124(sp)
   41cb8:	b0bff60e 	bge	r22,r2,41c94 <__alt_data_end+0xfffcfc94>
   41cbc:	d9801e04 	addi	r6,sp,120
   41cc0:	b80b883a 	mov	r5,r23
   41cc4:	9809883a 	mov	r4,r19
   41cc8:	004852c0 	call	4852c <__sprint_r>
   41ccc:	103d3a1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41cd0:	d8c02017 	ldw	r3,128(sp)
   41cd4:	d8801f17 	ldw	r2,124(sp)
   41cd8:	da000404 	addi	r8,sp,16
   41cdc:	003fee06 	br	41c98 <__alt_data_end+0xfffcfc98>
   41ce0:	d9403117 	ldw	r5,196(sp)
   41ce4:	d8802a17 	ldw	r2,168(sp)
   41ce8:	28adc83a 	sub	r22,r5,r2
   41cec:	05be630e 	bge	zero,r22,4167c <__alt_data_end+0xfffcf67c>
   41cf0:	07000404 	movi	fp,16
   41cf4:	d8801f17 	ldw	r2,124(sp)
   41cf8:	e5838f0e 	bge	fp,r22,42b38 <___vfprintf_internal_r+0x1d88>
   41cfc:	01400174 	movhi	r5,5
   41d00:	297fd084 	addi	r5,r5,-190
   41d04:	dc403015 	stw	r17,192(sp)
   41d08:	d9402b15 	stw	r5,172(sp)
   41d0c:	b023883a 	mov	r17,r22
   41d10:	04c001c4 	movi	r19,7
   41d14:	a82d883a 	mov	r22,r21
   41d18:	902b883a 	mov	r21,r18
   41d1c:	8025883a 	mov	r18,r16
   41d20:	dc002c17 	ldw	r16,176(sp)
   41d24:	00000306 	br	41d34 <___vfprintf_internal_r+0xf84>
   41d28:	8c7ffc04 	addi	r17,r17,-16
   41d2c:	42000204 	addi	r8,r8,8
   41d30:	e440110e 	bge	fp,r17,41d78 <___vfprintf_internal_r+0xfc8>
   41d34:	18c00404 	addi	r3,r3,16
   41d38:	10800044 	addi	r2,r2,1
   41d3c:	45000015 	stw	r20,0(r8)
   41d40:	47000115 	stw	fp,4(r8)
   41d44:	d8c02015 	stw	r3,128(sp)
   41d48:	d8801f15 	stw	r2,124(sp)
   41d4c:	98bff60e 	bge	r19,r2,41d28 <__alt_data_end+0xfffcfd28>
   41d50:	d9801e04 	addi	r6,sp,120
   41d54:	b80b883a 	mov	r5,r23
   41d58:	8009883a 	mov	r4,r16
   41d5c:	004852c0 	call	4852c <__sprint_r>
   41d60:	103d151e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41d64:	8c7ffc04 	addi	r17,r17,-16
   41d68:	d8c02017 	ldw	r3,128(sp)
   41d6c:	d8801f17 	ldw	r2,124(sp)
   41d70:	da000404 	addi	r8,sp,16
   41d74:	e47fef16 	blt	fp,r17,41d34 <__alt_data_end+0xfffcfd34>
   41d78:	9021883a 	mov	r16,r18
   41d7c:	a825883a 	mov	r18,r21
   41d80:	b02b883a 	mov	r21,r22
   41d84:	882d883a 	mov	r22,r17
   41d88:	dc403017 	ldw	r17,192(sp)
   41d8c:	d9002b17 	ldw	r4,172(sp)
   41d90:	1d87883a 	add	r3,r3,r22
   41d94:	10800044 	addi	r2,r2,1
   41d98:	41000015 	stw	r4,0(r8)
   41d9c:	45800115 	stw	r22,4(r8)
   41da0:	d8c02015 	stw	r3,128(sp)
   41da4:	d8801f15 	stw	r2,124(sp)
   41da8:	010001c4 	movi	r4,7
   41dac:	20818e16 	blt	r4,r2,423e8 <___vfprintf_internal_r+0x1638>
   41db0:	42000204 	addi	r8,r8,8
   41db4:	003e3106 	br	4167c <__alt_data_end+0xfffcf67c>
   41db8:	d9403317 	ldw	r5,204(sp)
   41dbc:	00800044 	movi	r2,1
   41dc0:	18c00044 	addi	r3,r3,1
   41dc4:	1141530e 	bge	r2,r5,42314 <___vfprintf_internal_r+0x1564>
   41dc8:	dc401f17 	ldw	r17,124(sp)
   41dcc:	00800044 	movi	r2,1
   41dd0:	40800115 	stw	r2,4(r8)
   41dd4:	8c400044 	addi	r17,r17,1
   41dd8:	44000015 	stw	r16,0(r8)
   41ddc:	d8c02015 	stw	r3,128(sp)
   41de0:	dc401f15 	stw	r17,124(sp)
   41de4:	008001c4 	movi	r2,7
   41de8:	14416b16 	blt	r2,r17,42398 <___vfprintf_internal_r+0x15e8>
   41dec:	42000204 	addi	r8,r8,8
   41df0:	d8803717 	ldw	r2,220(sp)
   41df4:	d9003417 	ldw	r4,208(sp)
   41df8:	8c400044 	addi	r17,r17,1
   41dfc:	10c7883a 	add	r3,r2,r3
   41e00:	40800115 	stw	r2,4(r8)
   41e04:	41000015 	stw	r4,0(r8)
   41e08:	d8c02015 	stw	r3,128(sp)
   41e0c:	dc401f15 	stw	r17,124(sp)
   41e10:	008001c4 	movi	r2,7
   41e14:	14416916 	blt	r2,r17,423bc <___vfprintf_internal_r+0x160c>
   41e18:	45800204 	addi	r22,r8,8
   41e1c:	d9003617 	ldw	r4,216(sp)
   41e20:	d9403817 	ldw	r5,224(sp)
   41e24:	000d883a 	mov	r6,zero
   41e28:	000f883a 	mov	r7,zero
   41e2c:	d8c03c15 	stw	r3,240(sp)
   41e30:	004c1a40 	call	4c1a4 <__eqdf2>
   41e34:	d8c03c17 	ldw	r3,240(sp)
   41e38:	1000bc26 	beq	r2,zero,4212c <___vfprintf_internal_r+0x137c>
   41e3c:	d9403317 	ldw	r5,204(sp)
   41e40:	84000044 	addi	r16,r16,1
   41e44:	8c400044 	addi	r17,r17,1
   41e48:	28bfffc4 	addi	r2,r5,-1
   41e4c:	1887883a 	add	r3,r3,r2
   41e50:	b0800115 	stw	r2,4(r22)
   41e54:	b4000015 	stw	r16,0(r22)
   41e58:	d8c02015 	stw	r3,128(sp)
   41e5c:	dc401f15 	stw	r17,124(sp)
   41e60:	008001c4 	movi	r2,7
   41e64:	14414316 	blt	r2,r17,42374 <___vfprintf_internal_r+0x15c4>
   41e68:	b5800204 	addi	r22,r22,8
   41e6c:	d9003a17 	ldw	r4,232(sp)
   41e70:	df0022c4 	addi	fp,sp,139
   41e74:	8c400044 	addi	r17,r17,1
   41e78:	20c7883a 	add	r3,r4,r3
   41e7c:	b7000015 	stw	fp,0(r22)
   41e80:	b1000115 	stw	r4,4(r22)
   41e84:	d8c02015 	stw	r3,128(sp)
   41e88:	dc401f15 	stw	r17,124(sp)
   41e8c:	008001c4 	movi	r2,7
   41e90:	14400e16 	blt	r2,r17,41ecc <___vfprintf_internal_r+0x111c>
   41e94:	b2000204 	addi	r8,r22,8
   41e98:	003e3a06 	br	41784 <__alt_data_end+0xfffcf784>
   41e9c:	01000174 	movhi	r4,5
   41ea0:	213fd084 	addi	r4,r4,-190
   41ea4:	d9002b15 	stw	r4,172(sp)
   41ea8:	d9002b17 	ldw	r4,172(sp)
   41eac:	1c07883a 	add	r3,r3,r16
   41eb0:	44000115 	stw	r16,4(r8)
   41eb4:	41000015 	stw	r4,0(r8)
   41eb8:	10800044 	addi	r2,r2,1
   41ebc:	d8c02015 	stw	r3,128(sp)
   41ec0:	d8801f15 	stw	r2,124(sp)
   41ec4:	010001c4 	movi	r4,7
   41ec8:	20be2d0e 	bge	r4,r2,41780 <__alt_data_end+0xfffcf780>
   41ecc:	d9002c17 	ldw	r4,176(sp)
   41ed0:	d9801e04 	addi	r6,sp,120
   41ed4:	b80b883a 	mov	r5,r23
   41ed8:	004852c0 	call	4852c <__sprint_r>
   41edc:	103cb61e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41ee0:	d8c02017 	ldw	r3,128(sp)
   41ee4:	da000404 	addi	r8,sp,16
   41ee8:	003e2606 	br	41784 <__alt_data_end+0xfffcf784>
   41eec:	d9002c17 	ldw	r4,176(sp)
   41ef0:	d9801e04 	addi	r6,sp,120
   41ef4:	b80b883a 	mov	r5,r23
   41ef8:	004852c0 	call	4852c <__sprint_r>
   41efc:	103e5d26 	beq	r2,zero,41874 <__alt_data_end+0xfffcf874>
   41f00:	003cad06 	br	411b8 <__alt_data_end+0xfffcf1b8>
   41f04:	d9002c17 	ldw	r4,176(sp)
   41f08:	d9801e04 	addi	r6,sp,120
   41f0c:	b80b883a 	mov	r5,r23
   41f10:	004852c0 	call	4852c <__sprint_r>
   41f14:	103ca81e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41f18:	d8c02017 	ldw	r3,128(sp)
   41f1c:	da000404 	addi	r8,sp,16
   41f20:	003e0b06 	br	41750 <__alt_data_end+0xfffcf750>
   41f24:	d9002c17 	ldw	r4,176(sp)
   41f28:	d9801e04 	addi	r6,sp,120
   41f2c:	b80b883a 	mov	r5,r23
   41f30:	004852c0 	call	4852c <__sprint_r>
   41f34:	103ca01e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41f38:	d8c02017 	ldw	r3,128(sp)
   41f3c:	da000404 	addi	r8,sp,16
   41f40:	003dbd06 	br	41638 <__alt_data_end+0xfffcf638>
   41f44:	d9002c17 	ldw	r4,176(sp)
   41f48:	d9801e04 	addi	r6,sp,120
   41f4c:	b80b883a 	mov	r5,r23
   41f50:	004852c0 	call	4852c <__sprint_r>
   41f54:	103c981e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   41f58:	d8c02017 	ldw	r3,128(sp)
   41f5c:	da000404 	addi	r8,sp,16
   41f60:	003dc306 	br	41670 <__alt_data_end+0xfffcf670>
   41f64:	d8802917 	ldw	r2,164(sp)
   41f68:	d8002785 	stb	zero,158(sp)
   41f6c:	103f0616 	blt	r2,zero,41b88 <__alt_data_end+0xfffcfb88>
   41f70:	00ffdfc4 	movi	r3,-129
   41f74:	9d84b03a 	or	r2,r19,r22
   41f78:	90e4703a 	and	r18,r18,r3
   41f7c:	103c6b26 	beq	r2,zero,4112c <__alt_data_end+0xfffcf12c>
   41f80:	0039883a 	mov	fp,zero
   41f84:	003e7406 	br	41958 <__alt_data_end+0xfffcf958>
   41f88:	9080040c 	andi	r2,r18,16
   41f8c:	1001b326 	beq	r2,zero,4265c <___vfprintf_internal_r+0x18ac>
   41f90:	d9002d17 	ldw	r4,180(sp)
   41f94:	d9402917 	ldw	r5,164(sp)
   41f98:	d8002785 	stb	zero,158(sp)
   41f9c:	20800104 	addi	r2,r4,4
   41fa0:	24c00017 	ldw	r19,0(r4)
   41fa4:	002d883a 	mov	r22,zero
   41fa8:	2801b516 	blt	r5,zero,42680 <___vfprintf_internal_r+0x18d0>
   41fac:	00ffdfc4 	movi	r3,-129
   41fb0:	d8802d15 	stw	r2,180(sp)
   41fb4:	90e4703a 	and	r18,r18,r3
   41fb8:	983d2726 	beq	r19,zero,41458 <__alt_data_end+0xfffcf458>
   41fbc:	0039883a 	mov	fp,zero
   41fc0:	003d2a06 	br	4146c <__alt_data_end+0xfffcf46c>
   41fc4:	dc402617 	ldw	r17,152(sp)
   41fc8:	0441d30e 	bge	zero,r17,42718 <___vfprintf_internal_r+0x1968>
   41fcc:	dc403217 	ldw	r17,200(sp)
   41fd0:	d8803317 	ldw	r2,204(sp)
   41fd4:	1440010e 	bge	r2,r17,41fdc <___vfprintf_internal_r+0x122c>
   41fd8:	1023883a 	mov	r17,r2
   41fdc:	04400a0e 	bge	zero,r17,42008 <___vfprintf_internal_r+0x1258>
   41fe0:	d8801f17 	ldw	r2,124(sp)
   41fe4:	1c47883a 	add	r3,r3,r17
   41fe8:	44000015 	stw	r16,0(r8)
   41fec:	10800044 	addi	r2,r2,1
   41ff0:	44400115 	stw	r17,4(r8)
   41ff4:	d8c02015 	stw	r3,128(sp)
   41ff8:	d8801f15 	stw	r2,124(sp)
   41ffc:	010001c4 	movi	r4,7
   42000:	20826516 	blt	r4,r2,42998 <___vfprintf_internal_r+0x1be8>
   42004:	42000204 	addi	r8,r8,8
   42008:	88026116 	blt	r17,zero,42990 <___vfprintf_internal_r+0x1be0>
   4200c:	d9003217 	ldw	r4,200(sp)
   42010:	2463c83a 	sub	r17,r4,r17
   42014:	04407b0e 	bge	zero,r17,42204 <___vfprintf_internal_r+0x1454>
   42018:	05800404 	movi	r22,16
   4201c:	d8801f17 	ldw	r2,124(sp)
   42020:	b4419d0e 	bge	r22,r17,42698 <___vfprintf_internal_r+0x18e8>
   42024:	01000174 	movhi	r4,5
   42028:	213fd084 	addi	r4,r4,-190
   4202c:	d9002b15 	stw	r4,172(sp)
   42030:	070001c4 	movi	fp,7
   42034:	dcc02c17 	ldw	r19,176(sp)
   42038:	00000306 	br	42048 <___vfprintf_internal_r+0x1298>
   4203c:	42000204 	addi	r8,r8,8
   42040:	8c7ffc04 	addi	r17,r17,-16
   42044:	b441970e 	bge	r22,r17,426a4 <___vfprintf_internal_r+0x18f4>
   42048:	18c00404 	addi	r3,r3,16
   4204c:	10800044 	addi	r2,r2,1
   42050:	45000015 	stw	r20,0(r8)
   42054:	45800115 	stw	r22,4(r8)
   42058:	d8c02015 	stw	r3,128(sp)
   4205c:	d8801f15 	stw	r2,124(sp)
   42060:	e0bff60e 	bge	fp,r2,4203c <__alt_data_end+0xfffd003c>
   42064:	d9801e04 	addi	r6,sp,120
   42068:	b80b883a 	mov	r5,r23
   4206c:	9809883a 	mov	r4,r19
   42070:	004852c0 	call	4852c <__sprint_r>
   42074:	103c501e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42078:	d8c02017 	ldw	r3,128(sp)
   4207c:	d8801f17 	ldw	r2,124(sp)
   42080:	da000404 	addi	r8,sp,16
   42084:	003fee06 	br	42040 <__alt_data_end+0xfffd0040>
   42088:	d9002c17 	ldw	r4,176(sp)
   4208c:	d9801e04 	addi	r6,sp,120
   42090:	b80b883a 	mov	r5,r23
   42094:	004852c0 	call	4852c <__sprint_r>
   42098:	103c471e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   4209c:	d8c02017 	ldw	r3,128(sp)
   420a0:	df002787 	ldb	fp,158(sp)
   420a4:	da000404 	addi	r8,sp,16
   420a8:	003d5606 	br	41604 <__alt_data_end+0xfffcf604>
   420ac:	9080040c 	andi	r2,r18,16
   420b0:	10016126 	beq	r2,zero,42638 <___vfprintf_internal_r+0x1888>
   420b4:	d8802d17 	ldw	r2,180(sp)
   420b8:	14c00017 	ldw	r19,0(r2)
   420bc:	10800104 	addi	r2,r2,4
   420c0:	d8802d15 	stw	r2,180(sp)
   420c4:	982dd7fa 	srai	r22,r19,31
   420c8:	b005883a 	mov	r2,r22
   420cc:	003c8206 	br	412d8 <__alt_data_end+0xfffcf2d8>
   420d0:	9080040c 	andi	r2,r18,16
   420d4:	10003526 	beq	r2,zero,421ac <___vfprintf_internal_r+0x13fc>
   420d8:	d9402d17 	ldw	r5,180(sp)
   420dc:	d8c02917 	ldw	r3,164(sp)
   420e0:	d8002785 	stb	zero,158(sp)
   420e4:	28800104 	addi	r2,r5,4
   420e8:	2cc00017 	ldw	r19,0(r5)
   420ec:	002d883a 	mov	r22,zero
   420f0:	18003716 	blt	r3,zero,421d0 <___vfprintf_internal_r+0x1420>
   420f4:	00ffdfc4 	movi	r3,-129
   420f8:	d8802d15 	stw	r2,180(sp)
   420fc:	90e4703a 	and	r18,r18,r3
   42100:	0039883a 	mov	fp,zero
   42104:	983df326 	beq	r19,zero,418d4 <__alt_data_end+0xfffcf8d4>
   42108:	00800244 	movi	r2,9
   4210c:	14fc7b36 	bltu	r2,r19,412fc <__alt_data_end+0xfffcf2fc>
   42110:	d8c02817 	ldw	r3,160(sp)
   42114:	dc001dc4 	addi	r16,sp,119
   42118:	9cc00c04 	addi	r19,r19,48
   4211c:	1c07c83a 	sub	r3,r3,r16
   42120:	dcc01dc5 	stb	r19,119(sp)
   42124:	d8c02e15 	stw	r3,184(sp)
   42128:	003ce806 	br	414cc <__alt_data_end+0xfffcf4cc>
   4212c:	d8803317 	ldw	r2,204(sp)
   42130:	143fffc4 	addi	r16,r2,-1
   42134:	043f4d0e 	bge	zero,r16,41e6c <__alt_data_end+0xfffcfe6c>
   42138:	07000404 	movi	fp,16
   4213c:	e400810e 	bge	fp,r16,42344 <___vfprintf_internal_r+0x1594>
   42140:	01400174 	movhi	r5,5
   42144:	297fd084 	addi	r5,r5,-190
   42148:	d9402b15 	stw	r5,172(sp)
   4214c:	01c001c4 	movi	r7,7
   42150:	dcc02c17 	ldw	r19,176(sp)
   42154:	00000306 	br	42164 <___vfprintf_internal_r+0x13b4>
   42158:	b5800204 	addi	r22,r22,8
   4215c:	843ffc04 	addi	r16,r16,-16
   42160:	e4007b0e 	bge	fp,r16,42350 <___vfprintf_internal_r+0x15a0>
   42164:	18c00404 	addi	r3,r3,16
   42168:	8c400044 	addi	r17,r17,1
   4216c:	b5000015 	stw	r20,0(r22)
   42170:	b7000115 	stw	fp,4(r22)
   42174:	d8c02015 	stw	r3,128(sp)
   42178:	dc401f15 	stw	r17,124(sp)
   4217c:	3c7ff60e 	bge	r7,r17,42158 <__alt_data_end+0xfffd0158>
   42180:	d9801e04 	addi	r6,sp,120
   42184:	b80b883a 	mov	r5,r23
   42188:	9809883a 	mov	r4,r19
   4218c:	d9c03c15 	stw	r7,240(sp)
   42190:	004852c0 	call	4852c <__sprint_r>
   42194:	d9c03c17 	ldw	r7,240(sp)
   42198:	103c071e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   4219c:	d8c02017 	ldw	r3,128(sp)
   421a0:	dc401f17 	ldw	r17,124(sp)
   421a4:	dd800404 	addi	r22,sp,16
   421a8:	003fec06 	br	4215c <__alt_data_end+0xfffd015c>
   421ac:	9080100c 	andi	r2,r18,64
   421b0:	d8002785 	stb	zero,158(sp)
   421b4:	10010e26 	beq	r2,zero,425f0 <___vfprintf_internal_r+0x1840>
   421b8:	d9002d17 	ldw	r4,180(sp)
   421bc:	d9402917 	ldw	r5,164(sp)
   421c0:	002d883a 	mov	r22,zero
   421c4:	20800104 	addi	r2,r4,4
   421c8:	24c0000b 	ldhu	r19,0(r4)
   421cc:	283fc90e 	bge	r5,zero,420f4 <__alt_data_end+0xfffd00f4>
   421d0:	d8802d15 	stw	r2,180(sp)
   421d4:	0039883a 	mov	fp,zero
   421d8:	9d84b03a 	or	r2,r19,r22
   421dc:	103c461e 	bne	r2,zero,412f8 <__alt_data_end+0xfffcf2f8>
   421e0:	00800044 	movi	r2,1
   421e4:	003e6c06 	br	41b98 <__alt_data_end+0xfffcfb98>
   421e8:	d9002c17 	ldw	r4,176(sp)
   421ec:	d9801e04 	addi	r6,sp,120
   421f0:	b80b883a 	mov	r5,r23
   421f4:	004852c0 	call	4852c <__sprint_r>
   421f8:	103bef1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   421fc:	d8c02017 	ldw	r3,128(sp)
   42200:	da000404 	addi	r8,sp,16
   42204:	d9003217 	ldw	r4,200(sp)
   42208:	d8802617 	ldw	r2,152(sp)
   4220c:	d9403317 	ldw	r5,204(sp)
   42210:	8123883a 	add	r17,r16,r4
   42214:	11400216 	blt	r2,r5,42220 <___vfprintf_internal_r+0x1470>
   42218:	9100004c 	andi	r4,r18,1
   4221c:	20000d26 	beq	r4,zero,42254 <___vfprintf_internal_r+0x14a4>
   42220:	d9003717 	ldw	r4,220(sp)
   42224:	d9403417 	ldw	r5,208(sp)
   42228:	1907883a 	add	r3,r3,r4
   4222c:	d9001f17 	ldw	r4,124(sp)
   42230:	41400015 	stw	r5,0(r8)
   42234:	d9403717 	ldw	r5,220(sp)
   42238:	21000044 	addi	r4,r4,1
   4223c:	d8c02015 	stw	r3,128(sp)
   42240:	41400115 	stw	r5,4(r8)
   42244:	d9001f15 	stw	r4,124(sp)
   42248:	014001c4 	movi	r5,7
   4224c:	2901e816 	blt	r5,r4,429f0 <___vfprintf_internal_r+0x1c40>
   42250:	42000204 	addi	r8,r8,8
   42254:	d9003317 	ldw	r4,204(sp)
   42258:	8121883a 	add	r16,r16,r4
   4225c:	2085c83a 	sub	r2,r4,r2
   42260:	8461c83a 	sub	r16,r16,r17
   42264:	1400010e 	bge	r2,r16,4226c <___vfprintf_internal_r+0x14bc>
   42268:	1021883a 	mov	r16,r2
   4226c:	04000a0e 	bge	zero,r16,42298 <___vfprintf_internal_r+0x14e8>
   42270:	d9001f17 	ldw	r4,124(sp)
   42274:	1c07883a 	add	r3,r3,r16
   42278:	44400015 	stw	r17,0(r8)
   4227c:	21000044 	addi	r4,r4,1
   42280:	44000115 	stw	r16,4(r8)
   42284:	d8c02015 	stw	r3,128(sp)
   42288:	d9001f15 	stw	r4,124(sp)
   4228c:	014001c4 	movi	r5,7
   42290:	2901fb16 	blt	r5,r4,42a80 <___vfprintf_internal_r+0x1cd0>
   42294:	42000204 	addi	r8,r8,8
   42298:	8001f716 	blt	r16,zero,42a78 <___vfprintf_internal_r+0x1cc8>
   4229c:	1421c83a 	sub	r16,r2,r16
   422a0:	043d380e 	bge	zero,r16,41784 <__alt_data_end+0xfffcf784>
   422a4:	04400404 	movi	r17,16
   422a8:	d8801f17 	ldw	r2,124(sp)
   422ac:	8c3efb0e 	bge	r17,r16,41e9c <__alt_data_end+0xfffcfe9c>
   422b0:	01400174 	movhi	r5,5
   422b4:	297fd084 	addi	r5,r5,-190
   422b8:	d9402b15 	stw	r5,172(sp)
   422bc:	058001c4 	movi	r22,7
   422c0:	dcc02c17 	ldw	r19,176(sp)
   422c4:	00000306 	br	422d4 <___vfprintf_internal_r+0x1524>
   422c8:	42000204 	addi	r8,r8,8
   422cc:	843ffc04 	addi	r16,r16,-16
   422d0:	8c3ef50e 	bge	r17,r16,41ea8 <__alt_data_end+0xfffcfea8>
   422d4:	18c00404 	addi	r3,r3,16
   422d8:	10800044 	addi	r2,r2,1
   422dc:	45000015 	stw	r20,0(r8)
   422e0:	44400115 	stw	r17,4(r8)
   422e4:	d8c02015 	stw	r3,128(sp)
   422e8:	d8801f15 	stw	r2,124(sp)
   422ec:	b0bff60e 	bge	r22,r2,422c8 <__alt_data_end+0xfffd02c8>
   422f0:	d9801e04 	addi	r6,sp,120
   422f4:	b80b883a 	mov	r5,r23
   422f8:	9809883a 	mov	r4,r19
   422fc:	004852c0 	call	4852c <__sprint_r>
   42300:	103bad1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42304:	d8c02017 	ldw	r3,128(sp)
   42308:	d8801f17 	ldw	r2,124(sp)
   4230c:	da000404 	addi	r8,sp,16
   42310:	003fee06 	br	422cc <__alt_data_end+0xfffd02cc>
   42314:	9088703a 	and	r4,r18,r2
   42318:	203eab1e 	bne	r4,zero,41dc8 <__alt_data_end+0xfffcfdc8>
   4231c:	dc401f17 	ldw	r17,124(sp)
   42320:	40800115 	stw	r2,4(r8)
   42324:	44000015 	stw	r16,0(r8)
   42328:	8c400044 	addi	r17,r17,1
   4232c:	d8c02015 	stw	r3,128(sp)
   42330:	dc401f15 	stw	r17,124(sp)
   42334:	008001c4 	movi	r2,7
   42338:	14400e16 	blt	r2,r17,42374 <___vfprintf_internal_r+0x15c4>
   4233c:	45800204 	addi	r22,r8,8
   42340:	003eca06 	br	41e6c <__alt_data_end+0xfffcfe6c>
   42344:	01000174 	movhi	r4,5
   42348:	213fd084 	addi	r4,r4,-190
   4234c:	d9002b15 	stw	r4,172(sp)
   42350:	d8802b17 	ldw	r2,172(sp)
   42354:	1c07883a 	add	r3,r3,r16
   42358:	8c400044 	addi	r17,r17,1
   4235c:	b0800015 	stw	r2,0(r22)
   42360:	b4000115 	stw	r16,4(r22)
   42364:	d8c02015 	stw	r3,128(sp)
   42368:	dc401f15 	stw	r17,124(sp)
   4236c:	008001c4 	movi	r2,7
   42370:	147ebd0e 	bge	r2,r17,41e68 <__alt_data_end+0xfffcfe68>
   42374:	d9002c17 	ldw	r4,176(sp)
   42378:	d9801e04 	addi	r6,sp,120
   4237c:	b80b883a 	mov	r5,r23
   42380:	004852c0 	call	4852c <__sprint_r>
   42384:	103b8c1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42388:	d8c02017 	ldw	r3,128(sp)
   4238c:	dc401f17 	ldw	r17,124(sp)
   42390:	dd800404 	addi	r22,sp,16
   42394:	003eb506 	br	41e6c <__alt_data_end+0xfffcfe6c>
   42398:	d9002c17 	ldw	r4,176(sp)
   4239c:	d9801e04 	addi	r6,sp,120
   423a0:	b80b883a 	mov	r5,r23
   423a4:	004852c0 	call	4852c <__sprint_r>
   423a8:	103b831e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   423ac:	d8c02017 	ldw	r3,128(sp)
   423b0:	dc401f17 	ldw	r17,124(sp)
   423b4:	da000404 	addi	r8,sp,16
   423b8:	003e8d06 	br	41df0 <__alt_data_end+0xfffcfdf0>
   423bc:	d9002c17 	ldw	r4,176(sp)
   423c0:	d9801e04 	addi	r6,sp,120
   423c4:	b80b883a 	mov	r5,r23
   423c8:	004852c0 	call	4852c <__sprint_r>
   423cc:	103b7a1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   423d0:	d8c02017 	ldw	r3,128(sp)
   423d4:	dc401f17 	ldw	r17,124(sp)
   423d8:	dd800404 	addi	r22,sp,16
   423dc:	003e8f06 	br	41e1c <__alt_data_end+0xfffcfe1c>
   423e0:	0027883a 	mov	r19,zero
   423e4:	003f4a06 	br	42110 <__alt_data_end+0xfffd0110>
   423e8:	d9002c17 	ldw	r4,176(sp)
   423ec:	d9801e04 	addi	r6,sp,120
   423f0:	b80b883a 	mov	r5,r23
   423f4:	004852c0 	call	4852c <__sprint_r>
   423f8:	103b6f1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   423fc:	d8c02017 	ldw	r3,128(sp)
   42400:	da000404 	addi	r8,sp,16
   42404:	003c9d06 	br	4167c <__alt_data_end+0xfffcf67c>
   42408:	04e7c83a 	sub	r19,zero,r19
   4240c:	9804c03a 	cmpne	r2,r19,zero
   42410:	05adc83a 	sub	r22,zero,r22
   42414:	b0adc83a 	sub	r22,r22,r2
   42418:	d8802917 	ldw	r2,164(sp)
   4241c:	07000b44 	movi	fp,45
   42420:	df002785 	stb	fp,158(sp)
   42424:	10017b16 	blt	r2,zero,42a14 <___vfprintf_internal_r+0x1c64>
   42428:	00bfdfc4 	movi	r2,-129
   4242c:	90a4703a 	and	r18,r18,r2
   42430:	003bb106 	br	412f8 <__alt_data_end+0xfffcf2f8>
   42434:	d9003617 	ldw	r4,216(sp)
   42438:	d9403817 	ldw	r5,224(sp)
   4243c:	da003d15 	stw	r8,244(sp)
   42440:	00481500 	call	48150 <__fpclassifyd>
   42444:	da003d17 	ldw	r8,244(sp)
   42448:	1000f026 	beq	r2,zero,4280c <___vfprintf_internal_r+0x1a5c>
   4244c:	d9002917 	ldw	r4,164(sp)
   42450:	05bff7c4 	movi	r22,-33
   42454:	00bfffc4 	movi	r2,-1
   42458:	8dac703a 	and	r22,r17,r22
   4245c:	20820026 	beq	r4,r2,42c60 <___vfprintf_internal_r+0x1eb0>
   42460:	008011c4 	movi	r2,71
   42464:	b081f726 	beq	r22,r2,42c44 <___vfprintf_internal_r+0x1e94>
   42468:	d9003817 	ldw	r4,224(sp)
   4246c:	90c04014 	ori	r3,r18,256
   42470:	d8c02b15 	stw	r3,172(sp)
   42474:	20021516 	blt	r4,zero,42ccc <___vfprintf_internal_r+0x1f1c>
   42478:	dcc03817 	ldw	r19,224(sp)
   4247c:	d8002a05 	stb	zero,168(sp)
   42480:	00801984 	movi	r2,102
   42484:	8881f926 	beq	r17,r2,42c6c <___vfprintf_internal_r+0x1ebc>
   42488:	00801184 	movi	r2,70
   4248c:	88821c26 	beq	r17,r2,42d00 <___vfprintf_internal_r+0x1f50>
   42490:	00801144 	movi	r2,69
   42494:	b081ef26 	beq	r22,r2,42c54 <___vfprintf_internal_r+0x1ea4>
   42498:	d8c02917 	ldw	r3,164(sp)
   4249c:	d8802104 	addi	r2,sp,132
   424a0:	d8800315 	stw	r2,12(sp)
   424a4:	d9403617 	ldw	r5,216(sp)
   424a8:	d8802504 	addi	r2,sp,148
   424ac:	d9002c17 	ldw	r4,176(sp)
   424b0:	d8800215 	stw	r2,8(sp)
   424b4:	d8802604 	addi	r2,sp,152
   424b8:	d8c00015 	stw	r3,0(sp)
   424bc:	d8800115 	stw	r2,4(sp)
   424c0:	01c00084 	movi	r7,2
   424c4:	980d883a 	mov	r6,r19
   424c8:	d8c03c15 	stw	r3,240(sp)
   424cc:	da003d15 	stw	r8,244(sp)
   424d0:	00435540 	call	43554 <_dtoa_r>
   424d4:	1021883a 	mov	r16,r2
   424d8:	008019c4 	movi	r2,103
   424dc:	d8c03c17 	ldw	r3,240(sp)
   424e0:	da003d17 	ldw	r8,244(sp)
   424e4:	88817126 	beq	r17,r2,42aac <___vfprintf_internal_r+0x1cfc>
   424e8:	008011c4 	movi	r2,71
   424ec:	88829226 	beq	r17,r2,42f38 <___vfprintf_internal_r+0x2188>
   424f0:	80f9883a 	add	fp,r16,r3
   424f4:	d9003617 	ldw	r4,216(sp)
   424f8:	000d883a 	mov	r6,zero
   424fc:	000f883a 	mov	r7,zero
   42500:	980b883a 	mov	r5,r19
   42504:	da003d15 	stw	r8,244(sp)
   42508:	004c1a40 	call	4c1a4 <__eqdf2>
   4250c:	da003d17 	ldw	r8,244(sp)
   42510:	10018d26 	beq	r2,zero,42b48 <___vfprintf_internal_r+0x1d98>
   42514:	d8802117 	ldw	r2,132(sp)
   42518:	1700062e 	bgeu	r2,fp,42534 <___vfprintf_internal_r+0x1784>
   4251c:	01000c04 	movi	r4,48
   42520:	10c00044 	addi	r3,r2,1
   42524:	d8c02115 	stw	r3,132(sp)
   42528:	11000005 	stb	r4,0(r2)
   4252c:	d8802117 	ldw	r2,132(sp)
   42530:	173ffb36 	bltu	r2,fp,42520 <__alt_data_end+0xfffd0520>
   42534:	1405c83a 	sub	r2,r2,r16
   42538:	d8803315 	stw	r2,204(sp)
   4253c:	008011c4 	movi	r2,71
   42540:	b0817626 	beq	r22,r2,42b1c <___vfprintf_internal_r+0x1d6c>
   42544:	00801944 	movi	r2,101
   42548:	1442810e 	bge	r2,r17,42f50 <___vfprintf_internal_r+0x21a0>
   4254c:	d8c02617 	ldw	r3,152(sp)
   42550:	00801984 	movi	r2,102
   42554:	d8c03215 	stw	r3,200(sp)
   42558:	8881fe26 	beq	r17,r2,42d54 <___vfprintf_internal_r+0x1fa4>
   4255c:	d8c03217 	ldw	r3,200(sp)
   42560:	d9003317 	ldw	r4,204(sp)
   42564:	1901dd16 	blt	r3,r4,42cdc <___vfprintf_internal_r+0x1f2c>
   42568:	9480004c 	andi	r18,r18,1
   4256c:	90022b1e 	bne	r18,zero,42e1c <___vfprintf_internal_r+0x206c>
   42570:	1805883a 	mov	r2,r3
   42574:	18028016 	blt	r3,zero,42f78 <___vfprintf_internal_r+0x21c8>
   42578:	d8c03217 	ldw	r3,200(sp)
   4257c:	044019c4 	movi	r17,103
   42580:	d8c02e15 	stw	r3,184(sp)
   42584:	df002a07 	ldb	fp,168(sp)
   42588:	e001531e 	bne	fp,zero,42ad8 <___vfprintf_internal_r+0x1d28>
   4258c:	df002783 	ldbu	fp,158(sp)
   42590:	d8802a15 	stw	r2,168(sp)
   42594:	dc802b17 	ldw	r18,172(sp)
   42598:	d8002915 	stw	zero,164(sp)
   4259c:	003bd106 	br	414e4 <__alt_data_end+0xfffcf4e4>
   425a0:	d8802d17 	ldw	r2,180(sp)
   425a4:	d8c02d17 	ldw	r3,180(sp)
   425a8:	d9002d17 	ldw	r4,180(sp)
   425ac:	10800017 	ldw	r2,0(r2)
   425b0:	18c00117 	ldw	r3,4(r3)
   425b4:	21000204 	addi	r4,r4,8
   425b8:	d8803615 	stw	r2,216(sp)
   425bc:	d8c03815 	stw	r3,224(sp)
   425c0:	d9002d15 	stw	r4,180(sp)
   425c4:	003b7506 	br	4139c <__alt_data_end+0xfffcf39c>
   425c8:	ac400007 	ldb	r17,0(r21)
   425cc:	003a5906 	br	40f34 <__alt_data_end+0xfffcef34>
   425d0:	9080100c 	andi	r2,r18,64
   425d4:	1000a826 	beq	r2,zero,42878 <___vfprintf_internal_r+0x1ac8>
   425d8:	d9002d17 	ldw	r4,180(sp)
   425dc:	002d883a 	mov	r22,zero
   425e0:	24c0000b 	ldhu	r19,0(r4)
   425e4:	21000104 	addi	r4,r4,4
   425e8:	d9002d15 	stw	r4,180(sp)
   425ec:	003ccb06 	br	4191c <__alt_data_end+0xfffcf91c>
   425f0:	d8c02d17 	ldw	r3,180(sp)
   425f4:	d9002917 	ldw	r4,164(sp)
   425f8:	002d883a 	mov	r22,zero
   425fc:	18800104 	addi	r2,r3,4
   42600:	1cc00017 	ldw	r19,0(r3)
   42604:	203ebb0e 	bge	r4,zero,420f4 <__alt_data_end+0xfffd00f4>
   42608:	003ef106 	br	421d0 <__alt_data_end+0xfffd01d0>
   4260c:	9080040c 	andi	r2,r18,16
   42610:	1000921e 	bne	r2,zero,4285c <___vfprintf_internal_r+0x1aac>
   42614:	9480100c 	andi	r18,r18,64
   42618:	90013926 	beq	r18,zero,42b00 <___vfprintf_internal_r+0x1d50>
   4261c:	d9002d17 	ldw	r4,180(sp)
   42620:	d9402f17 	ldw	r5,188(sp)
   42624:	20800017 	ldw	r2,0(r4)
   42628:	21000104 	addi	r4,r4,4
   4262c:	d9002d15 	stw	r4,180(sp)
   42630:	1140000d 	sth	r5,0(r2)
   42634:	003a1606 	br	40e90 <__alt_data_end+0xfffcee90>
   42638:	9080100c 	andi	r2,r18,64
   4263c:	10008026 	beq	r2,zero,42840 <___vfprintf_internal_r+0x1a90>
   42640:	d8c02d17 	ldw	r3,180(sp)
   42644:	1cc0000f 	ldh	r19,0(r3)
   42648:	18c00104 	addi	r3,r3,4
   4264c:	d8c02d15 	stw	r3,180(sp)
   42650:	982dd7fa 	srai	r22,r19,31
   42654:	b005883a 	mov	r2,r22
   42658:	003b1f06 	br	412d8 <__alt_data_end+0xfffcf2d8>
   4265c:	9080100c 	andi	r2,r18,64
   42660:	d8002785 	stb	zero,158(sp)
   42664:	10008a1e 	bne	r2,zero,42890 <___vfprintf_internal_r+0x1ae0>
   42668:	d9402d17 	ldw	r5,180(sp)
   4266c:	d8c02917 	ldw	r3,164(sp)
   42670:	002d883a 	mov	r22,zero
   42674:	28800104 	addi	r2,r5,4
   42678:	2cc00017 	ldw	r19,0(r5)
   4267c:	183e4b0e 	bge	r3,zero,41fac <__alt_data_end+0xfffcffac>
   42680:	9d86b03a 	or	r3,r19,r22
   42684:	d8802d15 	stw	r2,180(sp)
   42688:	183e4c1e 	bne	r3,zero,41fbc <__alt_data_end+0xfffcffbc>
   4268c:	0039883a 	mov	fp,zero
   42690:	0005883a 	mov	r2,zero
   42694:	003d4006 	br	41b98 <__alt_data_end+0xfffcfb98>
   42698:	01400174 	movhi	r5,5
   4269c:	297fd084 	addi	r5,r5,-190
   426a0:	d9402b15 	stw	r5,172(sp)
   426a4:	d9402b17 	ldw	r5,172(sp)
   426a8:	1c47883a 	add	r3,r3,r17
   426ac:	10800044 	addi	r2,r2,1
   426b0:	41400015 	stw	r5,0(r8)
   426b4:	44400115 	stw	r17,4(r8)
   426b8:	d8c02015 	stw	r3,128(sp)
   426bc:	d8801f15 	stw	r2,124(sp)
   426c0:	010001c4 	movi	r4,7
   426c4:	20bec816 	blt	r4,r2,421e8 <__alt_data_end+0xfffd01e8>
   426c8:	42000204 	addi	r8,r8,8
   426cc:	003ecd06 	br	42204 <__alt_data_end+0xfffd0204>
   426d0:	d9002917 	ldw	r4,164(sp)
   426d4:	d8002785 	stb	zero,158(sp)
   426d8:	203d2d16 	blt	r4,zero,41b90 <__alt_data_end+0xfffcfb90>
   426dc:	00bfdfc4 	movi	r2,-129
   426e0:	90a4703a 	and	r18,r18,r2
   426e4:	003a9106 	br	4112c <__alt_data_end+0xfffcf12c>
   426e8:	01000174 	movhi	r4,5
   426ec:	213fd084 	addi	r4,r4,-190
   426f0:	d9002b15 	stw	r4,172(sp)
   426f4:	003c0c06 	br	41728 <__alt_data_end+0xfffcf728>
   426f8:	d9002c17 	ldw	r4,176(sp)
   426fc:	d9801e04 	addi	r6,sp,120
   42700:	b80b883a 	mov	r5,r23
   42704:	004852c0 	call	4852c <__sprint_r>
   42708:	103aab1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   4270c:	d8c02017 	ldw	r3,128(sp)
   42710:	da000404 	addi	r8,sp,16
   42714:	003d4106 	br	41c1c <__alt_data_end+0xfffcfc1c>
   42718:	d8801f17 	ldw	r2,124(sp)
   4271c:	01400174 	movhi	r5,5
   42720:	01000044 	movi	r4,1
   42724:	18c00044 	addi	r3,r3,1
   42728:	10800044 	addi	r2,r2,1
   4272c:	297fd004 	addi	r5,r5,-192
   42730:	41000115 	stw	r4,4(r8)
   42734:	41400015 	stw	r5,0(r8)
   42738:	d8c02015 	stw	r3,128(sp)
   4273c:	d8801f15 	stw	r2,124(sp)
   42740:	010001c4 	movi	r4,7
   42744:	20805c16 	blt	r4,r2,428b8 <___vfprintf_internal_r+0x1b08>
   42748:	42000204 	addi	r8,r8,8
   4274c:	8800041e 	bne	r17,zero,42760 <___vfprintf_internal_r+0x19b0>
   42750:	d8803317 	ldw	r2,204(sp)
   42754:	1000021e 	bne	r2,zero,42760 <___vfprintf_internal_r+0x19b0>
   42758:	9080004c 	andi	r2,r18,1
   4275c:	103c0926 	beq	r2,zero,41784 <__alt_data_end+0xfffcf784>
   42760:	d9003717 	ldw	r4,220(sp)
   42764:	d8801f17 	ldw	r2,124(sp)
   42768:	d9403417 	ldw	r5,208(sp)
   4276c:	20c7883a 	add	r3,r4,r3
   42770:	10800044 	addi	r2,r2,1
   42774:	41000115 	stw	r4,4(r8)
   42778:	41400015 	stw	r5,0(r8)
   4277c:	d8c02015 	stw	r3,128(sp)
   42780:	d8801f15 	stw	r2,124(sp)
   42784:	010001c4 	movi	r4,7
   42788:	20812116 	blt	r4,r2,42c10 <___vfprintf_internal_r+0x1e60>
   4278c:	42000204 	addi	r8,r8,8
   42790:	0463c83a 	sub	r17,zero,r17
   42794:	0440730e 	bge	zero,r17,42964 <___vfprintf_internal_r+0x1bb4>
   42798:	05800404 	movi	r22,16
   4279c:	b440860e 	bge	r22,r17,429b8 <___vfprintf_internal_r+0x1c08>
   427a0:	01400174 	movhi	r5,5
   427a4:	297fd084 	addi	r5,r5,-190
   427a8:	d9402b15 	stw	r5,172(sp)
   427ac:	070001c4 	movi	fp,7
   427b0:	dcc02c17 	ldw	r19,176(sp)
   427b4:	00000306 	br	427c4 <___vfprintf_internal_r+0x1a14>
   427b8:	42000204 	addi	r8,r8,8
   427bc:	8c7ffc04 	addi	r17,r17,-16
   427c0:	b440800e 	bge	r22,r17,429c4 <___vfprintf_internal_r+0x1c14>
   427c4:	18c00404 	addi	r3,r3,16
   427c8:	10800044 	addi	r2,r2,1
   427cc:	45000015 	stw	r20,0(r8)
   427d0:	45800115 	stw	r22,4(r8)
   427d4:	d8c02015 	stw	r3,128(sp)
   427d8:	d8801f15 	stw	r2,124(sp)
   427dc:	e0bff60e 	bge	fp,r2,427b8 <__alt_data_end+0xfffd07b8>
   427e0:	d9801e04 	addi	r6,sp,120
   427e4:	b80b883a 	mov	r5,r23
   427e8:	9809883a 	mov	r4,r19
   427ec:	004852c0 	call	4852c <__sprint_r>
   427f0:	103a711e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   427f4:	d8c02017 	ldw	r3,128(sp)
   427f8:	d8801f17 	ldw	r2,124(sp)
   427fc:	da000404 	addi	r8,sp,16
   42800:	003fee06 	br	427bc <__alt_data_end+0xfffd07bc>
   42804:	00bfffc4 	movi	r2,-1
   42808:	003a6f06 	br	411c8 <__alt_data_end+0xfffcf1c8>
   4280c:	008011c4 	movi	r2,71
   42810:	1440b816 	blt	r2,r17,42af4 <___vfprintf_internal_r+0x1d44>
   42814:	04000174 	movhi	r16,5
   42818:	843fc204 	addi	r16,r16,-248
   4281c:	00c000c4 	movi	r3,3
   42820:	00bfdfc4 	movi	r2,-129
   42824:	d8c02a15 	stw	r3,168(sp)
   42828:	90a4703a 	and	r18,r18,r2
   4282c:	df002783 	ldbu	fp,158(sp)
   42830:	d8c02e15 	stw	r3,184(sp)
   42834:	d8002915 	stw	zero,164(sp)
   42838:	d8003215 	stw	zero,200(sp)
   4283c:	003b2906 	br	414e4 <__alt_data_end+0xfffcf4e4>
   42840:	d9002d17 	ldw	r4,180(sp)
   42844:	24c00017 	ldw	r19,0(r4)
   42848:	21000104 	addi	r4,r4,4
   4284c:	d9002d15 	stw	r4,180(sp)
   42850:	982dd7fa 	srai	r22,r19,31
   42854:	b005883a 	mov	r2,r22
   42858:	003a9f06 	br	412d8 <__alt_data_end+0xfffcf2d8>
   4285c:	d9402d17 	ldw	r5,180(sp)
   42860:	d8c02f17 	ldw	r3,188(sp)
   42864:	28800017 	ldw	r2,0(r5)
   42868:	29400104 	addi	r5,r5,4
   4286c:	d9402d15 	stw	r5,180(sp)
   42870:	10c00015 	stw	r3,0(r2)
   42874:	00398606 	br	40e90 <__alt_data_end+0xfffcee90>
   42878:	d9402d17 	ldw	r5,180(sp)
   4287c:	002d883a 	mov	r22,zero
   42880:	2cc00017 	ldw	r19,0(r5)
   42884:	29400104 	addi	r5,r5,4
   42888:	d9402d15 	stw	r5,180(sp)
   4288c:	003c2306 	br	4191c <__alt_data_end+0xfffcf91c>
   42890:	d8c02d17 	ldw	r3,180(sp)
   42894:	d9002917 	ldw	r4,164(sp)
   42898:	002d883a 	mov	r22,zero
   4289c:	18800104 	addi	r2,r3,4
   428a0:	1cc0000b 	ldhu	r19,0(r3)
   428a4:	203dc10e 	bge	r4,zero,41fac <__alt_data_end+0xfffcffac>
   428a8:	003f7506 	br	42680 <__alt_data_end+0xfffd0680>
   428ac:	04000174 	movhi	r16,5
   428b0:	843fc004 	addi	r16,r16,-256
   428b4:	003acc06 	br	413e8 <__alt_data_end+0xfffcf3e8>
   428b8:	d9002c17 	ldw	r4,176(sp)
   428bc:	d9801e04 	addi	r6,sp,120
   428c0:	b80b883a 	mov	r5,r23
   428c4:	004852c0 	call	4852c <__sprint_r>
   428c8:	103a3b1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   428cc:	dc402617 	ldw	r17,152(sp)
   428d0:	d8c02017 	ldw	r3,128(sp)
   428d4:	da000404 	addi	r8,sp,16
   428d8:	003f9c06 	br	4274c <__alt_data_end+0xfffd074c>
   428dc:	ac400043 	ldbu	r17,1(r21)
   428e0:	94800814 	ori	r18,r18,32
   428e4:	ad400044 	addi	r21,r21,1
   428e8:	8c403fcc 	andi	r17,r17,255
   428ec:	8c40201c 	xori	r17,r17,128
   428f0:	8c7fe004 	addi	r17,r17,-128
   428f4:	00398f06 	br	40f34 <__alt_data_end+0xfffcef34>
   428f8:	d8c02d15 	stw	r3,180(sp)
   428fc:	0039883a 	mov	fp,zero
   42900:	003e3506 	br	421d8 <__alt_data_end+0xfffd01d8>
   42904:	d9002c17 	ldw	r4,176(sp)
   42908:	d9801e04 	addi	r6,sp,120
   4290c:	b80b883a 	mov	r5,r23
   42910:	004852c0 	call	4852c <__sprint_r>
   42914:	103a281e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42918:	d8c02017 	ldw	r3,128(sp)
   4291c:	da000404 	addi	r8,sp,16
   42920:	003cd006 	br	41c64 <__alt_data_end+0xfffcfc64>
   42924:	8009883a 	mov	r4,r16
   42928:	da003d15 	stw	r8,244(sp)
   4292c:	0040d180 	call	40d18 <strlen>
   42930:	d8802e15 	stw	r2,184(sp)
   42934:	da003d17 	ldw	r8,244(sp)
   42938:	103c340e 	bge	r2,zero,41a0c <__alt_data_end+0xfffcfa0c>
   4293c:	0005883a 	mov	r2,zero
   42940:	003c3206 	br	41a0c <__alt_data_end+0xfffcfa0c>
   42944:	d9002c17 	ldw	r4,176(sp)
   42948:	d9801e04 	addi	r6,sp,120
   4294c:	b80b883a 	mov	r5,r23
   42950:	004852c0 	call	4852c <__sprint_r>
   42954:	103a181e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42958:	d8c02017 	ldw	r3,128(sp)
   4295c:	d8801f17 	ldw	r2,124(sp)
   42960:	da000404 	addi	r8,sp,16
   42964:	d9403317 	ldw	r5,204(sp)
   42968:	10800044 	addi	r2,r2,1
   4296c:	44000015 	stw	r16,0(r8)
   42970:	28c7883a 	add	r3,r5,r3
   42974:	003b7d06 	br	4176c <__alt_data_end+0xfffcf76c>
   42978:	01000174 	movhi	r4,5
   4297c:	213fd484 	addi	r4,r4,-174
   42980:	d9003515 	stw	r4,212(sp)
   42984:	003b1406 	br	415d8 <__alt_data_end+0xfffcf5d8>
   42988:	013fffc4 	movi	r4,-1
   4298c:	003a3506 	br	41264 <__alt_data_end+0xfffcf264>
   42990:	0023883a 	mov	r17,zero
   42994:	003d9d06 	br	4200c <__alt_data_end+0xfffd000c>
   42998:	d9002c17 	ldw	r4,176(sp)
   4299c:	d9801e04 	addi	r6,sp,120
   429a0:	b80b883a 	mov	r5,r23
   429a4:	004852c0 	call	4852c <__sprint_r>
   429a8:	103a031e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   429ac:	d8c02017 	ldw	r3,128(sp)
   429b0:	da000404 	addi	r8,sp,16
   429b4:	003d9406 	br	42008 <__alt_data_end+0xfffd0008>
   429b8:	01000174 	movhi	r4,5
   429bc:	213fd084 	addi	r4,r4,-190
   429c0:	d9002b15 	stw	r4,172(sp)
   429c4:	d9002b17 	ldw	r4,172(sp)
   429c8:	1c47883a 	add	r3,r3,r17
   429cc:	10800044 	addi	r2,r2,1
   429d0:	41000015 	stw	r4,0(r8)
   429d4:	44400115 	stw	r17,4(r8)
   429d8:	d8c02015 	stw	r3,128(sp)
   429dc:	d8801f15 	stw	r2,124(sp)
   429e0:	010001c4 	movi	r4,7
   429e4:	20bfd716 	blt	r4,r2,42944 <__alt_data_end+0xfffd0944>
   429e8:	42000204 	addi	r8,r8,8
   429ec:	003fdd06 	br	42964 <__alt_data_end+0xfffd0964>
   429f0:	d9002c17 	ldw	r4,176(sp)
   429f4:	d9801e04 	addi	r6,sp,120
   429f8:	b80b883a 	mov	r5,r23
   429fc:	004852c0 	call	4852c <__sprint_r>
   42a00:	1039ed1e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42a04:	d8802617 	ldw	r2,152(sp)
   42a08:	d8c02017 	ldw	r3,128(sp)
   42a0c:	da000404 	addi	r8,sp,16
   42a10:	003e1006 	br	42254 <__alt_data_end+0xfffd0254>
   42a14:	00800044 	movi	r2,1
   42a18:	10803fcc 	andi	r2,r2,255
   42a1c:	00c00044 	movi	r3,1
   42a20:	10fa3526 	beq	r2,r3,412f8 <__alt_data_end+0xfffcf2f8>
   42a24:	00c00084 	movi	r3,2
   42a28:	10fbcb26 	beq	r2,r3,41958 <__alt_data_end+0xfffcf958>
   42a2c:	003a8f06 	br	4146c <__alt_data_end+0xfffcf46c>
   42a30:	01000174 	movhi	r4,5
   42a34:	213fd484 	addi	r4,r4,-174
   42a38:	d9003515 	stw	r4,212(sp)
   42a3c:	003b7606 	br	41818 <__alt_data_end+0xfffcf818>
   42a40:	d8802917 	ldw	r2,164(sp)
   42a44:	00c00184 	movi	r3,6
   42a48:	1880012e 	bgeu	r3,r2,42a50 <___vfprintf_internal_r+0x1ca0>
   42a4c:	1805883a 	mov	r2,r3
   42a50:	d8802e15 	stw	r2,184(sp)
   42a54:	1000ef16 	blt	r2,zero,42e14 <___vfprintf_internal_r+0x2064>
   42a58:	04000174 	movhi	r16,5
   42a5c:	d8802a15 	stw	r2,168(sp)
   42a60:	dcc02d15 	stw	r19,180(sp)
   42a64:	d8002915 	stw	zero,164(sp)
   42a68:	d8003215 	stw	zero,200(sp)
   42a6c:	843fce04 	addi	r16,r16,-200
   42a70:	0039883a 	mov	fp,zero
   42a74:	003aa206 	br	41500 <__alt_data_end+0xfffcf500>
   42a78:	0021883a 	mov	r16,zero
   42a7c:	003e0706 	br	4229c <__alt_data_end+0xfffd029c>
   42a80:	d9002c17 	ldw	r4,176(sp)
   42a84:	d9801e04 	addi	r6,sp,120
   42a88:	b80b883a 	mov	r5,r23
   42a8c:	004852c0 	call	4852c <__sprint_r>
   42a90:	1039c91e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42a94:	d8802617 	ldw	r2,152(sp)
   42a98:	d9403317 	ldw	r5,204(sp)
   42a9c:	d8c02017 	ldw	r3,128(sp)
   42aa0:	da000404 	addi	r8,sp,16
   42aa4:	2885c83a 	sub	r2,r5,r2
   42aa8:	003dfb06 	br	42298 <__alt_data_end+0xfffd0298>
   42aac:	9080004c 	andi	r2,r18,1
   42ab0:	103e8f1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   42ab4:	d8802117 	ldw	r2,132(sp)
   42ab8:	003e9e06 	br	42534 <__alt_data_end+0xfffd0534>
   42abc:	1025883a 	mov	r18,r2
   42ac0:	0039883a 	mov	fp,zero
   42ac4:	00800084 	movi	r2,2
   42ac8:	003fd306 	br	42a18 <__alt_data_end+0xfffd0a18>
   42acc:	07000b44 	movi	fp,45
   42ad0:	df002785 	stb	fp,158(sp)
   42ad4:	003a4006 	br	413d8 <__alt_data_end+0xfffcf3d8>
   42ad8:	00c00b44 	movi	r3,45
   42adc:	d8c02785 	stb	r3,158(sp)
   42ae0:	d8802a15 	stw	r2,168(sp)
   42ae4:	dc802b17 	ldw	r18,172(sp)
   42ae8:	d8002915 	stw	zero,164(sp)
   42aec:	07000b44 	movi	fp,45
   42af0:	003a8006 	br	414f4 <__alt_data_end+0xfffcf4f4>
   42af4:	04000174 	movhi	r16,5
   42af8:	843fc304 	addi	r16,r16,-244
   42afc:	003f4706 	br	4281c <__alt_data_end+0xfffd081c>
   42b00:	d8c02d17 	ldw	r3,180(sp)
   42b04:	d9002f17 	ldw	r4,188(sp)
   42b08:	18800017 	ldw	r2,0(r3)
   42b0c:	18c00104 	addi	r3,r3,4
   42b10:	d8c02d15 	stw	r3,180(sp)
   42b14:	11000015 	stw	r4,0(r2)
   42b18:	0038dd06 	br	40e90 <__alt_data_end+0xfffcee90>
   42b1c:	dd802617 	ldw	r22,152(sp)
   42b20:	00bfff44 	movi	r2,-3
   42b24:	b0801c16 	blt	r22,r2,42b98 <___vfprintf_internal_r+0x1de8>
   42b28:	d9402917 	ldw	r5,164(sp)
   42b2c:	2d801a16 	blt	r5,r22,42b98 <___vfprintf_internal_r+0x1de8>
   42b30:	dd803215 	stw	r22,200(sp)
   42b34:	003e8906 	br	4255c <__alt_data_end+0xfffd055c>
   42b38:	01000174 	movhi	r4,5
   42b3c:	213fd084 	addi	r4,r4,-190
   42b40:	d9002b15 	stw	r4,172(sp)
   42b44:	003c9106 	br	41d8c <__alt_data_end+0xfffcfd8c>
   42b48:	e005883a 	mov	r2,fp
   42b4c:	003e7906 	br	42534 <__alt_data_end+0xfffd0534>
   42b50:	d9402917 	ldw	r5,164(sp)
   42b54:	df002783 	ldbu	fp,158(sp)
   42b58:	dcc02d15 	stw	r19,180(sp)
   42b5c:	d9402a15 	stw	r5,168(sp)
   42b60:	d9402e15 	stw	r5,184(sp)
   42b64:	d8002915 	stw	zero,164(sp)
   42b68:	d8003215 	stw	zero,200(sp)
   42b6c:	003a5d06 	br	414e4 <__alt_data_end+0xfffcf4e4>
   42b70:	9080004c 	andi	r2,r18,1
   42b74:	0039883a 	mov	fp,zero
   42b78:	10000426 	beq	r2,zero,42b8c <___vfprintf_internal_r+0x1ddc>
   42b7c:	00800c04 	movi	r2,48
   42b80:	dc001dc4 	addi	r16,sp,119
   42b84:	d8801dc5 	stb	r2,119(sp)
   42b88:	003b8006 	br	4198c <__alt_data_end+0xfffcf98c>
   42b8c:	d8002e15 	stw	zero,184(sp)
   42b90:	dc001e04 	addi	r16,sp,120
   42b94:	003a4d06 	br	414cc <__alt_data_end+0xfffcf4cc>
   42b98:	8c7fff84 	addi	r17,r17,-2
   42b9c:	b5bfffc4 	addi	r22,r22,-1
   42ba0:	dd802615 	stw	r22,152(sp)
   42ba4:	dc4022c5 	stb	r17,139(sp)
   42ba8:	b000bf16 	blt	r22,zero,42ea8 <___vfprintf_internal_r+0x20f8>
   42bac:	00800ac4 	movi	r2,43
   42bb0:	d8802305 	stb	r2,140(sp)
   42bb4:	00800244 	movi	r2,9
   42bb8:	15807016 	blt	r2,r22,42d7c <___vfprintf_internal_r+0x1fcc>
   42bbc:	00800c04 	movi	r2,48
   42bc0:	b5800c04 	addi	r22,r22,48
   42bc4:	d8802345 	stb	r2,141(sp)
   42bc8:	dd802385 	stb	r22,142(sp)
   42bcc:	d88023c4 	addi	r2,sp,143
   42bd0:	df0022c4 	addi	fp,sp,139
   42bd4:	d8c03317 	ldw	r3,204(sp)
   42bd8:	1739c83a 	sub	fp,r2,fp
   42bdc:	d9003317 	ldw	r4,204(sp)
   42be0:	e0c7883a 	add	r3,fp,r3
   42be4:	df003a15 	stw	fp,232(sp)
   42be8:	d8c02e15 	stw	r3,184(sp)
   42bec:	00800044 	movi	r2,1
   42bf0:	1100b30e 	bge	r2,r4,42ec0 <___vfprintf_internal_r+0x2110>
   42bf4:	d8c02e17 	ldw	r3,184(sp)
   42bf8:	18c00044 	addi	r3,r3,1
   42bfc:	d8c02e15 	stw	r3,184(sp)
   42c00:	1805883a 	mov	r2,r3
   42c04:	1800ac16 	blt	r3,zero,42eb8 <___vfprintf_internal_r+0x2108>
   42c08:	d8003215 	stw	zero,200(sp)
   42c0c:	003e5d06 	br	42584 <__alt_data_end+0xfffd0584>
   42c10:	d9002c17 	ldw	r4,176(sp)
   42c14:	d9801e04 	addi	r6,sp,120
   42c18:	b80b883a 	mov	r5,r23
   42c1c:	004852c0 	call	4852c <__sprint_r>
   42c20:	1039651e 	bne	r2,zero,411b8 <__alt_data_end+0xfffcf1b8>
   42c24:	dc402617 	ldw	r17,152(sp)
   42c28:	d8c02017 	ldw	r3,128(sp)
   42c2c:	d8801f17 	ldw	r2,124(sp)
   42c30:	da000404 	addi	r8,sp,16
   42c34:	003ed606 	br	42790 <__alt_data_end+0xfffd0790>
   42c38:	582b883a 	mov	r21,r11
   42c3c:	d8002915 	stw	zero,164(sp)
   42c40:	0038bd06 	br	40f38 <__alt_data_end+0xfffcef38>
   42c44:	d8802917 	ldw	r2,164(sp)
   42c48:	103e071e 	bne	r2,zero,42468 <__alt_data_end+0xfffd0468>
   42c4c:	dc002915 	stw	r16,164(sp)
   42c50:	003e0506 	br	42468 <__alt_data_end+0xfffd0468>
   42c54:	d9002917 	ldw	r4,164(sp)
   42c58:	20c00044 	addi	r3,r4,1
   42c5c:	003e0f06 	br	4249c <__alt_data_end+0xfffd049c>
   42c60:	01400184 	movi	r5,6
   42c64:	d9402915 	stw	r5,164(sp)
   42c68:	003dff06 	br	42468 <__alt_data_end+0xfffd0468>
   42c6c:	d8802104 	addi	r2,sp,132
   42c70:	d8800315 	stw	r2,12(sp)
   42c74:	d8802504 	addi	r2,sp,148
   42c78:	d8800215 	stw	r2,8(sp)
   42c7c:	d8802604 	addi	r2,sp,152
   42c80:	d8800115 	stw	r2,4(sp)
   42c84:	d8802917 	ldw	r2,164(sp)
   42c88:	d9403617 	ldw	r5,216(sp)
   42c8c:	d9002c17 	ldw	r4,176(sp)
   42c90:	d8800015 	stw	r2,0(sp)
   42c94:	01c000c4 	movi	r7,3
   42c98:	980d883a 	mov	r6,r19
   42c9c:	da003d15 	stw	r8,244(sp)
   42ca0:	00435540 	call	43554 <_dtoa_r>
   42ca4:	d8c02917 	ldw	r3,164(sp)
   42ca8:	da003d17 	ldw	r8,244(sp)
   42cac:	1021883a 	mov	r16,r2
   42cb0:	10f9883a 	add	fp,r2,r3
   42cb4:	81000007 	ldb	r4,0(r16)
   42cb8:	00800c04 	movi	r2,48
   42cbc:	20805e26 	beq	r4,r2,42e38 <___vfprintf_internal_r+0x2088>
   42cc0:	d8c02617 	ldw	r3,152(sp)
   42cc4:	e0f9883a 	add	fp,fp,r3
   42cc8:	003e0a06 	br	424f4 <__alt_data_end+0xfffd04f4>
   42ccc:	00c00b44 	movi	r3,45
   42cd0:	24e0003c 	xorhi	r19,r4,32768
   42cd4:	d8c02a05 	stb	r3,168(sp)
   42cd8:	003de906 	br	42480 <__alt_data_end+0xfffd0480>
   42cdc:	d8c03217 	ldw	r3,200(sp)
   42ce0:	00c07a0e 	bge	zero,r3,42ecc <___vfprintf_internal_r+0x211c>
   42ce4:	00800044 	movi	r2,1
   42ce8:	d9003317 	ldw	r4,204(sp)
   42cec:	1105883a 	add	r2,r2,r4
   42cf0:	d8802e15 	stw	r2,184(sp)
   42cf4:	10004e16 	blt	r2,zero,42e30 <___vfprintf_internal_r+0x2080>
   42cf8:	044019c4 	movi	r17,103
   42cfc:	003e2106 	br	42584 <__alt_data_end+0xfffd0584>
   42d00:	d9002917 	ldw	r4,164(sp)
   42d04:	d8802104 	addi	r2,sp,132
   42d08:	d8800315 	stw	r2,12(sp)
   42d0c:	d9000015 	stw	r4,0(sp)
   42d10:	d8802504 	addi	r2,sp,148
   42d14:	d9403617 	ldw	r5,216(sp)
   42d18:	d9002c17 	ldw	r4,176(sp)
   42d1c:	d8800215 	stw	r2,8(sp)
   42d20:	d8802604 	addi	r2,sp,152
   42d24:	d8800115 	stw	r2,4(sp)
   42d28:	01c000c4 	movi	r7,3
   42d2c:	980d883a 	mov	r6,r19
   42d30:	da003d15 	stw	r8,244(sp)
   42d34:	00435540 	call	43554 <_dtoa_r>
   42d38:	d8c02917 	ldw	r3,164(sp)
   42d3c:	da003d17 	ldw	r8,244(sp)
   42d40:	1021883a 	mov	r16,r2
   42d44:	00801184 	movi	r2,70
   42d48:	80f9883a 	add	fp,r16,r3
   42d4c:	88bfd926 	beq	r17,r2,42cb4 <__alt_data_end+0xfffd0cb4>
   42d50:	003de806 	br	424f4 <__alt_data_end+0xfffd04f4>
   42d54:	d9002917 	ldw	r4,164(sp)
   42d58:	00c04d0e 	bge	zero,r3,42e90 <___vfprintf_internal_r+0x20e0>
   42d5c:	2000441e 	bne	r4,zero,42e70 <___vfprintf_internal_r+0x20c0>
   42d60:	9480004c 	andi	r18,r18,1
   42d64:	9000421e 	bne	r18,zero,42e70 <___vfprintf_internal_r+0x20c0>
   42d68:	1805883a 	mov	r2,r3
   42d6c:	18007016 	blt	r3,zero,42f30 <___vfprintf_internal_r+0x2180>
   42d70:	d8c03217 	ldw	r3,200(sp)
   42d74:	d8c02e15 	stw	r3,184(sp)
   42d78:	003e0206 	br	42584 <__alt_data_end+0xfffd0584>
   42d7c:	df0022c4 	addi	fp,sp,139
   42d80:	dc002915 	stw	r16,164(sp)
   42d84:	4027883a 	mov	r19,r8
   42d88:	e021883a 	mov	r16,fp
   42d8c:	b009883a 	mov	r4,r22
   42d90:	01400284 	movi	r5,10
   42d94:	004aee00 	call	4aee0 <__modsi3>
   42d98:	10800c04 	addi	r2,r2,48
   42d9c:	843fffc4 	addi	r16,r16,-1
   42da0:	b009883a 	mov	r4,r22
   42da4:	01400284 	movi	r5,10
   42da8:	80800005 	stb	r2,0(r16)
   42dac:	004ae5c0 	call	4ae5c <__divsi3>
   42db0:	102d883a 	mov	r22,r2
   42db4:	00800244 	movi	r2,9
   42db8:	15bff416 	blt	r2,r22,42d8c <__alt_data_end+0xfffd0d8c>
   42dbc:	9811883a 	mov	r8,r19
   42dc0:	b0800c04 	addi	r2,r22,48
   42dc4:	8027883a 	mov	r19,r16
   42dc8:	997fffc4 	addi	r5,r19,-1
   42dcc:	98bfffc5 	stb	r2,-1(r19)
   42dd0:	dc002917 	ldw	r16,164(sp)
   42dd4:	2f006a2e 	bgeu	r5,fp,42f80 <___vfprintf_internal_r+0x21d0>
   42dd8:	d9c02384 	addi	r7,sp,142
   42ddc:	3ccfc83a 	sub	r7,r7,r19
   42de0:	d9002344 	addi	r4,sp,141
   42de4:	e1cf883a 	add	r7,fp,r7
   42de8:	00000106 	br	42df0 <___vfprintf_internal_r+0x2040>
   42dec:	28800003 	ldbu	r2,0(r5)
   42df0:	20800005 	stb	r2,0(r4)
   42df4:	21000044 	addi	r4,r4,1
   42df8:	29400044 	addi	r5,r5,1
   42dfc:	393ffb1e 	bne	r7,r4,42dec <__alt_data_end+0xfffd0dec>
   42e00:	d8802304 	addi	r2,sp,140
   42e04:	14c5c83a 	sub	r2,r2,r19
   42e08:	d8c02344 	addi	r3,sp,141
   42e0c:	1885883a 	add	r2,r3,r2
   42e10:	003f7006 	br	42bd4 <__alt_data_end+0xfffd0bd4>
   42e14:	0005883a 	mov	r2,zero
   42e18:	003f0f06 	br	42a58 <__alt_data_end+0xfffd0a58>
   42e1c:	d8c03217 	ldw	r3,200(sp)
   42e20:	18c00044 	addi	r3,r3,1
   42e24:	d8c02e15 	stw	r3,184(sp)
   42e28:	1805883a 	mov	r2,r3
   42e2c:	183fb20e 	bge	r3,zero,42cf8 <__alt_data_end+0xfffd0cf8>
   42e30:	0005883a 	mov	r2,zero
   42e34:	003fb006 	br	42cf8 <__alt_data_end+0xfffd0cf8>
   42e38:	d9003617 	ldw	r4,216(sp)
   42e3c:	000d883a 	mov	r6,zero
   42e40:	000f883a 	mov	r7,zero
   42e44:	980b883a 	mov	r5,r19
   42e48:	d8c03c15 	stw	r3,240(sp)
   42e4c:	da003d15 	stw	r8,244(sp)
   42e50:	004c1a40 	call	4c1a4 <__eqdf2>
   42e54:	d8c03c17 	ldw	r3,240(sp)
   42e58:	da003d17 	ldw	r8,244(sp)
   42e5c:	103f9826 	beq	r2,zero,42cc0 <__alt_data_end+0xfffd0cc0>
   42e60:	00800044 	movi	r2,1
   42e64:	10c7c83a 	sub	r3,r2,r3
   42e68:	d8c02615 	stw	r3,152(sp)
   42e6c:	003f9506 	br	42cc4 <__alt_data_end+0xfffd0cc4>
   42e70:	d9002917 	ldw	r4,164(sp)
   42e74:	d8c03217 	ldw	r3,200(sp)
   42e78:	20800044 	addi	r2,r4,1
   42e7c:	1885883a 	add	r2,r3,r2
   42e80:	d8802e15 	stw	r2,184(sp)
   42e84:	103dbf0e 	bge	r2,zero,42584 <__alt_data_end+0xfffd0584>
   42e88:	0005883a 	mov	r2,zero
   42e8c:	003dbd06 	br	42584 <__alt_data_end+0xfffd0584>
   42e90:	2000211e 	bne	r4,zero,42f18 <___vfprintf_internal_r+0x2168>
   42e94:	9480004c 	andi	r18,r18,1
   42e98:	90001f1e 	bne	r18,zero,42f18 <___vfprintf_internal_r+0x2168>
   42e9c:	00800044 	movi	r2,1
   42ea0:	d8802e15 	stw	r2,184(sp)
   42ea4:	003db706 	br	42584 <__alt_data_end+0xfffd0584>
   42ea8:	00800b44 	movi	r2,45
   42eac:	05adc83a 	sub	r22,zero,r22
   42eb0:	d8802305 	stb	r2,140(sp)
   42eb4:	003f3f06 	br	42bb4 <__alt_data_end+0xfffd0bb4>
   42eb8:	0005883a 	mov	r2,zero
   42ebc:	003f5206 	br	42c08 <__alt_data_end+0xfffd0c08>
   42ec0:	90a4703a 	and	r18,r18,r2
   42ec4:	903f4e26 	beq	r18,zero,42c00 <__alt_data_end+0xfffd0c00>
   42ec8:	003f4a06 	br	42bf4 <__alt_data_end+0xfffd0bf4>
   42ecc:	00800084 	movi	r2,2
   42ed0:	10c5c83a 	sub	r2,r2,r3
   42ed4:	003f8406 	br	42ce8 <__alt_data_end+0xfffd0ce8>
   42ed8:	d8802d17 	ldw	r2,180(sp)
   42edc:	d9002d17 	ldw	r4,180(sp)
   42ee0:	ac400043 	ldbu	r17,1(r21)
   42ee4:	10800017 	ldw	r2,0(r2)
   42ee8:	582b883a 	mov	r21,r11
   42eec:	d8802915 	stw	r2,164(sp)
   42ef0:	20800104 	addi	r2,r4,4
   42ef4:	d9002917 	ldw	r4,164(sp)
   42ef8:	d8802d15 	stw	r2,180(sp)
   42efc:	203e7a0e 	bge	r4,zero,428e8 <__alt_data_end+0xfffd08e8>
   42f00:	8c403fcc 	andi	r17,r17,255
   42f04:	00bfffc4 	movi	r2,-1
   42f08:	8c40201c 	xori	r17,r17,128
   42f0c:	d8802915 	stw	r2,164(sp)
   42f10:	8c7fe004 	addi	r17,r17,-128
   42f14:	00380706 	br	40f34 <__alt_data_end+0xfffcef34>
   42f18:	d8c02917 	ldw	r3,164(sp)
   42f1c:	18c00084 	addi	r3,r3,2
   42f20:	d8c02e15 	stw	r3,184(sp)
   42f24:	1805883a 	mov	r2,r3
   42f28:	183d960e 	bge	r3,zero,42584 <__alt_data_end+0xfffd0584>
   42f2c:	003fd606 	br	42e88 <__alt_data_end+0xfffd0e88>
   42f30:	0005883a 	mov	r2,zero
   42f34:	003f8e06 	br	42d70 <__alt_data_end+0xfffd0d70>
   42f38:	9080004c 	andi	r2,r18,1
   42f3c:	103f811e 	bne	r2,zero,42d44 <__alt_data_end+0xfffd0d44>
   42f40:	d8802117 	ldw	r2,132(sp)
   42f44:	1405c83a 	sub	r2,r2,r16
   42f48:	d8803315 	stw	r2,204(sp)
   42f4c:	b47ef326 	beq	r22,r17,42b1c <__alt_data_end+0xfffd0b1c>
   42f50:	dd802617 	ldw	r22,152(sp)
   42f54:	003f1106 	br	42b9c <__alt_data_end+0xfffd0b9c>
   42f58:	d9c02785 	stb	r7,158(sp)
   42f5c:	00390406 	br	41370 <__alt_data_end+0xfffcf370>
   42f60:	d9c02785 	stb	r7,158(sp)
   42f64:	0038d306 	br	412b4 <__alt_data_end+0xfffcf2b4>
   42f68:	d9c02785 	stb	r7,158(sp)
   42f6c:	003a6106 	br	418f4 <__alt_data_end+0xfffcf8f4>
   42f70:	d9c02785 	stb	r7,158(sp)
   42f74:	003af806 	br	41b58 <__alt_data_end+0xfffcfb58>
   42f78:	0005883a 	mov	r2,zero
   42f7c:	003d7e06 	br	42578 <__alt_data_end+0xfffd0578>
   42f80:	d8802344 	addi	r2,sp,141
   42f84:	003f1306 	br	42bd4 <__alt_data_end+0xfffd0bd4>
   42f88:	d9c02785 	stb	r7,158(sp)
   42f8c:	00392306 	br	4141c <__alt_data_end+0xfffcf41c>
   42f90:	d9c02785 	stb	r7,158(sp)
   42f94:	003aa906 	br	41a3c <__alt_data_end+0xfffcfa3c>
   42f98:	d9c02785 	stb	r7,158(sp)
   42f9c:	003a3d06 	br	41894 <__alt_data_end+0xfffcf894>
   42fa0:	d9c02785 	stb	r7,158(sp)
   42fa4:	003aca06 	br	41ad0 <__alt_data_end+0xfffcfad0>

00042fa8 <__vfprintf_internal>:
   42fa8:	00800174 	movhi	r2,5
   42fac:	10872804 	addi	r2,r2,7328
   42fb0:	300f883a 	mov	r7,r6
   42fb4:	280d883a 	mov	r6,r5
   42fb8:	200b883a 	mov	r5,r4
   42fbc:	11000017 	ldw	r4,0(r2)
   42fc0:	0040db01 	jmpi	40db0 <___vfprintf_internal_r>

00042fc4 <__sbprintf>:
   42fc4:	2880030b 	ldhu	r2,12(r5)
   42fc8:	2ac01917 	ldw	r11,100(r5)
   42fcc:	2a80038b 	ldhu	r10,14(r5)
   42fd0:	2a400717 	ldw	r9,28(r5)
   42fd4:	2a000917 	ldw	r8,36(r5)
   42fd8:	defee204 	addi	sp,sp,-1144
   42fdc:	00c10004 	movi	r3,1024
   42fe0:	dc011a15 	stw	r16,1128(sp)
   42fe4:	10bfff4c 	andi	r2,r2,65533
   42fe8:	2821883a 	mov	r16,r5
   42fec:	d8cb883a 	add	r5,sp,r3
   42ff0:	dc811c15 	stw	r18,1136(sp)
   42ff4:	dc411b15 	stw	r17,1132(sp)
   42ff8:	dfc11d15 	stw	ra,1140(sp)
   42ffc:	2025883a 	mov	r18,r4
   43000:	d881030d 	sth	r2,1036(sp)
   43004:	dac11915 	stw	r11,1124(sp)
   43008:	da81038d 	sth	r10,1038(sp)
   4300c:	da410715 	stw	r9,1052(sp)
   43010:	da010915 	stw	r8,1060(sp)
   43014:	dec10015 	stw	sp,1024(sp)
   43018:	dec10415 	stw	sp,1040(sp)
   4301c:	d8c10215 	stw	r3,1032(sp)
   43020:	d8c10515 	stw	r3,1044(sp)
   43024:	d8010615 	stw	zero,1048(sp)
   43028:	0040db00 	call	40db0 <___vfprintf_internal_r>
   4302c:	1023883a 	mov	r17,r2
   43030:	10000416 	blt	r2,zero,43044 <__sbprintf+0x80>
   43034:	d9410004 	addi	r5,sp,1024
   43038:	9009883a 	mov	r4,r18
   4303c:	0044df80 	call	44df8 <_fflush_r>
   43040:	10000d1e 	bne	r2,zero,43078 <__sbprintf+0xb4>
   43044:	d881030b 	ldhu	r2,1036(sp)
   43048:	1080100c 	andi	r2,r2,64
   4304c:	10000326 	beq	r2,zero,4305c <__sbprintf+0x98>
   43050:	8080030b 	ldhu	r2,12(r16)
   43054:	10801014 	ori	r2,r2,64
   43058:	8080030d 	sth	r2,12(r16)
   4305c:	8805883a 	mov	r2,r17
   43060:	dfc11d17 	ldw	ra,1140(sp)
   43064:	dc811c17 	ldw	r18,1136(sp)
   43068:	dc411b17 	ldw	r17,1132(sp)
   4306c:	dc011a17 	ldw	r16,1128(sp)
   43070:	dec11e04 	addi	sp,sp,1144
   43074:	f800283a 	ret
   43078:	047fffc4 	movi	r17,-1
   4307c:	003ff106 	br	43044 <__alt_data_end+0xfffd1044>

00043080 <__swsetup_r>:
   43080:	00800174 	movhi	r2,5
   43084:	defffd04 	addi	sp,sp,-12
   43088:	10872804 	addi	r2,r2,7328
   4308c:	dc400115 	stw	r17,4(sp)
   43090:	2023883a 	mov	r17,r4
   43094:	11000017 	ldw	r4,0(r2)
   43098:	dc000015 	stw	r16,0(sp)
   4309c:	dfc00215 	stw	ra,8(sp)
   430a0:	2821883a 	mov	r16,r5
   430a4:	20000226 	beq	r4,zero,430b0 <__swsetup_r+0x30>
   430a8:	20800e17 	ldw	r2,56(r4)
   430ac:	10003126 	beq	r2,zero,43174 <__swsetup_r+0xf4>
   430b0:	8080030b 	ldhu	r2,12(r16)
   430b4:	10c0020c 	andi	r3,r2,8
   430b8:	1009883a 	mov	r4,r2
   430bc:	18000f26 	beq	r3,zero,430fc <__swsetup_r+0x7c>
   430c0:	80c00417 	ldw	r3,16(r16)
   430c4:	18001526 	beq	r3,zero,4311c <__swsetup_r+0x9c>
   430c8:	1100004c 	andi	r4,r2,1
   430cc:	20001c1e 	bne	r4,zero,43140 <__swsetup_r+0xc0>
   430d0:	1080008c 	andi	r2,r2,2
   430d4:	1000291e 	bne	r2,zero,4317c <__swsetup_r+0xfc>
   430d8:	80800517 	ldw	r2,20(r16)
   430dc:	80800215 	stw	r2,8(r16)
   430e0:	18001c26 	beq	r3,zero,43154 <__swsetup_r+0xd4>
   430e4:	0005883a 	mov	r2,zero
   430e8:	dfc00217 	ldw	ra,8(sp)
   430ec:	dc400117 	ldw	r17,4(sp)
   430f0:	dc000017 	ldw	r16,0(sp)
   430f4:	dec00304 	addi	sp,sp,12
   430f8:	f800283a 	ret
   430fc:	2080040c 	andi	r2,r4,16
   43100:	10002e26 	beq	r2,zero,431bc <__swsetup_r+0x13c>
   43104:	2080010c 	andi	r2,r4,4
   43108:	10001e1e 	bne	r2,zero,43184 <__swsetup_r+0x104>
   4310c:	80c00417 	ldw	r3,16(r16)
   43110:	20800214 	ori	r2,r4,8
   43114:	8080030d 	sth	r2,12(r16)
   43118:	183feb1e 	bne	r3,zero,430c8 <__alt_data_end+0xfffd10c8>
   4311c:	1100a00c 	andi	r4,r2,640
   43120:	01408004 	movi	r5,512
   43124:	217fe826 	beq	r4,r5,430c8 <__alt_data_end+0xfffd10c8>
   43128:	800b883a 	mov	r5,r16
   4312c:	8809883a 	mov	r4,r17
   43130:	0045d780 	call	45d78 <__smakebuf_r>
   43134:	8080030b 	ldhu	r2,12(r16)
   43138:	80c00417 	ldw	r3,16(r16)
   4313c:	003fe206 	br	430c8 <__alt_data_end+0xfffd10c8>
   43140:	80800517 	ldw	r2,20(r16)
   43144:	80000215 	stw	zero,8(r16)
   43148:	0085c83a 	sub	r2,zero,r2
   4314c:	80800615 	stw	r2,24(r16)
   43150:	183fe41e 	bne	r3,zero,430e4 <__alt_data_end+0xfffd10e4>
   43154:	80c0030b 	ldhu	r3,12(r16)
   43158:	0005883a 	mov	r2,zero
   4315c:	1900200c 	andi	r4,r3,128
   43160:	203fe126 	beq	r4,zero,430e8 <__alt_data_end+0xfffd10e8>
   43164:	18c01014 	ori	r3,r3,64
   43168:	80c0030d 	sth	r3,12(r16)
   4316c:	00bfffc4 	movi	r2,-1
   43170:	003fdd06 	br	430e8 <__alt_data_end+0xfffd10e8>
   43174:	00451d40 	call	451d4 <__sinit>
   43178:	003fcd06 	br	430b0 <__alt_data_end+0xfffd10b0>
   4317c:	0005883a 	mov	r2,zero
   43180:	003fd606 	br	430dc <__alt_data_end+0xfffd10dc>
   43184:	81400c17 	ldw	r5,48(r16)
   43188:	28000626 	beq	r5,zero,431a4 <__swsetup_r+0x124>
   4318c:	80801004 	addi	r2,r16,64
   43190:	28800326 	beq	r5,r2,431a0 <__swsetup_r+0x120>
   43194:	8809883a 	mov	r4,r17
   43198:	00453480 	call	45348 <_free_r>
   4319c:	8100030b 	ldhu	r4,12(r16)
   431a0:	80000c15 	stw	zero,48(r16)
   431a4:	80c00417 	ldw	r3,16(r16)
   431a8:	00bff6c4 	movi	r2,-37
   431ac:	1108703a 	and	r4,r2,r4
   431b0:	80000115 	stw	zero,4(r16)
   431b4:	80c00015 	stw	r3,0(r16)
   431b8:	003fd506 	br	43110 <__alt_data_end+0xfffd1110>
   431bc:	00800244 	movi	r2,9
   431c0:	88800015 	stw	r2,0(r17)
   431c4:	20801014 	ori	r2,r4,64
   431c8:	8080030d 	sth	r2,12(r16)
   431cc:	00bfffc4 	movi	r2,-1
   431d0:	003fc506 	br	430e8 <__alt_data_end+0xfffd10e8>

000431d4 <__call_exitprocs>:
   431d4:	defff504 	addi	sp,sp,-44
   431d8:	df000915 	stw	fp,36(sp)
   431dc:	dd400615 	stw	r21,24(sp)
   431e0:	dc800315 	stw	r18,12(sp)
   431e4:	dfc00a15 	stw	ra,40(sp)
   431e8:	ddc00815 	stw	r23,32(sp)
   431ec:	dd800715 	stw	r22,28(sp)
   431f0:	dd000515 	stw	r20,20(sp)
   431f4:	dcc00415 	stw	r19,16(sp)
   431f8:	dc400215 	stw	r17,8(sp)
   431fc:	dc000115 	stw	r16,4(sp)
   43200:	d9000015 	stw	r4,0(sp)
   43204:	2839883a 	mov	fp,r5
   43208:	04800044 	movi	r18,1
   4320c:	057fffc4 	movi	r21,-1
   43210:	00800174 	movhi	r2,5
   43214:	10872704 	addi	r2,r2,7324
   43218:	12000017 	ldw	r8,0(r2)
   4321c:	45005217 	ldw	r20,328(r8)
   43220:	44c05204 	addi	r19,r8,328
   43224:	a0001c26 	beq	r20,zero,43298 <__call_exitprocs+0xc4>
   43228:	a0800117 	ldw	r2,4(r20)
   4322c:	15ffffc4 	addi	r23,r2,-1
   43230:	b8000d16 	blt	r23,zero,43268 <__call_exitprocs+0x94>
   43234:	14000044 	addi	r16,r2,1
   43238:	8421883a 	add	r16,r16,r16
   4323c:	8421883a 	add	r16,r16,r16
   43240:	84402004 	addi	r17,r16,128
   43244:	a463883a 	add	r17,r20,r17
   43248:	a421883a 	add	r16,r20,r16
   4324c:	e0001e26 	beq	fp,zero,432c8 <__call_exitprocs+0xf4>
   43250:	80804017 	ldw	r2,256(r16)
   43254:	e0801c26 	beq	fp,r2,432c8 <__call_exitprocs+0xf4>
   43258:	bdffffc4 	addi	r23,r23,-1
   4325c:	843fff04 	addi	r16,r16,-4
   43260:	8c7fff04 	addi	r17,r17,-4
   43264:	bd7ff91e 	bne	r23,r21,4324c <__alt_data_end+0xfffd124c>
   43268:	00800034 	movhi	r2,0
   4326c:	10800004 	addi	r2,r2,0
   43270:	10000926 	beq	r2,zero,43298 <__call_exitprocs+0xc4>
   43274:	a0800117 	ldw	r2,4(r20)
   43278:	1000301e 	bne	r2,zero,4333c <__call_exitprocs+0x168>
   4327c:	a0800017 	ldw	r2,0(r20)
   43280:	10003226 	beq	r2,zero,4334c <__call_exitprocs+0x178>
   43284:	a009883a 	mov	r4,r20
   43288:	98800015 	stw	r2,0(r19)
   4328c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   43290:	9d000017 	ldw	r20,0(r19)
   43294:	a03fe41e 	bne	r20,zero,43228 <__alt_data_end+0xfffd1228>
   43298:	dfc00a17 	ldw	ra,40(sp)
   4329c:	df000917 	ldw	fp,36(sp)
   432a0:	ddc00817 	ldw	r23,32(sp)
   432a4:	dd800717 	ldw	r22,28(sp)
   432a8:	dd400617 	ldw	r21,24(sp)
   432ac:	dd000517 	ldw	r20,20(sp)
   432b0:	dcc00417 	ldw	r19,16(sp)
   432b4:	dc800317 	ldw	r18,12(sp)
   432b8:	dc400217 	ldw	r17,8(sp)
   432bc:	dc000117 	ldw	r16,4(sp)
   432c0:	dec00b04 	addi	sp,sp,44
   432c4:	f800283a 	ret
   432c8:	a0800117 	ldw	r2,4(r20)
   432cc:	80c00017 	ldw	r3,0(r16)
   432d0:	10bfffc4 	addi	r2,r2,-1
   432d4:	15c01426 	beq	r2,r23,43328 <__call_exitprocs+0x154>
   432d8:	80000015 	stw	zero,0(r16)
   432dc:	183fde26 	beq	r3,zero,43258 <__alt_data_end+0xfffd1258>
   432e0:	95c8983a 	sll	r4,r18,r23
   432e4:	a0806217 	ldw	r2,392(r20)
   432e8:	a5800117 	ldw	r22,4(r20)
   432ec:	2084703a 	and	r2,r4,r2
   432f0:	10000b26 	beq	r2,zero,43320 <__call_exitprocs+0x14c>
   432f4:	a0806317 	ldw	r2,396(r20)
   432f8:	2088703a 	and	r4,r4,r2
   432fc:	20000c1e 	bne	r4,zero,43330 <__call_exitprocs+0x15c>
   43300:	89400017 	ldw	r5,0(r17)
   43304:	d9000017 	ldw	r4,0(sp)
   43308:	183ee83a 	callr	r3
   4330c:	a0800117 	ldw	r2,4(r20)
   43310:	15bfbf1e 	bne	r2,r22,43210 <__alt_data_end+0xfffd1210>
   43314:	98800017 	ldw	r2,0(r19)
   43318:	153fcf26 	beq	r2,r20,43258 <__alt_data_end+0xfffd1258>
   4331c:	003fbc06 	br	43210 <__alt_data_end+0xfffd1210>
   43320:	183ee83a 	callr	r3
   43324:	003ff906 	br	4330c <__alt_data_end+0xfffd130c>
   43328:	a5c00115 	stw	r23,4(r20)
   4332c:	003feb06 	br	432dc <__alt_data_end+0xfffd12dc>
   43330:	89000017 	ldw	r4,0(r17)
   43334:	183ee83a 	callr	r3
   43338:	003ff406 	br	4330c <__alt_data_end+0xfffd130c>
   4333c:	a0800017 	ldw	r2,0(r20)
   43340:	a027883a 	mov	r19,r20
   43344:	1029883a 	mov	r20,r2
   43348:	003fb606 	br	43224 <__alt_data_end+0xfffd1224>
   4334c:	0005883a 	mov	r2,zero
   43350:	003ffb06 	br	43340 <__alt_data_end+0xfffd1340>

00043354 <quorem>:
   43354:	defff704 	addi	sp,sp,-36
   43358:	dc800215 	stw	r18,8(sp)
   4335c:	20800417 	ldw	r2,16(r4)
   43360:	2c800417 	ldw	r18,16(r5)
   43364:	dfc00815 	stw	ra,32(sp)
   43368:	ddc00715 	stw	r23,28(sp)
   4336c:	dd800615 	stw	r22,24(sp)
   43370:	dd400515 	stw	r21,20(sp)
   43374:	dd000415 	stw	r20,16(sp)
   43378:	dcc00315 	stw	r19,12(sp)
   4337c:	dc400115 	stw	r17,4(sp)
   43380:	dc000015 	stw	r16,0(sp)
   43384:	14807116 	blt	r2,r18,4354c <quorem+0x1f8>
   43388:	94bfffc4 	addi	r18,r18,-1
   4338c:	94ad883a 	add	r22,r18,r18
   43390:	b5ad883a 	add	r22,r22,r22
   43394:	2c400504 	addi	r17,r5,20
   43398:	8da9883a 	add	r20,r17,r22
   4339c:	25400504 	addi	r21,r4,20
   433a0:	282f883a 	mov	r23,r5
   433a4:	adad883a 	add	r22,r21,r22
   433a8:	a1400017 	ldw	r5,0(r20)
   433ac:	2021883a 	mov	r16,r4
   433b0:	b1000017 	ldw	r4,0(r22)
   433b4:	29400044 	addi	r5,r5,1
   433b8:	004af540 	call	4af54 <__udivsi3>
   433bc:	1027883a 	mov	r19,r2
   433c0:	10002c26 	beq	r2,zero,43474 <quorem+0x120>
   433c4:	a813883a 	mov	r9,r21
   433c8:	880b883a 	mov	r5,r17
   433cc:	0009883a 	mov	r4,zero
   433d0:	000d883a 	mov	r6,zero
   433d4:	2a000017 	ldw	r8,0(r5)
   433d8:	49c00017 	ldw	r7,0(r9)
   433dc:	29400104 	addi	r5,r5,4
   433e0:	40bfffcc 	andi	r2,r8,65535
   433e4:	14c5383a 	mul	r2,r2,r19
   433e8:	4010d43a 	srli	r8,r8,16
   433ec:	38ffffcc 	andi	r3,r7,65535
   433f0:	1105883a 	add	r2,r2,r4
   433f4:	1008d43a 	srli	r4,r2,16
   433f8:	44d1383a 	mul	r8,r8,r19
   433fc:	198d883a 	add	r6,r3,r6
   43400:	10ffffcc 	andi	r3,r2,65535
   43404:	30c7c83a 	sub	r3,r6,r3
   43408:	380ed43a 	srli	r7,r7,16
   4340c:	4105883a 	add	r2,r8,r4
   43410:	180dd43a 	srai	r6,r3,16
   43414:	113fffcc 	andi	r4,r2,65535
   43418:	390fc83a 	sub	r7,r7,r4
   4341c:	398d883a 	add	r6,r7,r6
   43420:	300e943a 	slli	r7,r6,16
   43424:	18ffffcc 	andi	r3,r3,65535
   43428:	1008d43a 	srli	r4,r2,16
   4342c:	38ceb03a 	or	r7,r7,r3
   43430:	49c00015 	stw	r7,0(r9)
   43434:	300dd43a 	srai	r6,r6,16
   43438:	4a400104 	addi	r9,r9,4
   4343c:	a17fe52e 	bgeu	r20,r5,433d4 <__alt_data_end+0xfffd13d4>
   43440:	b0800017 	ldw	r2,0(r22)
   43444:	10000b1e 	bne	r2,zero,43474 <quorem+0x120>
   43448:	b0bfff04 	addi	r2,r22,-4
   4344c:	a880082e 	bgeu	r21,r2,43470 <quorem+0x11c>
   43450:	b0ffff17 	ldw	r3,-4(r22)
   43454:	18000326 	beq	r3,zero,43464 <quorem+0x110>
   43458:	00000506 	br	43470 <quorem+0x11c>
   4345c:	10c00017 	ldw	r3,0(r2)
   43460:	1800031e 	bne	r3,zero,43470 <quorem+0x11c>
   43464:	10bfff04 	addi	r2,r2,-4
   43468:	94bfffc4 	addi	r18,r18,-1
   4346c:	a8bffb36 	bltu	r21,r2,4345c <__alt_data_end+0xfffd145c>
   43470:	84800415 	stw	r18,16(r16)
   43474:	b80b883a 	mov	r5,r23
   43478:	8009883a 	mov	r4,r16
   4347c:	00474b80 	call	474b8 <__mcmp>
   43480:	10002616 	blt	r2,zero,4351c <quorem+0x1c8>
   43484:	9cc00044 	addi	r19,r19,1
   43488:	a805883a 	mov	r2,r21
   4348c:	000b883a 	mov	r5,zero
   43490:	11000017 	ldw	r4,0(r2)
   43494:	89800017 	ldw	r6,0(r17)
   43498:	10800104 	addi	r2,r2,4
   4349c:	20ffffcc 	andi	r3,r4,65535
   434a0:	194b883a 	add	r5,r3,r5
   434a4:	30ffffcc 	andi	r3,r6,65535
   434a8:	28c7c83a 	sub	r3,r5,r3
   434ac:	300cd43a 	srli	r6,r6,16
   434b0:	2008d43a 	srli	r4,r4,16
   434b4:	180bd43a 	srai	r5,r3,16
   434b8:	18ffffcc 	andi	r3,r3,65535
   434bc:	2189c83a 	sub	r4,r4,r6
   434c0:	2149883a 	add	r4,r4,r5
   434c4:	200c943a 	slli	r6,r4,16
   434c8:	8c400104 	addi	r17,r17,4
   434cc:	200bd43a 	srai	r5,r4,16
   434d0:	30c6b03a 	or	r3,r6,r3
   434d4:	10ffff15 	stw	r3,-4(r2)
   434d8:	a47fed2e 	bgeu	r20,r17,43490 <__alt_data_end+0xfffd1490>
   434dc:	9485883a 	add	r2,r18,r18
   434e0:	1085883a 	add	r2,r2,r2
   434e4:	a887883a 	add	r3,r21,r2
   434e8:	18800017 	ldw	r2,0(r3)
   434ec:	10000b1e 	bne	r2,zero,4351c <quorem+0x1c8>
   434f0:	18bfff04 	addi	r2,r3,-4
   434f4:	a880082e 	bgeu	r21,r2,43518 <quorem+0x1c4>
   434f8:	18ffff17 	ldw	r3,-4(r3)
   434fc:	18000326 	beq	r3,zero,4350c <quorem+0x1b8>
   43500:	00000506 	br	43518 <quorem+0x1c4>
   43504:	10c00017 	ldw	r3,0(r2)
   43508:	1800031e 	bne	r3,zero,43518 <quorem+0x1c4>
   4350c:	10bfff04 	addi	r2,r2,-4
   43510:	94bfffc4 	addi	r18,r18,-1
   43514:	a8bffb36 	bltu	r21,r2,43504 <__alt_data_end+0xfffd1504>
   43518:	84800415 	stw	r18,16(r16)
   4351c:	9805883a 	mov	r2,r19
   43520:	dfc00817 	ldw	ra,32(sp)
   43524:	ddc00717 	ldw	r23,28(sp)
   43528:	dd800617 	ldw	r22,24(sp)
   4352c:	dd400517 	ldw	r21,20(sp)
   43530:	dd000417 	ldw	r20,16(sp)
   43534:	dcc00317 	ldw	r19,12(sp)
   43538:	dc800217 	ldw	r18,8(sp)
   4353c:	dc400117 	ldw	r17,4(sp)
   43540:	dc000017 	ldw	r16,0(sp)
   43544:	dec00904 	addi	sp,sp,36
   43548:	f800283a 	ret
   4354c:	0005883a 	mov	r2,zero
   43550:	003ff306 	br	43520 <__alt_data_end+0xfffd1520>

00043554 <_dtoa_r>:
   43554:	20801017 	ldw	r2,64(r4)
   43558:	deffde04 	addi	sp,sp,-136
   4355c:	df002015 	stw	fp,128(sp)
   43560:	dcc01b15 	stw	r19,108(sp)
   43564:	dc801a15 	stw	r18,104(sp)
   43568:	dc401915 	stw	r17,100(sp)
   4356c:	dc001815 	stw	r16,96(sp)
   43570:	dfc02115 	stw	ra,132(sp)
   43574:	ddc01f15 	stw	r23,124(sp)
   43578:	dd801e15 	stw	r22,120(sp)
   4357c:	dd401d15 	stw	r21,116(sp)
   43580:	dd001c15 	stw	r20,112(sp)
   43584:	d9c00315 	stw	r7,12(sp)
   43588:	2039883a 	mov	fp,r4
   4358c:	3023883a 	mov	r17,r6
   43590:	2825883a 	mov	r18,r5
   43594:	dc002417 	ldw	r16,144(sp)
   43598:	3027883a 	mov	r19,r6
   4359c:	10000826 	beq	r2,zero,435c0 <_dtoa_r+0x6c>
   435a0:	21801117 	ldw	r6,68(r4)
   435a4:	00c00044 	movi	r3,1
   435a8:	100b883a 	mov	r5,r2
   435ac:	1986983a 	sll	r3,r3,r6
   435b0:	11800115 	stw	r6,4(r2)
   435b4:	10c00215 	stw	r3,8(r2)
   435b8:	0046c980 	call	46c98 <_Bfree>
   435bc:	e0001015 	stw	zero,64(fp)
   435c0:	88002e16 	blt	r17,zero,4367c <_dtoa_r+0x128>
   435c4:	80000015 	stw	zero,0(r16)
   435c8:	889ffc2c 	andhi	r2,r17,32752
   435cc:	00dffc34 	movhi	r3,32752
   435d0:	10c01c26 	beq	r2,r3,43644 <_dtoa_r+0xf0>
   435d4:	000d883a 	mov	r6,zero
   435d8:	000f883a 	mov	r7,zero
   435dc:	9009883a 	mov	r4,r18
   435e0:	980b883a 	mov	r5,r19
   435e4:	004c1a40 	call	4c1a4 <__eqdf2>
   435e8:	10002b1e 	bne	r2,zero,43698 <_dtoa_r+0x144>
   435ec:	d9c02317 	ldw	r7,140(sp)
   435f0:	00800044 	movi	r2,1
   435f4:	38800015 	stw	r2,0(r7)
   435f8:	d8802517 	ldw	r2,148(sp)
   435fc:	10019e26 	beq	r2,zero,43c78 <_dtoa_r+0x724>
   43600:	d8c02517 	ldw	r3,148(sp)
   43604:	00800174 	movhi	r2,5
   43608:	10bfd044 	addi	r2,r2,-191
   4360c:	18800015 	stw	r2,0(r3)
   43610:	10bfffc4 	addi	r2,r2,-1
   43614:	dfc02117 	ldw	ra,132(sp)
   43618:	df002017 	ldw	fp,128(sp)
   4361c:	ddc01f17 	ldw	r23,124(sp)
   43620:	dd801e17 	ldw	r22,120(sp)
   43624:	dd401d17 	ldw	r21,116(sp)
   43628:	dd001c17 	ldw	r20,112(sp)
   4362c:	dcc01b17 	ldw	r19,108(sp)
   43630:	dc801a17 	ldw	r18,104(sp)
   43634:	dc401917 	ldw	r17,100(sp)
   43638:	dc001817 	ldw	r16,96(sp)
   4363c:	dec02204 	addi	sp,sp,136
   43640:	f800283a 	ret
   43644:	d8c02317 	ldw	r3,140(sp)
   43648:	0089c3c4 	movi	r2,9999
   4364c:	18800015 	stw	r2,0(r3)
   43650:	90017726 	beq	r18,zero,43c30 <_dtoa_r+0x6dc>
   43654:	00800174 	movhi	r2,5
   43658:	10bfdc04 	addi	r2,r2,-144
   4365c:	d9002517 	ldw	r4,148(sp)
   43660:	203fec26 	beq	r4,zero,43614 <__alt_data_end+0xfffd1614>
   43664:	10c000c7 	ldb	r3,3(r2)
   43668:	1801781e 	bne	r3,zero,43c4c <_dtoa_r+0x6f8>
   4366c:	10c000c4 	addi	r3,r2,3
   43670:	d9802517 	ldw	r6,148(sp)
   43674:	30c00015 	stw	r3,0(r6)
   43678:	003fe606 	br	43614 <__alt_data_end+0xfffd1614>
   4367c:	04e00034 	movhi	r19,32768
   43680:	9cffffc4 	addi	r19,r19,-1
   43684:	00800044 	movi	r2,1
   43688:	8ce6703a 	and	r19,r17,r19
   4368c:	80800015 	stw	r2,0(r16)
   43690:	9823883a 	mov	r17,r19
   43694:	003fcc06 	br	435c8 <__alt_data_end+0xfffd15c8>
   43698:	d8800204 	addi	r2,sp,8
   4369c:	d8800015 	stw	r2,0(sp)
   436a0:	d9c00104 	addi	r7,sp,4
   436a4:	900b883a 	mov	r5,r18
   436a8:	980d883a 	mov	r6,r19
   436ac:	e009883a 	mov	r4,fp
   436b0:	8820d53a 	srli	r16,r17,20
   436b4:	00478840 	call	47884 <__d2b>
   436b8:	d8800915 	stw	r2,36(sp)
   436bc:	8001651e 	bne	r16,zero,43c54 <_dtoa_r+0x700>
   436c0:	dd800217 	ldw	r22,8(sp)
   436c4:	dc000117 	ldw	r16,4(sp)
   436c8:	00800804 	movi	r2,32
   436cc:	b421883a 	add	r16,r22,r16
   436d0:	80c10c84 	addi	r3,r16,1074
   436d4:	10c2d10e 	bge	r2,r3,4421c <_dtoa_r+0xcc8>
   436d8:	00801004 	movi	r2,64
   436dc:	81010484 	addi	r4,r16,1042
   436e0:	10c7c83a 	sub	r3,r2,r3
   436e4:	9108d83a 	srl	r4,r18,r4
   436e8:	88e2983a 	sll	r17,r17,r3
   436ec:	2448b03a 	or	r4,r4,r17
   436f0:	004d56c0 	call	4d56c <__floatunsidf>
   436f4:	017f8434 	movhi	r5,65040
   436f8:	01800044 	movi	r6,1
   436fc:	1009883a 	mov	r4,r2
   43700:	194b883a 	add	r5,r3,r5
   43704:	843fffc4 	addi	r16,r16,-1
   43708:	d9801115 	stw	r6,68(sp)
   4370c:	000d883a 	mov	r6,zero
   43710:	01cffe34 	movhi	r7,16376
   43714:	004cb140 	call	4cb14 <__subdf3>
   43718:	0198dbf4 	movhi	r6,25455
   4371c:	01cff4f4 	movhi	r7,16339
   43720:	3190d844 	addi	r6,r6,17249
   43724:	39e1e9c4 	addi	r7,r7,-30809
   43728:	1009883a 	mov	r4,r2
   4372c:	180b883a 	mov	r5,r3
   43730:	004c3fc0 	call	4c3fc <__muldf3>
   43734:	01a2d874 	movhi	r6,35681
   43738:	01cff1f4 	movhi	r7,16327
   4373c:	31b22cc4 	addi	r6,r6,-14157
   43740:	39e28a04 	addi	r7,r7,-30168
   43744:	180b883a 	mov	r5,r3
   43748:	1009883a 	mov	r4,r2
   4374c:	004b0100 	call	4b010 <__adddf3>
   43750:	8009883a 	mov	r4,r16
   43754:	1029883a 	mov	r20,r2
   43758:	1823883a 	mov	r17,r3
   4375c:	004d4900 	call	4d490 <__floatsidf>
   43760:	019427f4 	movhi	r6,20639
   43764:	01cff4f4 	movhi	r7,16339
   43768:	319e7ec4 	addi	r6,r6,31227
   4376c:	39d104c4 	addi	r7,r7,17427
   43770:	1009883a 	mov	r4,r2
   43774:	180b883a 	mov	r5,r3
   43778:	004c3fc0 	call	4c3fc <__muldf3>
   4377c:	100d883a 	mov	r6,r2
   43780:	180f883a 	mov	r7,r3
   43784:	a009883a 	mov	r4,r20
   43788:	880b883a 	mov	r5,r17
   4378c:	004b0100 	call	4b010 <__adddf3>
   43790:	1009883a 	mov	r4,r2
   43794:	180b883a 	mov	r5,r3
   43798:	1029883a 	mov	r20,r2
   4379c:	1823883a 	mov	r17,r3
   437a0:	004d4100 	call	4d410 <__fixdfsi>
   437a4:	000d883a 	mov	r6,zero
   437a8:	000f883a 	mov	r7,zero
   437ac:	a009883a 	mov	r4,r20
   437b0:	880b883a 	mov	r5,r17
   437b4:	d8800515 	stw	r2,20(sp)
   437b8:	004c3080 	call	4c308 <__ledf2>
   437bc:	10028716 	blt	r2,zero,441dc <_dtoa_r+0xc88>
   437c0:	d8c00517 	ldw	r3,20(sp)
   437c4:	00800584 	movi	r2,22
   437c8:	10c27536 	bltu	r2,r3,441a0 <_dtoa_r+0xc4c>
   437cc:	180490fa 	slli	r2,r3,3
   437d0:	00c00174 	movhi	r3,5
   437d4:	18fff704 	addi	r3,r3,-36
   437d8:	1885883a 	add	r2,r3,r2
   437dc:	11000017 	ldw	r4,0(r2)
   437e0:	11400117 	ldw	r5,4(r2)
   437e4:	900d883a 	mov	r6,r18
   437e8:	980f883a 	mov	r7,r19
   437ec:	004c22c0 	call	4c22c <__gedf2>
   437f0:	00828d0e 	bge	zero,r2,44228 <_dtoa_r+0xcd4>
   437f4:	d9000517 	ldw	r4,20(sp)
   437f8:	d8000e15 	stw	zero,56(sp)
   437fc:	213fffc4 	addi	r4,r4,-1
   43800:	d9000515 	stw	r4,20(sp)
   43804:	b42dc83a 	sub	r22,r22,r16
   43808:	b5bfffc4 	addi	r22,r22,-1
   4380c:	b0026f16 	blt	r22,zero,441cc <_dtoa_r+0xc78>
   43810:	d8000815 	stw	zero,32(sp)
   43814:	d9c00517 	ldw	r7,20(sp)
   43818:	38026416 	blt	r7,zero,441ac <_dtoa_r+0xc58>
   4381c:	b1ed883a 	add	r22,r22,r7
   43820:	d9c00d15 	stw	r7,52(sp)
   43824:	d8000a15 	stw	zero,40(sp)
   43828:	d9800317 	ldw	r6,12(sp)
   4382c:	00800244 	movi	r2,9
   43830:	11811436 	bltu	r2,r6,43c84 <_dtoa_r+0x730>
   43834:	00800144 	movi	r2,5
   43838:	1184e10e 	bge	r2,r6,44bc0 <_dtoa_r+0x166c>
   4383c:	31bfff04 	addi	r6,r6,-4
   43840:	d9800315 	stw	r6,12(sp)
   43844:	0023883a 	mov	r17,zero
   43848:	d9800317 	ldw	r6,12(sp)
   4384c:	008000c4 	movi	r2,3
   43850:	30836726 	beq	r6,r2,445f0 <_dtoa_r+0x109c>
   43854:	1183410e 	bge	r2,r6,4455c <_dtoa_r+0x1008>
   43858:	d9c00317 	ldw	r7,12(sp)
   4385c:	00800104 	movi	r2,4
   43860:	38827c26 	beq	r7,r2,44254 <_dtoa_r+0xd00>
   43864:	00800144 	movi	r2,5
   43868:	3884c41e 	bne	r7,r2,44b7c <_dtoa_r+0x1628>
   4386c:	00800044 	movi	r2,1
   43870:	d8800b15 	stw	r2,44(sp)
   43874:	d8c00517 	ldw	r3,20(sp)
   43878:	d9002217 	ldw	r4,136(sp)
   4387c:	1907883a 	add	r3,r3,r4
   43880:	19800044 	addi	r6,r3,1
   43884:	d8c00c15 	stw	r3,48(sp)
   43888:	d9800615 	stw	r6,24(sp)
   4388c:	0183a40e 	bge	zero,r6,44720 <_dtoa_r+0x11cc>
   43890:	d9800617 	ldw	r6,24(sp)
   43894:	3021883a 	mov	r16,r6
   43898:	e0001115 	stw	zero,68(fp)
   4389c:	008005c4 	movi	r2,23
   438a0:	1184c92e 	bgeu	r2,r6,44bc8 <_dtoa_r+0x1674>
   438a4:	00c00044 	movi	r3,1
   438a8:	00800104 	movi	r2,4
   438ac:	1085883a 	add	r2,r2,r2
   438b0:	11000504 	addi	r4,r2,20
   438b4:	180b883a 	mov	r5,r3
   438b8:	18c00044 	addi	r3,r3,1
   438bc:	313ffb2e 	bgeu	r6,r4,438ac <__alt_data_end+0xfffd18ac>
   438c0:	e1401115 	stw	r5,68(fp)
   438c4:	e009883a 	mov	r4,fp
   438c8:	0046bf00 	call	46bf0 <_Balloc>
   438cc:	d8800715 	stw	r2,28(sp)
   438d0:	e0801015 	stw	r2,64(fp)
   438d4:	00800384 	movi	r2,14
   438d8:	1400f736 	bltu	r2,r16,43cb8 <_dtoa_r+0x764>
   438dc:	8800f626 	beq	r17,zero,43cb8 <_dtoa_r+0x764>
   438e0:	d9c00517 	ldw	r7,20(sp)
   438e4:	01c39a0e 	bge	zero,r7,44750 <_dtoa_r+0x11fc>
   438e8:	388003cc 	andi	r2,r7,15
   438ec:	100490fa 	slli	r2,r2,3
   438f0:	382bd13a 	srai	r21,r7,4
   438f4:	00c00174 	movhi	r3,5
   438f8:	18fff704 	addi	r3,r3,-36
   438fc:	1885883a 	add	r2,r3,r2
   43900:	a8c0040c 	andi	r3,r21,16
   43904:	12400017 	ldw	r9,0(r2)
   43908:	12000117 	ldw	r8,4(r2)
   4390c:	18037926 	beq	r3,zero,446f4 <_dtoa_r+0x11a0>
   43910:	00800174 	movhi	r2,5
   43914:	10bfed04 	addi	r2,r2,-76
   43918:	11800817 	ldw	r6,32(r2)
   4391c:	11c00917 	ldw	r7,36(r2)
   43920:	9009883a 	mov	r4,r18
   43924:	980b883a 	mov	r5,r19
   43928:	da001715 	stw	r8,92(sp)
   4392c:	da401615 	stw	r9,88(sp)
   43930:	004b8bc0 	call	4b8bc <__divdf3>
   43934:	da001717 	ldw	r8,92(sp)
   43938:	da401617 	ldw	r9,88(sp)
   4393c:	ad4003cc 	andi	r21,r21,15
   43940:	040000c4 	movi	r16,3
   43944:	1023883a 	mov	r17,r2
   43948:	1829883a 	mov	r20,r3
   4394c:	a8001126 	beq	r21,zero,43994 <_dtoa_r+0x440>
   43950:	05c00174 	movhi	r23,5
   43954:	bdffed04 	addi	r23,r23,-76
   43958:	4805883a 	mov	r2,r9
   4395c:	4007883a 	mov	r3,r8
   43960:	a980004c 	andi	r6,r21,1
   43964:	1009883a 	mov	r4,r2
   43968:	a82bd07a 	srai	r21,r21,1
   4396c:	180b883a 	mov	r5,r3
   43970:	30000426 	beq	r6,zero,43984 <_dtoa_r+0x430>
   43974:	b9800017 	ldw	r6,0(r23)
   43978:	b9c00117 	ldw	r7,4(r23)
   4397c:	84000044 	addi	r16,r16,1
   43980:	004c3fc0 	call	4c3fc <__muldf3>
   43984:	bdc00204 	addi	r23,r23,8
   43988:	a83ff51e 	bne	r21,zero,43960 <__alt_data_end+0xfffd1960>
   4398c:	1013883a 	mov	r9,r2
   43990:	1811883a 	mov	r8,r3
   43994:	480d883a 	mov	r6,r9
   43998:	400f883a 	mov	r7,r8
   4399c:	8809883a 	mov	r4,r17
   439a0:	a00b883a 	mov	r5,r20
   439a4:	004b8bc0 	call	4b8bc <__divdf3>
   439a8:	d8800f15 	stw	r2,60(sp)
   439ac:	d8c01015 	stw	r3,64(sp)
   439b0:	d8c00e17 	ldw	r3,56(sp)
   439b4:	18000626 	beq	r3,zero,439d0 <_dtoa_r+0x47c>
   439b8:	d9000f17 	ldw	r4,60(sp)
   439bc:	d9401017 	ldw	r5,64(sp)
   439c0:	000d883a 	mov	r6,zero
   439c4:	01cffc34 	movhi	r7,16368
   439c8:	004c3080 	call	4c308 <__ledf2>
   439cc:	10040b16 	blt	r2,zero,449fc <_dtoa_r+0x14a8>
   439d0:	8009883a 	mov	r4,r16
   439d4:	004d4900 	call	4d490 <__floatsidf>
   439d8:	d9800f17 	ldw	r6,60(sp)
   439dc:	d9c01017 	ldw	r7,64(sp)
   439e0:	1009883a 	mov	r4,r2
   439e4:	180b883a 	mov	r5,r3
   439e8:	004c3fc0 	call	4c3fc <__muldf3>
   439ec:	000d883a 	mov	r6,zero
   439f0:	01d00734 	movhi	r7,16412
   439f4:	1009883a 	mov	r4,r2
   439f8:	180b883a 	mov	r5,r3
   439fc:	004b0100 	call	4b010 <__adddf3>
   43a00:	1021883a 	mov	r16,r2
   43a04:	d8800617 	ldw	r2,24(sp)
   43a08:	047f3034 	movhi	r17,64704
   43a0c:	1c63883a 	add	r17,r3,r17
   43a10:	10031826 	beq	r2,zero,44674 <_dtoa_r+0x1120>
   43a14:	d8c00517 	ldw	r3,20(sp)
   43a18:	db000617 	ldw	r12,24(sp)
   43a1c:	d8c01315 	stw	r3,76(sp)
   43a20:	d9000b17 	ldw	r4,44(sp)
   43a24:	20038f26 	beq	r4,zero,44864 <_dtoa_r+0x1310>
   43a28:	60bfffc4 	addi	r2,r12,-1
   43a2c:	100490fa 	slli	r2,r2,3
   43a30:	00c00174 	movhi	r3,5
   43a34:	18fff704 	addi	r3,r3,-36
   43a38:	1885883a 	add	r2,r3,r2
   43a3c:	11800017 	ldw	r6,0(r2)
   43a40:	11c00117 	ldw	r7,4(r2)
   43a44:	d8800717 	ldw	r2,28(sp)
   43a48:	0009883a 	mov	r4,zero
   43a4c:	014ff834 	movhi	r5,16352
   43a50:	db001615 	stw	r12,88(sp)
   43a54:	15c00044 	addi	r23,r2,1
   43a58:	004b8bc0 	call	4b8bc <__divdf3>
   43a5c:	800d883a 	mov	r6,r16
   43a60:	880f883a 	mov	r7,r17
   43a64:	1009883a 	mov	r4,r2
   43a68:	180b883a 	mov	r5,r3
   43a6c:	004cb140 	call	4cb14 <__subdf3>
   43a70:	d9401017 	ldw	r5,64(sp)
   43a74:	d9000f17 	ldw	r4,60(sp)
   43a78:	102b883a 	mov	r21,r2
   43a7c:	d8c01215 	stw	r3,72(sp)
   43a80:	004d4100 	call	4d410 <__fixdfsi>
   43a84:	1009883a 	mov	r4,r2
   43a88:	1029883a 	mov	r20,r2
   43a8c:	004d4900 	call	4d490 <__floatsidf>
   43a90:	d9000f17 	ldw	r4,60(sp)
   43a94:	d9401017 	ldw	r5,64(sp)
   43a98:	100d883a 	mov	r6,r2
   43a9c:	180f883a 	mov	r7,r3
   43aa0:	004cb140 	call	4cb14 <__subdf3>
   43aa4:	1823883a 	mov	r17,r3
   43aa8:	d8c00717 	ldw	r3,28(sp)
   43aac:	d9401217 	ldw	r5,72(sp)
   43ab0:	a2000c04 	addi	r8,r20,48
   43ab4:	1021883a 	mov	r16,r2
   43ab8:	1a000005 	stb	r8,0(r3)
   43abc:	800d883a 	mov	r6,r16
   43ac0:	880f883a 	mov	r7,r17
   43ac4:	a809883a 	mov	r4,r21
   43ac8:	4029883a 	mov	r20,r8
   43acc:	004c22c0 	call	4c22c <__gedf2>
   43ad0:	00841d16 	blt	zero,r2,44b48 <_dtoa_r+0x15f4>
   43ad4:	800d883a 	mov	r6,r16
   43ad8:	880f883a 	mov	r7,r17
   43adc:	0009883a 	mov	r4,zero
   43ae0:	014ffc34 	movhi	r5,16368
   43ae4:	004cb140 	call	4cb14 <__subdf3>
   43ae8:	d9401217 	ldw	r5,72(sp)
   43aec:	100d883a 	mov	r6,r2
   43af0:	180f883a 	mov	r7,r3
   43af4:	a809883a 	mov	r4,r21
   43af8:	004c22c0 	call	4c22c <__gedf2>
   43afc:	db001617 	ldw	r12,88(sp)
   43b00:	00840e16 	blt	zero,r2,44b3c <_dtoa_r+0x15e8>
   43b04:	00800044 	movi	r2,1
   43b08:	13006b0e 	bge	r2,r12,43cb8 <_dtoa_r+0x764>
   43b0c:	d9000717 	ldw	r4,28(sp)
   43b10:	dd800f15 	stw	r22,60(sp)
   43b14:	dcc01015 	stw	r19,64(sp)
   43b18:	2319883a 	add	r12,r4,r12
   43b1c:	dcc01217 	ldw	r19,72(sp)
   43b20:	602d883a 	mov	r22,r12
   43b24:	dc801215 	stw	r18,72(sp)
   43b28:	b825883a 	mov	r18,r23
   43b2c:	00000906 	br	43b54 <_dtoa_r+0x600>
   43b30:	004cb140 	call	4cb14 <__subdf3>
   43b34:	a80d883a 	mov	r6,r21
   43b38:	980f883a 	mov	r7,r19
   43b3c:	1009883a 	mov	r4,r2
   43b40:	180b883a 	mov	r5,r3
   43b44:	004c3080 	call	4c308 <__ledf2>
   43b48:	1003e816 	blt	r2,zero,44aec <_dtoa_r+0x1598>
   43b4c:	b825883a 	mov	r18,r23
   43b50:	bd83e926 	beq	r23,r22,44af8 <_dtoa_r+0x15a4>
   43b54:	a809883a 	mov	r4,r21
   43b58:	980b883a 	mov	r5,r19
   43b5c:	000d883a 	mov	r6,zero
   43b60:	01d00934 	movhi	r7,16420
   43b64:	004c3fc0 	call	4c3fc <__muldf3>
   43b68:	000d883a 	mov	r6,zero
   43b6c:	01d00934 	movhi	r7,16420
   43b70:	8009883a 	mov	r4,r16
   43b74:	880b883a 	mov	r5,r17
   43b78:	102b883a 	mov	r21,r2
   43b7c:	1827883a 	mov	r19,r3
   43b80:	004c3fc0 	call	4c3fc <__muldf3>
   43b84:	180b883a 	mov	r5,r3
   43b88:	1009883a 	mov	r4,r2
   43b8c:	1821883a 	mov	r16,r3
   43b90:	1023883a 	mov	r17,r2
   43b94:	004d4100 	call	4d410 <__fixdfsi>
   43b98:	1009883a 	mov	r4,r2
   43b9c:	1029883a 	mov	r20,r2
   43ba0:	004d4900 	call	4d490 <__floatsidf>
   43ba4:	8809883a 	mov	r4,r17
   43ba8:	800b883a 	mov	r5,r16
   43bac:	100d883a 	mov	r6,r2
   43bb0:	180f883a 	mov	r7,r3
   43bb4:	004cb140 	call	4cb14 <__subdf3>
   43bb8:	a5000c04 	addi	r20,r20,48
   43bbc:	a80d883a 	mov	r6,r21
   43bc0:	980f883a 	mov	r7,r19
   43bc4:	1009883a 	mov	r4,r2
   43bc8:	180b883a 	mov	r5,r3
   43bcc:	95000005 	stb	r20,0(r18)
   43bd0:	1021883a 	mov	r16,r2
   43bd4:	1823883a 	mov	r17,r3
   43bd8:	004c3080 	call	4c308 <__ledf2>
   43bdc:	bdc00044 	addi	r23,r23,1
   43be0:	800d883a 	mov	r6,r16
   43be4:	880f883a 	mov	r7,r17
   43be8:	0009883a 	mov	r4,zero
   43bec:	014ffc34 	movhi	r5,16368
   43bf0:	103fcf0e 	bge	r2,zero,43b30 <__alt_data_end+0xfffd1b30>
   43bf4:	d8c01317 	ldw	r3,76(sp)
   43bf8:	d8c00515 	stw	r3,20(sp)
   43bfc:	d9400917 	ldw	r5,36(sp)
   43c00:	e009883a 	mov	r4,fp
   43c04:	0046c980 	call	46c98 <_Bfree>
   43c08:	d9000517 	ldw	r4,20(sp)
   43c0c:	d9802317 	ldw	r6,140(sp)
   43c10:	d9c02517 	ldw	r7,148(sp)
   43c14:	b8000005 	stb	zero,0(r23)
   43c18:	20800044 	addi	r2,r4,1
   43c1c:	30800015 	stw	r2,0(r6)
   43c20:	3802aa26 	beq	r7,zero,446cc <_dtoa_r+0x1178>
   43c24:	3dc00015 	stw	r23,0(r7)
   43c28:	d8800717 	ldw	r2,28(sp)
   43c2c:	003e7906 	br	43614 <__alt_data_end+0xfffd1614>
   43c30:	00800434 	movhi	r2,16
   43c34:	10bfffc4 	addi	r2,r2,-1
   43c38:	88a2703a 	and	r17,r17,r2
   43c3c:	883e851e 	bne	r17,zero,43654 <__alt_data_end+0xfffd1654>
   43c40:	00800174 	movhi	r2,5
   43c44:	10bfd904 	addi	r2,r2,-156
   43c48:	003e8406 	br	4365c <__alt_data_end+0xfffd165c>
   43c4c:	10c00204 	addi	r3,r2,8
   43c50:	003e8706 	br	43670 <__alt_data_end+0xfffd1670>
   43c54:	01400434 	movhi	r5,16
   43c58:	297fffc4 	addi	r5,r5,-1
   43c5c:	994a703a 	and	r5,r19,r5
   43c60:	9009883a 	mov	r4,r18
   43c64:	843f0044 	addi	r16,r16,-1023
   43c68:	294ffc34 	orhi	r5,r5,16368
   43c6c:	dd800217 	ldw	r22,8(sp)
   43c70:	d8001115 	stw	zero,68(sp)
   43c74:	003ea506 	br	4370c <__alt_data_end+0xfffd170c>
   43c78:	00800174 	movhi	r2,5
   43c7c:	10bfd004 	addi	r2,r2,-192
   43c80:	003e6406 	br	43614 <__alt_data_end+0xfffd1614>
   43c84:	e0001115 	stw	zero,68(fp)
   43c88:	000b883a 	mov	r5,zero
   43c8c:	e009883a 	mov	r4,fp
   43c90:	0046bf00 	call	46bf0 <_Balloc>
   43c94:	01bfffc4 	movi	r6,-1
   43c98:	01c00044 	movi	r7,1
   43c9c:	d8800715 	stw	r2,28(sp)
   43ca0:	d9800c15 	stw	r6,48(sp)
   43ca4:	e0801015 	stw	r2,64(fp)
   43ca8:	d8000315 	stw	zero,12(sp)
   43cac:	d9c00b15 	stw	r7,44(sp)
   43cb0:	d9800615 	stw	r6,24(sp)
   43cb4:	d8002215 	stw	zero,136(sp)
   43cb8:	d8800117 	ldw	r2,4(sp)
   43cbc:	10008916 	blt	r2,zero,43ee4 <_dtoa_r+0x990>
   43cc0:	d9000517 	ldw	r4,20(sp)
   43cc4:	00c00384 	movi	r3,14
   43cc8:	19008616 	blt	r3,r4,43ee4 <_dtoa_r+0x990>
   43ccc:	200490fa 	slli	r2,r4,3
   43cd0:	00c00174 	movhi	r3,5
   43cd4:	d9802217 	ldw	r6,136(sp)
   43cd8:	18fff704 	addi	r3,r3,-36
   43cdc:	1885883a 	add	r2,r3,r2
   43ce0:	14000017 	ldw	r16,0(r2)
   43ce4:	14400117 	ldw	r17,4(r2)
   43ce8:	30016316 	blt	r6,zero,44278 <_dtoa_r+0xd24>
   43cec:	800d883a 	mov	r6,r16
   43cf0:	880f883a 	mov	r7,r17
   43cf4:	9009883a 	mov	r4,r18
   43cf8:	980b883a 	mov	r5,r19
   43cfc:	004b8bc0 	call	4b8bc <__divdf3>
   43d00:	180b883a 	mov	r5,r3
   43d04:	1009883a 	mov	r4,r2
   43d08:	004d4100 	call	4d410 <__fixdfsi>
   43d0c:	1009883a 	mov	r4,r2
   43d10:	102b883a 	mov	r21,r2
   43d14:	004d4900 	call	4d490 <__floatsidf>
   43d18:	800d883a 	mov	r6,r16
   43d1c:	880f883a 	mov	r7,r17
   43d20:	1009883a 	mov	r4,r2
   43d24:	180b883a 	mov	r5,r3
   43d28:	004c3fc0 	call	4c3fc <__muldf3>
   43d2c:	100d883a 	mov	r6,r2
   43d30:	180f883a 	mov	r7,r3
   43d34:	9009883a 	mov	r4,r18
   43d38:	980b883a 	mov	r5,r19
   43d3c:	004cb140 	call	4cb14 <__subdf3>
   43d40:	d9c00717 	ldw	r7,28(sp)
   43d44:	1009883a 	mov	r4,r2
   43d48:	a8800c04 	addi	r2,r21,48
   43d4c:	38800005 	stb	r2,0(r7)
   43d50:	3dc00044 	addi	r23,r7,1
   43d54:	d9c00617 	ldw	r7,24(sp)
   43d58:	01800044 	movi	r6,1
   43d5c:	180b883a 	mov	r5,r3
   43d60:	2005883a 	mov	r2,r4
   43d64:	39803826 	beq	r7,r6,43e48 <_dtoa_r+0x8f4>
   43d68:	000d883a 	mov	r6,zero
   43d6c:	01d00934 	movhi	r7,16420
   43d70:	004c3fc0 	call	4c3fc <__muldf3>
   43d74:	000d883a 	mov	r6,zero
   43d78:	000f883a 	mov	r7,zero
   43d7c:	1009883a 	mov	r4,r2
   43d80:	180b883a 	mov	r5,r3
   43d84:	1025883a 	mov	r18,r2
   43d88:	1827883a 	mov	r19,r3
   43d8c:	004c1a40 	call	4c1a4 <__eqdf2>
   43d90:	103f9a26 	beq	r2,zero,43bfc <__alt_data_end+0xfffd1bfc>
   43d94:	d9c00617 	ldw	r7,24(sp)
   43d98:	d8c00717 	ldw	r3,28(sp)
   43d9c:	b829883a 	mov	r20,r23
   43da0:	38bfffc4 	addi	r2,r7,-1
   43da4:	18ad883a 	add	r22,r3,r2
   43da8:	00000a06 	br	43dd4 <_dtoa_r+0x880>
   43dac:	004c3fc0 	call	4c3fc <__muldf3>
   43db0:	000d883a 	mov	r6,zero
   43db4:	000f883a 	mov	r7,zero
   43db8:	1009883a 	mov	r4,r2
   43dbc:	180b883a 	mov	r5,r3
   43dc0:	1025883a 	mov	r18,r2
   43dc4:	1827883a 	mov	r19,r3
   43dc8:	b829883a 	mov	r20,r23
   43dcc:	004c1a40 	call	4c1a4 <__eqdf2>
   43dd0:	103f8a26 	beq	r2,zero,43bfc <__alt_data_end+0xfffd1bfc>
   43dd4:	800d883a 	mov	r6,r16
   43dd8:	880f883a 	mov	r7,r17
   43ddc:	9009883a 	mov	r4,r18
   43de0:	980b883a 	mov	r5,r19
   43de4:	004b8bc0 	call	4b8bc <__divdf3>
   43de8:	180b883a 	mov	r5,r3
   43dec:	1009883a 	mov	r4,r2
   43df0:	004d4100 	call	4d410 <__fixdfsi>
   43df4:	1009883a 	mov	r4,r2
   43df8:	102b883a 	mov	r21,r2
   43dfc:	004d4900 	call	4d490 <__floatsidf>
   43e00:	800d883a 	mov	r6,r16
   43e04:	880f883a 	mov	r7,r17
   43e08:	1009883a 	mov	r4,r2
   43e0c:	180b883a 	mov	r5,r3
   43e10:	004c3fc0 	call	4c3fc <__muldf3>
   43e14:	100d883a 	mov	r6,r2
   43e18:	180f883a 	mov	r7,r3
   43e1c:	9009883a 	mov	r4,r18
   43e20:	980b883a 	mov	r5,r19
   43e24:	004cb140 	call	4cb14 <__subdf3>
   43e28:	aa000c04 	addi	r8,r21,48
   43e2c:	a2000005 	stb	r8,0(r20)
   43e30:	000d883a 	mov	r6,zero
   43e34:	01d00934 	movhi	r7,16420
   43e38:	1009883a 	mov	r4,r2
   43e3c:	180b883a 	mov	r5,r3
   43e40:	a5c00044 	addi	r23,r20,1
   43e44:	b53fd91e 	bne	r22,r20,43dac <__alt_data_end+0xfffd1dac>
   43e48:	100d883a 	mov	r6,r2
   43e4c:	180f883a 	mov	r7,r3
   43e50:	1009883a 	mov	r4,r2
   43e54:	180b883a 	mov	r5,r3
   43e58:	004b0100 	call	4b010 <__adddf3>
   43e5c:	100d883a 	mov	r6,r2
   43e60:	180f883a 	mov	r7,r3
   43e64:	8009883a 	mov	r4,r16
   43e68:	880b883a 	mov	r5,r17
   43e6c:	1027883a 	mov	r19,r2
   43e70:	1825883a 	mov	r18,r3
   43e74:	004c3080 	call	4c308 <__ledf2>
   43e78:	10000816 	blt	r2,zero,43e9c <_dtoa_r+0x948>
   43e7c:	980d883a 	mov	r6,r19
   43e80:	900f883a 	mov	r7,r18
   43e84:	8009883a 	mov	r4,r16
   43e88:	880b883a 	mov	r5,r17
   43e8c:	004c1a40 	call	4c1a4 <__eqdf2>
   43e90:	103f5a1e 	bne	r2,zero,43bfc <__alt_data_end+0xfffd1bfc>
   43e94:	ad40004c 	andi	r21,r21,1
   43e98:	a83f5826 	beq	r21,zero,43bfc <__alt_data_end+0xfffd1bfc>
   43e9c:	bd3fffc3 	ldbu	r20,-1(r23)
   43ea0:	b8bfffc4 	addi	r2,r23,-1
   43ea4:	1007883a 	mov	r3,r2
   43ea8:	01400e44 	movi	r5,57
   43eac:	d9800717 	ldw	r6,28(sp)
   43eb0:	00000506 	br	43ec8 <_dtoa_r+0x974>
   43eb4:	18ffffc4 	addi	r3,r3,-1
   43eb8:	11824726 	beq	r2,r6,447d8 <_dtoa_r+0x1284>
   43ebc:	1d000003 	ldbu	r20,0(r3)
   43ec0:	102f883a 	mov	r23,r2
   43ec4:	10bfffc4 	addi	r2,r2,-1
   43ec8:	a1003fcc 	andi	r4,r20,255
   43ecc:	2100201c 	xori	r4,r4,128
   43ed0:	213fe004 	addi	r4,r4,-128
   43ed4:	217ff726 	beq	r4,r5,43eb4 <__alt_data_end+0xfffd1eb4>
   43ed8:	a2000044 	addi	r8,r20,1
   43edc:	12000005 	stb	r8,0(r2)
   43ee0:	003f4606 	br	43bfc <__alt_data_end+0xfffd1bfc>
   43ee4:	d9000b17 	ldw	r4,44(sp)
   43ee8:	2000c826 	beq	r4,zero,4420c <_dtoa_r+0xcb8>
   43eec:	d9800317 	ldw	r6,12(sp)
   43ef0:	00c00044 	movi	r3,1
   43ef4:	1980f90e 	bge	r3,r6,442dc <_dtoa_r+0xd88>
   43ef8:	d8800617 	ldw	r2,24(sp)
   43efc:	d8c00a17 	ldw	r3,40(sp)
   43f00:	157fffc4 	addi	r21,r2,-1
   43f04:	1d41f316 	blt	r3,r21,446d4 <_dtoa_r+0x1180>
   43f08:	1d6bc83a 	sub	r21,r3,r21
   43f0c:	d9c00617 	ldw	r7,24(sp)
   43f10:	3802aa16 	blt	r7,zero,449bc <_dtoa_r+0x1468>
   43f14:	dd000817 	ldw	r20,32(sp)
   43f18:	d8800617 	ldw	r2,24(sp)
   43f1c:	d8c00817 	ldw	r3,32(sp)
   43f20:	01400044 	movi	r5,1
   43f24:	e009883a 	mov	r4,fp
   43f28:	1887883a 	add	r3,r3,r2
   43f2c:	d8c00815 	stw	r3,32(sp)
   43f30:	b0ad883a 	add	r22,r22,r2
   43f34:	0046ffc0 	call	46ffc <__i2b>
   43f38:	1023883a 	mov	r17,r2
   43f3c:	a0000826 	beq	r20,zero,43f60 <_dtoa_r+0xa0c>
   43f40:	0580070e 	bge	zero,r22,43f60 <_dtoa_r+0xa0c>
   43f44:	a005883a 	mov	r2,r20
   43f48:	b500b916 	blt	r22,r20,44230 <_dtoa_r+0xcdc>
   43f4c:	d9000817 	ldw	r4,32(sp)
   43f50:	a0a9c83a 	sub	r20,r20,r2
   43f54:	b0adc83a 	sub	r22,r22,r2
   43f58:	2089c83a 	sub	r4,r4,r2
   43f5c:	d9000815 	stw	r4,32(sp)
   43f60:	d9800a17 	ldw	r6,40(sp)
   43f64:	0181810e 	bge	zero,r6,4456c <_dtoa_r+0x1018>
   43f68:	d9c00b17 	ldw	r7,44(sp)
   43f6c:	3800b326 	beq	r7,zero,4423c <_dtoa_r+0xce8>
   43f70:	a800b226 	beq	r21,zero,4423c <_dtoa_r+0xce8>
   43f74:	880b883a 	mov	r5,r17
   43f78:	a80d883a 	mov	r6,r21
   43f7c:	e009883a 	mov	r4,fp
   43f80:	00472300 	call	47230 <__pow5mult>
   43f84:	d9800917 	ldw	r6,36(sp)
   43f88:	100b883a 	mov	r5,r2
   43f8c:	e009883a 	mov	r4,fp
   43f90:	1023883a 	mov	r17,r2
   43f94:	00470380 	call	47038 <__multiply>
   43f98:	1021883a 	mov	r16,r2
   43f9c:	d8800a17 	ldw	r2,40(sp)
   43fa0:	d9400917 	ldw	r5,36(sp)
   43fa4:	e009883a 	mov	r4,fp
   43fa8:	1545c83a 	sub	r2,r2,r21
   43fac:	d8800a15 	stw	r2,40(sp)
   43fb0:	0046c980 	call	46c98 <_Bfree>
   43fb4:	d8c00a17 	ldw	r3,40(sp)
   43fb8:	18009f1e 	bne	r3,zero,44238 <_dtoa_r+0xce4>
   43fbc:	05c00044 	movi	r23,1
   43fc0:	e009883a 	mov	r4,fp
   43fc4:	b80b883a 	mov	r5,r23
   43fc8:	0046ffc0 	call	46ffc <__i2b>
   43fcc:	d9000d17 	ldw	r4,52(sp)
   43fd0:	102b883a 	mov	r21,r2
   43fd4:	2000ce26 	beq	r4,zero,44310 <_dtoa_r+0xdbc>
   43fd8:	200d883a 	mov	r6,r4
   43fdc:	100b883a 	mov	r5,r2
   43fe0:	e009883a 	mov	r4,fp
   43fe4:	00472300 	call	47230 <__pow5mult>
   43fe8:	d9800317 	ldw	r6,12(sp)
   43fec:	102b883a 	mov	r21,r2
   43ff0:	b981810e 	bge	r23,r6,445f8 <_dtoa_r+0x10a4>
   43ff4:	0027883a 	mov	r19,zero
   43ff8:	a8800417 	ldw	r2,16(r21)
   43ffc:	05c00804 	movi	r23,32
   44000:	10800104 	addi	r2,r2,4
   44004:	1085883a 	add	r2,r2,r2
   44008:	1085883a 	add	r2,r2,r2
   4400c:	a885883a 	add	r2,r21,r2
   44010:	11000017 	ldw	r4,0(r2)
   44014:	0046ee40 	call	46ee4 <__hi0bits>
   44018:	b885c83a 	sub	r2,r23,r2
   4401c:	1585883a 	add	r2,r2,r22
   44020:	108007cc 	andi	r2,r2,31
   44024:	1000b326 	beq	r2,zero,442f4 <_dtoa_r+0xda0>
   44028:	00c00804 	movi	r3,32
   4402c:	1887c83a 	sub	r3,r3,r2
   44030:	01000104 	movi	r4,4
   44034:	20c2cd0e 	bge	r4,r3,44b6c <_dtoa_r+0x1618>
   44038:	00c00704 	movi	r3,28
   4403c:	1885c83a 	sub	r2,r3,r2
   44040:	d8c00817 	ldw	r3,32(sp)
   44044:	a0a9883a 	add	r20,r20,r2
   44048:	b0ad883a 	add	r22,r22,r2
   4404c:	1887883a 	add	r3,r3,r2
   44050:	d8c00815 	stw	r3,32(sp)
   44054:	d9800817 	ldw	r6,32(sp)
   44058:	0180040e 	bge	zero,r6,4406c <_dtoa_r+0xb18>
   4405c:	800b883a 	mov	r5,r16
   44060:	e009883a 	mov	r4,fp
   44064:	00473700 	call	47370 <__lshift>
   44068:	1021883a 	mov	r16,r2
   4406c:	0580050e 	bge	zero,r22,44084 <_dtoa_r+0xb30>
   44070:	a80b883a 	mov	r5,r21
   44074:	b00d883a 	mov	r6,r22
   44078:	e009883a 	mov	r4,fp
   4407c:	00473700 	call	47370 <__lshift>
   44080:	102b883a 	mov	r21,r2
   44084:	d9c00e17 	ldw	r7,56(sp)
   44088:	3801211e 	bne	r7,zero,44510 <_dtoa_r+0xfbc>
   4408c:	d9800617 	ldw	r6,24(sp)
   44090:	0181380e 	bge	zero,r6,44574 <_dtoa_r+0x1020>
   44094:	d8c00b17 	ldw	r3,44(sp)
   44098:	1800ab1e 	bne	r3,zero,44348 <_dtoa_r+0xdf4>
   4409c:	dc800717 	ldw	r18,28(sp)
   440a0:	dcc00617 	ldw	r19,24(sp)
   440a4:	9029883a 	mov	r20,r18
   440a8:	00000206 	br	440b4 <_dtoa_r+0xb60>
   440ac:	0046cc00 	call	46cc0 <__multadd>
   440b0:	1021883a 	mov	r16,r2
   440b4:	a80b883a 	mov	r5,r21
   440b8:	8009883a 	mov	r4,r16
   440bc:	00433540 	call	43354 <quorem>
   440c0:	10800c04 	addi	r2,r2,48
   440c4:	90800005 	stb	r2,0(r18)
   440c8:	94800044 	addi	r18,r18,1
   440cc:	9507c83a 	sub	r3,r18,r20
   440d0:	000f883a 	mov	r7,zero
   440d4:	01800284 	movi	r6,10
   440d8:	800b883a 	mov	r5,r16
   440dc:	e009883a 	mov	r4,fp
   440e0:	1cfff216 	blt	r3,r19,440ac <__alt_data_end+0xfffd20ac>
   440e4:	1011883a 	mov	r8,r2
   440e8:	d8800617 	ldw	r2,24(sp)
   440ec:	0082370e 	bge	zero,r2,449cc <_dtoa_r+0x1478>
   440f0:	d9000717 	ldw	r4,28(sp)
   440f4:	0025883a 	mov	r18,zero
   440f8:	20af883a 	add	r23,r4,r2
   440fc:	01800044 	movi	r6,1
   44100:	800b883a 	mov	r5,r16
   44104:	e009883a 	mov	r4,fp
   44108:	da001715 	stw	r8,92(sp)
   4410c:	00473700 	call	47370 <__lshift>
   44110:	a80b883a 	mov	r5,r21
   44114:	1009883a 	mov	r4,r2
   44118:	d8800915 	stw	r2,36(sp)
   4411c:	00474b80 	call	474b8 <__mcmp>
   44120:	da001717 	ldw	r8,92(sp)
   44124:	0081800e 	bge	zero,r2,44728 <_dtoa_r+0x11d4>
   44128:	b93fffc3 	ldbu	r4,-1(r23)
   4412c:	b8bfffc4 	addi	r2,r23,-1
   44130:	1007883a 	mov	r3,r2
   44134:	01800e44 	movi	r6,57
   44138:	d9c00717 	ldw	r7,28(sp)
   4413c:	00000506 	br	44154 <_dtoa_r+0xc00>
   44140:	18ffffc4 	addi	r3,r3,-1
   44144:	11c12326 	beq	r2,r7,445d4 <_dtoa_r+0x1080>
   44148:	19000003 	ldbu	r4,0(r3)
   4414c:	102f883a 	mov	r23,r2
   44150:	10bfffc4 	addi	r2,r2,-1
   44154:	21403fcc 	andi	r5,r4,255
   44158:	2940201c 	xori	r5,r5,128
   4415c:	297fe004 	addi	r5,r5,-128
   44160:	29bff726 	beq	r5,r6,44140 <__alt_data_end+0xfffd2140>
   44164:	21000044 	addi	r4,r4,1
   44168:	11000005 	stb	r4,0(r2)
   4416c:	a80b883a 	mov	r5,r21
   44170:	e009883a 	mov	r4,fp
   44174:	0046c980 	call	46c98 <_Bfree>
   44178:	883ea026 	beq	r17,zero,43bfc <__alt_data_end+0xfffd1bfc>
   4417c:	90000426 	beq	r18,zero,44190 <_dtoa_r+0xc3c>
   44180:	94400326 	beq	r18,r17,44190 <_dtoa_r+0xc3c>
   44184:	900b883a 	mov	r5,r18
   44188:	e009883a 	mov	r4,fp
   4418c:	0046c980 	call	46c98 <_Bfree>
   44190:	880b883a 	mov	r5,r17
   44194:	e009883a 	mov	r4,fp
   44198:	0046c980 	call	46c98 <_Bfree>
   4419c:	003e9706 	br	43bfc <__alt_data_end+0xfffd1bfc>
   441a0:	01800044 	movi	r6,1
   441a4:	d9800e15 	stw	r6,56(sp)
   441a8:	003d9606 	br	43804 <__alt_data_end+0xfffd1804>
   441ac:	d8800817 	ldw	r2,32(sp)
   441b0:	d8c00517 	ldw	r3,20(sp)
   441b4:	d8000d15 	stw	zero,52(sp)
   441b8:	10c5c83a 	sub	r2,r2,r3
   441bc:	00c9c83a 	sub	r4,zero,r3
   441c0:	d8800815 	stw	r2,32(sp)
   441c4:	d9000a15 	stw	r4,40(sp)
   441c8:	003d9706 	br	43828 <__alt_data_end+0xfffd1828>
   441cc:	05adc83a 	sub	r22,zero,r22
   441d0:	dd800815 	stw	r22,32(sp)
   441d4:	002d883a 	mov	r22,zero
   441d8:	003d8e06 	br	43814 <__alt_data_end+0xfffd1814>
   441dc:	d9000517 	ldw	r4,20(sp)
   441e0:	004d4900 	call	4d490 <__floatsidf>
   441e4:	100d883a 	mov	r6,r2
   441e8:	180f883a 	mov	r7,r3
   441ec:	a009883a 	mov	r4,r20
   441f0:	880b883a 	mov	r5,r17
   441f4:	004c1a40 	call	4c1a4 <__eqdf2>
   441f8:	103d7126 	beq	r2,zero,437c0 <__alt_data_end+0xfffd17c0>
   441fc:	d9c00517 	ldw	r7,20(sp)
   44200:	39ffffc4 	addi	r7,r7,-1
   44204:	d9c00515 	stw	r7,20(sp)
   44208:	003d6d06 	br	437c0 <__alt_data_end+0xfffd17c0>
   4420c:	dd400a17 	ldw	r21,40(sp)
   44210:	dd000817 	ldw	r20,32(sp)
   44214:	0023883a 	mov	r17,zero
   44218:	003f4806 	br	43f3c <__alt_data_end+0xfffd1f3c>
   4421c:	10e3c83a 	sub	r17,r2,r3
   44220:	9448983a 	sll	r4,r18,r17
   44224:	003d3206 	br	436f0 <__alt_data_end+0xfffd16f0>
   44228:	d8000e15 	stw	zero,56(sp)
   4422c:	003d7506 	br	43804 <__alt_data_end+0xfffd1804>
   44230:	b005883a 	mov	r2,r22
   44234:	003f4506 	br	43f4c <__alt_data_end+0xfffd1f4c>
   44238:	dc000915 	stw	r16,36(sp)
   4423c:	d9800a17 	ldw	r6,40(sp)
   44240:	d9400917 	ldw	r5,36(sp)
   44244:	e009883a 	mov	r4,fp
   44248:	00472300 	call	47230 <__pow5mult>
   4424c:	1021883a 	mov	r16,r2
   44250:	003f5a06 	br	43fbc <__alt_data_end+0xfffd1fbc>
   44254:	01c00044 	movi	r7,1
   44258:	d9c00b15 	stw	r7,44(sp)
   4425c:	d8802217 	ldw	r2,136(sp)
   44260:	0081280e 	bge	zero,r2,44704 <_dtoa_r+0x11b0>
   44264:	100d883a 	mov	r6,r2
   44268:	1021883a 	mov	r16,r2
   4426c:	d8800c15 	stw	r2,48(sp)
   44270:	d8800615 	stw	r2,24(sp)
   44274:	003d8806 	br	43898 <__alt_data_end+0xfffd1898>
   44278:	d8800617 	ldw	r2,24(sp)
   4427c:	00be9b16 	blt	zero,r2,43cec <__alt_data_end+0xfffd1cec>
   44280:	10010f1e 	bne	r2,zero,446c0 <_dtoa_r+0x116c>
   44284:	880b883a 	mov	r5,r17
   44288:	000d883a 	mov	r6,zero
   4428c:	01d00534 	movhi	r7,16404
   44290:	8009883a 	mov	r4,r16
   44294:	004c3fc0 	call	4c3fc <__muldf3>
   44298:	900d883a 	mov	r6,r18
   4429c:	980f883a 	mov	r7,r19
   442a0:	1009883a 	mov	r4,r2
   442a4:	180b883a 	mov	r5,r3
   442a8:	004c22c0 	call	4c22c <__gedf2>
   442ac:	002b883a 	mov	r21,zero
   442b0:	0023883a 	mov	r17,zero
   442b4:	1000bf16 	blt	r2,zero,445b4 <_dtoa_r+0x1060>
   442b8:	d9802217 	ldw	r6,136(sp)
   442bc:	ddc00717 	ldw	r23,28(sp)
   442c0:	018c303a 	nor	r6,zero,r6
   442c4:	d9800515 	stw	r6,20(sp)
   442c8:	a80b883a 	mov	r5,r21
   442cc:	e009883a 	mov	r4,fp
   442d0:	0046c980 	call	46c98 <_Bfree>
   442d4:	883e4926 	beq	r17,zero,43bfc <__alt_data_end+0xfffd1bfc>
   442d8:	003fad06 	br	44190 <__alt_data_end+0xfffd2190>
   442dc:	d9c01117 	ldw	r7,68(sp)
   442e0:	3801bc26 	beq	r7,zero,449d4 <_dtoa_r+0x1480>
   442e4:	10810cc4 	addi	r2,r2,1075
   442e8:	dd400a17 	ldw	r21,40(sp)
   442ec:	dd000817 	ldw	r20,32(sp)
   442f0:	003f0a06 	br	43f1c <__alt_data_end+0xfffd1f1c>
   442f4:	00800704 	movi	r2,28
   442f8:	d9000817 	ldw	r4,32(sp)
   442fc:	a0a9883a 	add	r20,r20,r2
   44300:	b0ad883a 	add	r22,r22,r2
   44304:	2089883a 	add	r4,r4,r2
   44308:	d9000815 	stw	r4,32(sp)
   4430c:	003f5106 	br	44054 <__alt_data_end+0xfffd2054>
   44310:	d8c00317 	ldw	r3,12(sp)
   44314:	b8c1fc0e 	bge	r23,r3,44b08 <_dtoa_r+0x15b4>
   44318:	0027883a 	mov	r19,zero
   4431c:	b805883a 	mov	r2,r23
   44320:	003f3e06 	br	4401c <__alt_data_end+0xfffd201c>
   44324:	880b883a 	mov	r5,r17
   44328:	e009883a 	mov	r4,fp
   4432c:	000f883a 	mov	r7,zero
   44330:	01800284 	movi	r6,10
   44334:	0046cc00 	call	46cc0 <__multadd>
   44338:	d9000c17 	ldw	r4,48(sp)
   4433c:	1023883a 	mov	r17,r2
   44340:	0102040e 	bge	zero,r4,44b54 <_dtoa_r+0x1600>
   44344:	d9000615 	stw	r4,24(sp)
   44348:	0500050e 	bge	zero,r20,44360 <_dtoa_r+0xe0c>
   4434c:	880b883a 	mov	r5,r17
   44350:	a00d883a 	mov	r6,r20
   44354:	e009883a 	mov	r4,fp
   44358:	00473700 	call	47370 <__lshift>
   4435c:	1023883a 	mov	r17,r2
   44360:	9801241e 	bne	r19,zero,447f4 <_dtoa_r+0x12a0>
   44364:	8829883a 	mov	r20,r17
   44368:	d9000617 	ldw	r4,24(sp)
   4436c:	dcc00717 	ldw	r19,28(sp)
   44370:	9480004c 	andi	r18,r18,1
   44374:	20bfffc4 	addi	r2,r4,-1
   44378:	9885883a 	add	r2,r19,r2
   4437c:	d8800415 	stw	r2,16(sp)
   44380:	dc800615 	stw	r18,24(sp)
   44384:	a80b883a 	mov	r5,r21
   44388:	8009883a 	mov	r4,r16
   4438c:	00433540 	call	43354 <quorem>
   44390:	880b883a 	mov	r5,r17
   44394:	8009883a 	mov	r4,r16
   44398:	102f883a 	mov	r23,r2
   4439c:	00474b80 	call	474b8 <__mcmp>
   443a0:	a80b883a 	mov	r5,r21
   443a4:	a00d883a 	mov	r6,r20
   443a8:	e009883a 	mov	r4,fp
   443ac:	102d883a 	mov	r22,r2
   443b0:	00475180 	call	47518 <__mdiff>
   443b4:	1007883a 	mov	r3,r2
   443b8:	10800317 	ldw	r2,12(r2)
   443bc:	bc800c04 	addi	r18,r23,48
   443c0:	180b883a 	mov	r5,r3
   443c4:	10004e1e 	bne	r2,zero,44500 <_dtoa_r+0xfac>
   443c8:	8009883a 	mov	r4,r16
   443cc:	d8c01615 	stw	r3,88(sp)
   443d0:	00474b80 	call	474b8 <__mcmp>
   443d4:	d8c01617 	ldw	r3,88(sp)
   443d8:	e009883a 	mov	r4,fp
   443dc:	d8801615 	stw	r2,88(sp)
   443e0:	180b883a 	mov	r5,r3
   443e4:	0046c980 	call	46c98 <_Bfree>
   443e8:	d8801617 	ldw	r2,88(sp)
   443ec:	1000041e 	bne	r2,zero,44400 <_dtoa_r+0xeac>
   443f0:	d9800317 	ldw	r6,12(sp)
   443f4:	3000021e 	bne	r6,zero,44400 <_dtoa_r+0xeac>
   443f8:	d8c00617 	ldw	r3,24(sp)
   443fc:	18003726 	beq	r3,zero,444dc <_dtoa_r+0xf88>
   44400:	b0002016 	blt	r22,zero,44484 <_dtoa_r+0xf30>
   44404:	b000041e 	bne	r22,zero,44418 <_dtoa_r+0xec4>
   44408:	d9000317 	ldw	r4,12(sp)
   4440c:	2000021e 	bne	r4,zero,44418 <_dtoa_r+0xec4>
   44410:	d8c00617 	ldw	r3,24(sp)
   44414:	18001b26 	beq	r3,zero,44484 <_dtoa_r+0xf30>
   44418:	00810716 	blt	zero,r2,44838 <_dtoa_r+0x12e4>
   4441c:	d8c00417 	ldw	r3,16(sp)
   44420:	9d800044 	addi	r22,r19,1
   44424:	9c800005 	stb	r18,0(r19)
   44428:	b02f883a 	mov	r23,r22
   4442c:	98c10626 	beq	r19,r3,44848 <_dtoa_r+0x12f4>
   44430:	800b883a 	mov	r5,r16
   44434:	000f883a 	mov	r7,zero
   44438:	01800284 	movi	r6,10
   4443c:	e009883a 	mov	r4,fp
   44440:	0046cc00 	call	46cc0 <__multadd>
   44444:	1021883a 	mov	r16,r2
   44448:	000f883a 	mov	r7,zero
   4444c:	01800284 	movi	r6,10
   44450:	880b883a 	mov	r5,r17
   44454:	e009883a 	mov	r4,fp
   44458:	8d002526 	beq	r17,r20,444f0 <_dtoa_r+0xf9c>
   4445c:	0046cc00 	call	46cc0 <__multadd>
   44460:	a00b883a 	mov	r5,r20
   44464:	000f883a 	mov	r7,zero
   44468:	01800284 	movi	r6,10
   4446c:	e009883a 	mov	r4,fp
   44470:	1023883a 	mov	r17,r2
   44474:	0046cc00 	call	46cc0 <__multadd>
   44478:	1029883a 	mov	r20,r2
   4447c:	b027883a 	mov	r19,r22
   44480:	003fc006 	br	44384 <__alt_data_end+0xfffd2384>
   44484:	9011883a 	mov	r8,r18
   44488:	00800e0e 	bge	zero,r2,444c4 <_dtoa_r+0xf70>
   4448c:	800b883a 	mov	r5,r16
   44490:	01800044 	movi	r6,1
   44494:	e009883a 	mov	r4,fp
   44498:	da001715 	stw	r8,92(sp)
   4449c:	00473700 	call	47370 <__lshift>
   444a0:	a80b883a 	mov	r5,r21
   444a4:	1009883a 	mov	r4,r2
   444a8:	1021883a 	mov	r16,r2
   444ac:	00474b80 	call	474b8 <__mcmp>
   444b0:	da001717 	ldw	r8,92(sp)
   444b4:	0081960e 	bge	zero,r2,44b10 <_dtoa_r+0x15bc>
   444b8:	00800e44 	movi	r2,57
   444bc:	40817026 	beq	r8,r2,44a80 <_dtoa_r+0x152c>
   444c0:	ba000c44 	addi	r8,r23,49
   444c4:	8825883a 	mov	r18,r17
   444c8:	9dc00044 	addi	r23,r19,1
   444cc:	9a000005 	stb	r8,0(r19)
   444d0:	a023883a 	mov	r17,r20
   444d4:	dc000915 	stw	r16,36(sp)
   444d8:	003f2406 	br	4416c <__alt_data_end+0xfffd216c>
   444dc:	00800e44 	movi	r2,57
   444e0:	9011883a 	mov	r8,r18
   444e4:	90816626 	beq	r18,r2,44a80 <_dtoa_r+0x152c>
   444e8:	05bff516 	blt	zero,r22,444c0 <__alt_data_end+0xfffd24c0>
   444ec:	003ff506 	br	444c4 <__alt_data_end+0xfffd24c4>
   444f0:	0046cc00 	call	46cc0 <__multadd>
   444f4:	1023883a 	mov	r17,r2
   444f8:	1029883a 	mov	r20,r2
   444fc:	003fdf06 	br	4447c <__alt_data_end+0xfffd247c>
   44500:	e009883a 	mov	r4,fp
   44504:	0046c980 	call	46c98 <_Bfree>
   44508:	00800044 	movi	r2,1
   4450c:	003fbc06 	br	44400 <__alt_data_end+0xfffd2400>
   44510:	a80b883a 	mov	r5,r21
   44514:	8009883a 	mov	r4,r16
   44518:	00474b80 	call	474b8 <__mcmp>
   4451c:	103edb0e 	bge	r2,zero,4408c <__alt_data_end+0xfffd208c>
   44520:	800b883a 	mov	r5,r16
   44524:	000f883a 	mov	r7,zero
   44528:	01800284 	movi	r6,10
   4452c:	e009883a 	mov	r4,fp
   44530:	0046cc00 	call	46cc0 <__multadd>
   44534:	1021883a 	mov	r16,r2
   44538:	d8800517 	ldw	r2,20(sp)
   4453c:	d8c00b17 	ldw	r3,44(sp)
   44540:	10bfffc4 	addi	r2,r2,-1
   44544:	d8800515 	stw	r2,20(sp)
   44548:	183f761e 	bne	r3,zero,44324 <__alt_data_end+0xfffd2324>
   4454c:	d9000c17 	ldw	r4,48(sp)
   44550:	0101730e 	bge	zero,r4,44b20 <_dtoa_r+0x15cc>
   44554:	d9000615 	stw	r4,24(sp)
   44558:	003ed006 	br	4409c <__alt_data_end+0xfffd209c>
   4455c:	00800084 	movi	r2,2
   44560:	3081861e 	bne	r6,r2,44b7c <_dtoa_r+0x1628>
   44564:	d8000b15 	stw	zero,44(sp)
   44568:	003f3c06 	br	4425c <__alt_data_end+0xfffd225c>
   4456c:	dc000917 	ldw	r16,36(sp)
   44570:	003e9206 	br	43fbc <__alt_data_end+0xfffd1fbc>
   44574:	d9c00317 	ldw	r7,12(sp)
   44578:	00800084 	movi	r2,2
   4457c:	11fec50e 	bge	r2,r7,44094 <__alt_data_end+0xfffd2094>
   44580:	d9000617 	ldw	r4,24(sp)
   44584:	20013c1e 	bne	r4,zero,44a78 <_dtoa_r+0x1524>
   44588:	a80b883a 	mov	r5,r21
   4458c:	000f883a 	mov	r7,zero
   44590:	01800144 	movi	r6,5
   44594:	e009883a 	mov	r4,fp
   44598:	0046cc00 	call	46cc0 <__multadd>
   4459c:	100b883a 	mov	r5,r2
   445a0:	8009883a 	mov	r4,r16
   445a4:	102b883a 	mov	r21,r2
   445a8:	00474b80 	call	474b8 <__mcmp>
   445ac:	dc000915 	stw	r16,36(sp)
   445b0:	00bf410e 	bge	zero,r2,442b8 <__alt_data_end+0xfffd22b8>
   445b4:	d9c00717 	ldw	r7,28(sp)
   445b8:	00800c44 	movi	r2,49
   445bc:	38800005 	stb	r2,0(r7)
   445c0:	d8800517 	ldw	r2,20(sp)
   445c4:	3dc00044 	addi	r23,r7,1
   445c8:	10800044 	addi	r2,r2,1
   445cc:	d8800515 	stw	r2,20(sp)
   445d0:	003f3d06 	br	442c8 <__alt_data_end+0xfffd22c8>
   445d4:	d9800517 	ldw	r6,20(sp)
   445d8:	d9c00717 	ldw	r7,28(sp)
   445dc:	00800c44 	movi	r2,49
   445e0:	31800044 	addi	r6,r6,1
   445e4:	d9800515 	stw	r6,20(sp)
   445e8:	38800005 	stb	r2,0(r7)
   445ec:	003edf06 	br	4416c <__alt_data_end+0xfffd216c>
   445f0:	d8000b15 	stw	zero,44(sp)
   445f4:	003c9f06 	br	43874 <__alt_data_end+0xfffd1874>
   445f8:	903e7e1e 	bne	r18,zero,43ff4 <__alt_data_end+0xfffd1ff4>
   445fc:	00800434 	movhi	r2,16
   44600:	10bfffc4 	addi	r2,r2,-1
   44604:	9884703a 	and	r2,r19,r2
   44608:	1000ea1e 	bne	r2,zero,449b4 <_dtoa_r+0x1460>
   4460c:	9cdffc2c 	andhi	r19,r19,32752
   44610:	9800e826 	beq	r19,zero,449b4 <_dtoa_r+0x1460>
   44614:	d9c00817 	ldw	r7,32(sp)
   44618:	b5800044 	addi	r22,r22,1
   4461c:	04c00044 	movi	r19,1
   44620:	39c00044 	addi	r7,r7,1
   44624:	d9c00815 	stw	r7,32(sp)
   44628:	d8800d17 	ldw	r2,52(sp)
   4462c:	103e721e 	bne	r2,zero,43ff8 <__alt_data_end+0xfffd1ff8>
   44630:	00800044 	movi	r2,1
   44634:	003e7906 	br	4401c <__alt_data_end+0xfffd201c>
   44638:	8009883a 	mov	r4,r16
   4463c:	004d4900 	call	4d490 <__floatsidf>
   44640:	d9800f17 	ldw	r6,60(sp)
   44644:	d9c01017 	ldw	r7,64(sp)
   44648:	1009883a 	mov	r4,r2
   4464c:	180b883a 	mov	r5,r3
   44650:	004c3fc0 	call	4c3fc <__muldf3>
   44654:	000d883a 	mov	r6,zero
   44658:	01d00734 	movhi	r7,16412
   4465c:	1009883a 	mov	r4,r2
   44660:	180b883a 	mov	r5,r3
   44664:	004b0100 	call	4b010 <__adddf3>
   44668:	047f3034 	movhi	r17,64704
   4466c:	1021883a 	mov	r16,r2
   44670:	1c63883a 	add	r17,r3,r17
   44674:	d9000f17 	ldw	r4,60(sp)
   44678:	d9401017 	ldw	r5,64(sp)
   4467c:	000d883a 	mov	r6,zero
   44680:	01d00534 	movhi	r7,16404
   44684:	004cb140 	call	4cb14 <__subdf3>
   44688:	800d883a 	mov	r6,r16
   4468c:	880f883a 	mov	r7,r17
   44690:	1009883a 	mov	r4,r2
   44694:	180b883a 	mov	r5,r3
   44698:	102b883a 	mov	r21,r2
   4469c:	1829883a 	mov	r20,r3
   446a0:	004c22c0 	call	4c22c <__gedf2>
   446a4:	00806c16 	blt	zero,r2,44858 <_dtoa_r+0x1304>
   446a8:	89e0003c 	xorhi	r7,r17,32768
   446ac:	800d883a 	mov	r6,r16
   446b0:	a809883a 	mov	r4,r21
   446b4:	a00b883a 	mov	r5,r20
   446b8:	004c3080 	call	4c308 <__ledf2>
   446bc:	103d7e0e 	bge	r2,zero,43cb8 <__alt_data_end+0xfffd1cb8>
   446c0:	002b883a 	mov	r21,zero
   446c4:	0023883a 	mov	r17,zero
   446c8:	003efb06 	br	442b8 <__alt_data_end+0xfffd22b8>
   446cc:	d8800717 	ldw	r2,28(sp)
   446d0:	003bd006 	br	43614 <__alt_data_end+0xfffd1614>
   446d4:	d9000a17 	ldw	r4,40(sp)
   446d8:	d9800d17 	ldw	r6,52(sp)
   446dc:	dd400a15 	stw	r21,40(sp)
   446e0:	a905c83a 	sub	r2,r21,r4
   446e4:	308d883a 	add	r6,r6,r2
   446e8:	d9800d15 	stw	r6,52(sp)
   446ec:	002b883a 	mov	r21,zero
   446f0:	003e0606 	br	43f0c <__alt_data_end+0xfffd1f0c>
   446f4:	9023883a 	mov	r17,r18
   446f8:	9829883a 	mov	r20,r19
   446fc:	04000084 	movi	r16,2
   44700:	003c9206 	br	4394c <__alt_data_end+0xfffd194c>
   44704:	04000044 	movi	r16,1
   44708:	dc000c15 	stw	r16,48(sp)
   4470c:	dc000615 	stw	r16,24(sp)
   44710:	dc002215 	stw	r16,136(sp)
   44714:	e0001115 	stw	zero,68(fp)
   44718:	000b883a 	mov	r5,zero
   4471c:	003c6906 	br	438c4 <__alt_data_end+0xfffd18c4>
   44720:	3021883a 	mov	r16,r6
   44724:	003ffb06 	br	44714 <__alt_data_end+0xfffd2714>
   44728:	1000021e 	bne	r2,zero,44734 <_dtoa_r+0x11e0>
   4472c:	4200004c 	andi	r8,r8,1
   44730:	403e7d1e 	bne	r8,zero,44128 <__alt_data_end+0xfffd2128>
   44734:	01000c04 	movi	r4,48
   44738:	00000106 	br	44740 <_dtoa_r+0x11ec>
   4473c:	102f883a 	mov	r23,r2
   44740:	b8bfffc4 	addi	r2,r23,-1
   44744:	10c00007 	ldb	r3,0(r2)
   44748:	193ffc26 	beq	r3,r4,4473c <__alt_data_end+0xfffd273c>
   4474c:	003e8706 	br	4416c <__alt_data_end+0xfffd216c>
   44750:	d8800517 	ldw	r2,20(sp)
   44754:	00a3c83a 	sub	r17,zero,r2
   44758:	8800a426 	beq	r17,zero,449ec <_dtoa_r+0x1498>
   4475c:	888003cc 	andi	r2,r17,15
   44760:	100490fa 	slli	r2,r2,3
   44764:	00c00174 	movhi	r3,5
   44768:	18fff704 	addi	r3,r3,-36
   4476c:	1885883a 	add	r2,r3,r2
   44770:	11800017 	ldw	r6,0(r2)
   44774:	11c00117 	ldw	r7,4(r2)
   44778:	9009883a 	mov	r4,r18
   4477c:	980b883a 	mov	r5,r19
   44780:	8823d13a 	srai	r17,r17,4
   44784:	004c3fc0 	call	4c3fc <__muldf3>
   44788:	d8800f15 	stw	r2,60(sp)
   4478c:	d8c01015 	stw	r3,64(sp)
   44790:	8800e826 	beq	r17,zero,44b34 <_dtoa_r+0x15e0>
   44794:	05000174 	movhi	r20,5
   44798:	a53fed04 	addi	r20,r20,-76
   4479c:	04000084 	movi	r16,2
   447a0:	8980004c 	andi	r6,r17,1
   447a4:	1009883a 	mov	r4,r2
   447a8:	8823d07a 	srai	r17,r17,1
   447ac:	180b883a 	mov	r5,r3
   447b0:	30000426 	beq	r6,zero,447c4 <_dtoa_r+0x1270>
   447b4:	a1800017 	ldw	r6,0(r20)
   447b8:	a1c00117 	ldw	r7,4(r20)
   447bc:	84000044 	addi	r16,r16,1
   447c0:	004c3fc0 	call	4c3fc <__muldf3>
   447c4:	a5000204 	addi	r20,r20,8
   447c8:	883ff51e 	bne	r17,zero,447a0 <__alt_data_end+0xfffd27a0>
   447cc:	d8800f15 	stw	r2,60(sp)
   447d0:	d8c01015 	stw	r3,64(sp)
   447d4:	003c7606 	br	439b0 <__alt_data_end+0xfffd19b0>
   447d8:	00c00c04 	movi	r3,48
   447dc:	10c00005 	stb	r3,0(r2)
   447e0:	d8c00517 	ldw	r3,20(sp)
   447e4:	bd3fffc3 	ldbu	r20,-1(r23)
   447e8:	18c00044 	addi	r3,r3,1
   447ec:	d8c00515 	stw	r3,20(sp)
   447f0:	003db906 	br	43ed8 <__alt_data_end+0xfffd1ed8>
   447f4:	89400117 	ldw	r5,4(r17)
   447f8:	e009883a 	mov	r4,fp
   447fc:	0046bf00 	call	46bf0 <_Balloc>
   44800:	89800417 	ldw	r6,16(r17)
   44804:	89400304 	addi	r5,r17,12
   44808:	11000304 	addi	r4,r2,12
   4480c:	31800084 	addi	r6,r6,2
   44810:	318d883a 	add	r6,r6,r6
   44814:	318d883a 	add	r6,r6,r6
   44818:	1027883a 	mov	r19,r2
   4481c:	00468240 	call	46824 <memcpy>
   44820:	01800044 	movi	r6,1
   44824:	980b883a 	mov	r5,r19
   44828:	e009883a 	mov	r4,fp
   4482c:	00473700 	call	47370 <__lshift>
   44830:	1029883a 	mov	r20,r2
   44834:	003ecc06 	br	44368 <__alt_data_end+0xfffd2368>
   44838:	00800e44 	movi	r2,57
   4483c:	90809026 	beq	r18,r2,44a80 <_dtoa_r+0x152c>
   44840:	92000044 	addi	r8,r18,1
   44844:	003f1f06 	br	444c4 <__alt_data_end+0xfffd24c4>
   44848:	9011883a 	mov	r8,r18
   4484c:	8825883a 	mov	r18,r17
   44850:	a023883a 	mov	r17,r20
   44854:	003e2906 	br	440fc <__alt_data_end+0xfffd20fc>
   44858:	002b883a 	mov	r21,zero
   4485c:	0023883a 	mov	r17,zero
   44860:	003f5406 	br	445b4 <__alt_data_end+0xfffd25b4>
   44864:	61bfffc4 	addi	r6,r12,-1
   44868:	300490fa 	slli	r2,r6,3
   4486c:	00c00174 	movhi	r3,5
   44870:	18fff704 	addi	r3,r3,-36
   44874:	1885883a 	add	r2,r3,r2
   44878:	11000017 	ldw	r4,0(r2)
   4487c:	11400117 	ldw	r5,4(r2)
   44880:	d8800717 	ldw	r2,28(sp)
   44884:	880f883a 	mov	r7,r17
   44888:	d9801215 	stw	r6,72(sp)
   4488c:	800d883a 	mov	r6,r16
   44890:	db001615 	stw	r12,88(sp)
   44894:	15c00044 	addi	r23,r2,1
   44898:	004c3fc0 	call	4c3fc <__muldf3>
   4489c:	d9401017 	ldw	r5,64(sp)
   448a0:	d9000f17 	ldw	r4,60(sp)
   448a4:	d8c01515 	stw	r3,84(sp)
   448a8:	d8801415 	stw	r2,80(sp)
   448ac:	004d4100 	call	4d410 <__fixdfsi>
   448b0:	1009883a 	mov	r4,r2
   448b4:	1021883a 	mov	r16,r2
   448b8:	004d4900 	call	4d490 <__floatsidf>
   448bc:	d9000f17 	ldw	r4,60(sp)
   448c0:	d9401017 	ldw	r5,64(sp)
   448c4:	100d883a 	mov	r6,r2
   448c8:	180f883a 	mov	r7,r3
   448cc:	004cb140 	call	4cb14 <__subdf3>
   448d0:	1829883a 	mov	r20,r3
   448d4:	d8c00717 	ldw	r3,28(sp)
   448d8:	84000c04 	addi	r16,r16,48
   448dc:	1023883a 	mov	r17,r2
   448e0:	1c000005 	stb	r16,0(r3)
   448e4:	db001617 	ldw	r12,88(sp)
   448e8:	00800044 	movi	r2,1
   448ec:	60802226 	beq	r12,r2,44978 <_dtoa_r+0x1424>
   448f0:	d9c00717 	ldw	r7,28(sp)
   448f4:	8805883a 	mov	r2,r17
   448f8:	b82b883a 	mov	r21,r23
   448fc:	3b19883a 	add	r12,r7,r12
   44900:	6023883a 	mov	r17,r12
   44904:	a007883a 	mov	r3,r20
   44908:	dc800f15 	stw	r18,60(sp)
   4490c:	000d883a 	mov	r6,zero
   44910:	01d00934 	movhi	r7,16420
   44914:	1009883a 	mov	r4,r2
   44918:	180b883a 	mov	r5,r3
   4491c:	004c3fc0 	call	4c3fc <__muldf3>
   44920:	180b883a 	mov	r5,r3
   44924:	1009883a 	mov	r4,r2
   44928:	1829883a 	mov	r20,r3
   4492c:	1025883a 	mov	r18,r2
   44930:	004d4100 	call	4d410 <__fixdfsi>
   44934:	1009883a 	mov	r4,r2
   44938:	1021883a 	mov	r16,r2
   4493c:	004d4900 	call	4d490 <__floatsidf>
   44940:	100d883a 	mov	r6,r2
   44944:	180f883a 	mov	r7,r3
   44948:	9009883a 	mov	r4,r18
   4494c:	a00b883a 	mov	r5,r20
   44950:	84000c04 	addi	r16,r16,48
   44954:	004cb140 	call	4cb14 <__subdf3>
   44958:	ad400044 	addi	r21,r21,1
   4495c:	ac3fffc5 	stb	r16,-1(r21)
   44960:	ac7fea1e 	bne	r21,r17,4490c <__alt_data_end+0xfffd290c>
   44964:	1023883a 	mov	r17,r2
   44968:	d8801217 	ldw	r2,72(sp)
   4496c:	dc800f17 	ldw	r18,60(sp)
   44970:	1829883a 	mov	r20,r3
   44974:	b8af883a 	add	r23,r23,r2
   44978:	d9001417 	ldw	r4,80(sp)
   4497c:	d9401517 	ldw	r5,84(sp)
   44980:	000d883a 	mov	r6,zero
   44984:	01cff834 	movhi	r7,16352
   44988:	004b0100 	call	4b010 <__adddf3>
   4498c:	880d883a 	mov	r6,r17
   44990:	a00f883a 	mov	r7,r20
   44994:	1009883a 	mov	r4,r2
   44998:	180b883a 	mov	r5,r3
   4499c:	004c3080 	call	4c308 <__ledf2>
   449a0:	10003e0e 	bge	r2,zero,44a9c <_dtoa_r+0x1548>
   449a4:	d9001317 	ldw	r4,76(sp)
   449a8:	bd3fffc3 	ldbu	r20,-1(r23)
   449ac:	d9000515 	stw	r4,20(sp)
   449b0:	003d3b06 	br	43ea0 <__alt_data_end+0xfffd1ea0>
   449b4:	0027883a 	mov	r19,zero
   449b8:	003f1b06 	br	44628 <__alt_data_end+0xfffd2628>
   449bc:	d8800817 	ldw	r2,32(sp)
   449c0:	11e9c83a 	sub	r20,r2,r7
   449c4:	0005883a 	mov	r2,zero
   449c8:	003d5406 	br	43f1c <__alt_data_end+0xfffd1f1c>
   449cc:	00800044 	movi	r2,1
   449d0:	003dc706 	br	440f0 <__alt_data_end+0xfffd20f0>
   449d4:	d8c00217 	ldw	r3,8(sp)
   449d8:	00800d84 	movi	r2,54
   449dc:	dd400a17 	ldw	r21,40(sp)
   449e0:	10c5c83a 	sub	r2,r2,r3
   449e4:	dd000817 	ldw	r20,32(sp)
   449e8:	003d4c06 	br	43f1c <__alt_data_end+0xfffd1f1c>
   449ec:	dc800f15 	stw	r18,60(sp)
   449f0:	dcc01015 	stw	r19,64(sp)
   449f4:	04000084 	movi	r16,2
   449f8:	003bed06 	br	439b0 <__alt_data_end+0xfffd19b0>
   449fc:	d9000617 	ldw	r4,24(sp)
   44a00:	203f0d26 	beq	r4,zero,44638 <__alt_data_end+0xfffd2638>
   44a04:	d9800c17 	ldw	r6,48(sp)
   44a08:	01bcab0e 	bge	zero,r6,43cb8 <__alt_data_end+0xfffd1cb8>
   44a0c:	d9401017 	ldw	r5,64(sp)
   44a10:	d9000f17 	ldw	r4,60(sp)
   44a14:	000d883a 	mov	r6,zero
   44a18:	01d00934 	movhi	r7,16420
   44a1c:	004c3fc0 	call	4c3fc <__muldf3>
   44a20:	81000044 	addi	r4,r16,1
   44a24:	d8800f15 	stw	r2,60(sp)
   44a28:	d8c01015 	stw	r3,64(sp)
   44a2c:	004d4900 	call	4d490 <__floatsidf>
   44a30:	d9800f17 	ldw	r6,60(sp)
   44a34:	d9c01017 	ldw	r7,64(sp)
   44a38:	1009883a 	mov	r4,r2
   44a3c:	180b883a 	mov	r5,r3
   44a40:	004c3fc0 	call	4c3fc <__muldf3>
   44a44:	01d00734 	movhi	r7,16412
   44a48:	000d883a 	mov	r6,zero
   44a4c:	1009883a 	mov	r4,r2
   44a50:	180b883a 	mov	r5,r3
   44a54:	004b0100 	call	4b010 <__adddf3>
   44a58:	d9c00517 	ldw	r7,20(sp)
   44a5c:	047f3034 	movhi	r17,64704
   44a60:	1021883a 	mov	r16,r2
   44a64:	39ffffc4 	addi	r7,r7,-1
   44a68:	d9c01315 	stw	r7,76(sp)
   44a6c:	1c63883a 	add	r17,r3,r17
   44a70:	db000c17 	ldw	r12,48(sp)
   44a74:	003bea06 	br	43a20 <__alt_data_end+0xfffd1a20>
   44a78:	dc000915 	stw	r16,36(sp)
   44a7c:	003e0e06 	br	442b8 <__alt_data_end+0xfffd22b8>
   44a80:	01000e44 	movi	r4,57
   44a84:	8825883a 	mov	r18,r17
   44a88:	9dc00044 	addi	r23,r19,1
   44a8c:	99000005 	stb	r4,0(r19)
   44a90:	a023883a 	mov	r17,r20
   44a94:	dc000915 	stw	r16,36(sp)
   44a98:	003da406 	br	4412c <__alt_data_end+0xfffd212c>
   44a9c:	d9801417 	ldw	r6,80(sp)
   44aa0:	d9c01517 	ldw	r7,84(sp)
   44aa4:	0009883a 	mov	r4,zero
   44aa8:	014ff834 	movhi	r5,16352
   44aac:	004cb140 	call	4cb14 <__subdf3>
   44ab0:	880d883a 	mov	r6,r17
   44ab4:	a00f883a 	mov	r7,r20
   44ab8:	1009883a 	mov	r4,r2
   44abc:	180b883a 	mov	r5,r3
   44ac0:	004c22c0 	call	4c22c <__gedf2>
   44ac4:	00bc7c0e 	bge	zero,r2,43cb8 <__alt_data_end+0xfffd1cb8>
   44ac8:	01000c04 	movi	r4,48
   44acc:	00000106 	br	44ad4 <_dtoa_r+0x1580>
   44ad0:	102f883a 	mov	r23,r2
   44ad4:	b8bfffc4 	addi	r2,r23,-1
   44ad8:	10c00007 	ldb	r3,0(r2)
   44adc:	193ffc26 	beq	r3,r4,44ad0 <__alt_data_end+0xfffd2ad0>
   44ae0:	d9801317 	ldw	r6,76(sp)
   44ae4:	d9800515 	stw	r6,20(sp)
   44ae8:	003c4406 	br	43bfc <__alt_data_end+0xfffd1bfc>
   44aec:	d9801317 	ldw	r6,76(sp)
   44af0:	d9800515 	stw	r6,20(sp)
   44af4:	003cea06 	br	43ea0 <__alt_data_end+0xfffd1ea0>
   44af8:	dd800f17 	ldw	r22,60(sp)
   44afc:	dcc01017 	ldw	r19,64(sp)
   44b00:	dc801217 	ldw	r18,72(sp)
   44b04:	003c6c06 	br	43cb8 <__alt_data_end+0xfffd1cb8>
   44b08:	903e031e 	bne	r18,zero,44318 <__alt_data_end+0xfffd2318>
   44b0c:	003ebb06 	br	445fc <__alt_data_end+0xfffd25fc>
   44b10:	103e6c1e 	bne	r2,zero,444c4 <__alt_data_end+0xfffd24c4>
   44b14:	4080004c 	andi	r2,r8,1
   44b18:	103e6a26 	beq	r2,zero,444c4 <__alt_data_end+0xfffd24c4>
   44b1c:	003e6606 	br	444b8 <__alt_data_end+0xfffd24b8>
   44b20:	d8c00317 	ldw	r3,12(sp)
   44b24:	00800084 	movi	r2,2
   44b28:	10c02916 	blt	r2,r3,44bd0 <_dtoa_r+0x167c>
   44b2c:	d9000c17 	ldw	r4,48(sp)
   44b30:	003e8806 	br	44554 <__alt_data_end+0xfffd2554>
   44b34:	04000084 	movi	r16,2
   44b38:	003b9d06 	br	439b0 <__alt_data_end+0xfffd19b0>
   44b3c:	d9001317 	ldw	r4,76(sp)
   44b40:	d9000515 	stw	r4,20(sp)
   44b44:	003cd606 	br	43ea0 <__alt_data_end+0xfffd1ea0>
   44b48:	d8801317 	ldw	r2,76(sp)
   44b4c:	d8800515 	stw	r2,20(sp)
   44b50:	003c2a06 	br	43bfc <__alt_data_end+0xfffd1bfc>
   44b54:	d9800317 	ldw	r6,12(sp)
   44b58:	00800084 	movi	r2,2
   44b5c:	11801516 	blt	r2,r6,44bb4 <_dtoa_r+0x1660>
   44b60:	d9c00c17 	ldw	r7,48(sp)
   44b64:	d9c00615 	stw	r7,24(sp)
   44b68:	003df706 	br	44348 <__alt_data_end+0xfffd2348>
   44b6c:	193d3926 	beq	r3,r4,44054 <__alt_data_end+0xfffd2054>
   44b70:	00c00f04 	movi	r3,60
   44b74:	1885c83a 	sub	r2,r3,r2
   44b78:	003ddf06 	br	442f8 <__alt_data_end+0xfffd22f8>
   44b7c:	e009883a 	mov	r4,fp
   44b80:	e0001115 	stw	zero,68(fp)
   44b84:	000b883a 	mov	r5,zero
   44b88:	0046bf00 	call	46bf0 <_Balloc>
   44b8c:	d8800715 	stw	r2,28(sp)
   44b90:	d8c00717 	ldw	r3,28(sp)
   44b94:	00bfffc4 	movi	r2,-1
   44b98:	01000044 	movi	r4,1
   44b9c:	d8800c15 	stw	r2,48(sp)
   44ba0:	e0c01015 	stw	r3,64(fp)
   44ba4:	d9000b15 	stw	r4,44(sp)
   44ba8:	d8800615 	stw	r2,24(sp)
   44bac:	d8002215 	stw	zero,136(sp)
   44bb0:	003c4106 	br	43cb8 <__alt_data_end+0xfffd1cb8>
   44bb4:	d8c00c17 	ldw	r3,48(sp)
   44bb8:	d8c00615 	stw	r3,24(sp)
   44bbc:	003e7006 	br	44580 <__alt_data_end+0xfffd2580>
   44bc0:	04400044 	movi	r17,1
   44bc4:	003b2006 	br	43848 <__alt_data_end+0xfffd1848>
   44bc8:	000b883a 	mov	r5,zero
   44bcc:	003b3d06 	br	438c4 <__alt_data_end+0xfffd18c4>
   44bd0:	d8800c17 	ldw	r2,48(sp)
   44bd4:	d8800615 	stw	r2,24(sp)
   44bd8:	003e6906 	br	44580 <__alt_data_end+0xfffd2580>

00044bdc <__sflush_r>:
   44bdc:	2880030b 	ldhu	r2,12(r5)
   44be0:	defffb04 	addi	sp,sp,-20
   44be4:	dcc00315 	stw	r19,12(sp)
   44be8:	dc400115 	stw	r17,4(sp)
   44bec:	dfc00415 	stw	ra,16(sp)
   44bf0:	dc800215 	stw	r18,8(sp)
   44bf4:	dc000015 	stw	r16,0(sp)
   44bf8:	10c0020c 	andi	r3,r2,8
   44bfc:	2823883a 	mov	r17,r5
   44c00:	2027883a 	mov	r19,r4
   44c04:	1800311e 	bne	r3,zero,44ccc <__sflush_r+0xf0>
   44c08:	28c00117 	ldw	r3,4(r5)
   44c0c:	10820014 	ori	r2,r2,2048
   44c10:	2880030d 	sth	r2,12(r5)
   44c14:	00c04b0e 	bge	zero,r3,44d44 <__sflush_r+0x168>
   44c18:	8a000a17 	ldw	r8,40(r17)
   44c1c:	40002326 	beq	r8,zero,44cac <__sflush_r+0xd0>
   44c20:	9c000017 	ldw	r16,0(r19)
   44c24:	10c4000c 	andi	r3,r2,4096
   44c28:	98000015 	stw	zero,0(r19)
   44c2c:	18004826 	beq	r3,zero,44d50 <__sflush_r+0x174>
   44c30:	89801417 	ldw	r6,80(r17)
   44c34:	10c0010c 	andi	r3,r2,4
   44c38:	18000626 	beq	r3,zero,44c54 <__sflush_r+0x78>
   44c3c:	88c00117 	ldw	r3,4(r17)
   44c40:	88800c17 	ldw	r2,48(r17)
   44c44:	30cdc83a 	sub	r6,r6,r3
   44c48:	10000226 	beq	r2,zero,44c54 <__sflush_r+0x78>
   44c4c:	88800f17 	ldw	r2,60(r17)
   44c50:	308dc83a 	sub	r6,r6,r2
   44c54:	89400717 	ldw	r5,28(r17)
   44c58:	000f883a 	mov	r7,zero
   44c5c:	9809883a 	mov	r4,r19
   44c60:	403ee83a 	callr	r8
   44c64:	00ffffc4 	movi	r3,-1
   44c68:	10c04426 	beq	r2,r3,44d7c <__sflush_r+0x1a0>
   44c6c:	88c0030b 	ldhu	r3,12(r17)
   44c70:	89000417 	ldw	r4,16(r17)
   44c74:	88000115 	stw	zero,4(r17)
   44c78:	197dffcc 	andi	r5,r3,63487
   44c7c:	8940030d 	sth	r5,12(r17)
   44c80:	89000015 	stw	r4,0(r17)
   44c84:	18c4000c 	andi	r3,r3,4096
   44c88:	18002c1e 	bne	r3,zero,44d3c <__sflush_r+0x160>
   44c8c:	89400c17 	ldw	r5,48(r17)
   44c90:	9c000015 	stw	r16,0(r19)
   44c94:	28000526 	beq	r5,zero,44cac <__sflush_r+0xd0>
   44c98:	88801004 	addi	r2,r17,64
   44c9c:	28800226 	beq	r5,r2,44ca8 <__sflush_r+0xcc>
   44ca0:	9809883a 	mov	r4,r19
   44ca4:	00453480 	call	45348 <_free_r>
   44ca8:	88000c15 	stw	zero,48(r17)
   44cac:	0005883a 	mov	r2,zero
   44cb0:	dfc00417 	ldw	ra,16(sp)
   44cb4:	dcc00317 	ldw	r19,12(sp)
   44cb8:	dc800217 	ldw	r18,8(sp)
   44cbc:	dc400117 	ldw	r17,4(sp)
   44cc0:	dc000017 	ldw	r16,0(sp)
   44cc4:	dec00504 	addi	sp,sp,20
   44cc8:	f800283a 	ret
   44ccc:	2c800417 	ldw	r18,16(r5)
   44cd0:	903ff626 	beq	r18,zero,44cac <__alt_data_end+0xfffd2cac>
   44cd4:	2c000017 	ldw	r16,0(r5)
   44cd8:	108000cc 	andi	r2,r2,3
   44cdc:	2c800015 	stw	r18,0(r5)
   44ce0:	84a1c83a 	sub	r16,r16,r18
   44ce4:	1000131e 	bne	r2,zero,44d34 <__sflush_r+0x158>
   44ce8:	28800517 	ldw	r2,20(r5)
   44cec:	88800215 	stw	r2,8(r17)
   44cf0:	04000316 	blt	zero,r16,44d00 <__sflush_r+0x124>
   44cf4:	003fed06 	br	44cac <__alt_data_end+0xfffd2cac>
   44cf8:	90a5883a 	add	r18,r18,r2
   44cfc:	043feb0e 	bge	zero,r16,44cac <__alt_data_end+0xfffd2cac>
   44d00:	88800917 	ldw	r2,36(r17)
   44d04:	89400717 	ldw	r5,28(r17)
   44d08:	800f883a 	mov	r7,r16
   44d0c:	900d883a 	mov	r6,r18
   44d10:	9809883a 	mov	r4,r19
   44d14:	103ee83a 	callr	r2
   44d18:	80a1c83a 	sub	r16,r16,r2
   44d1c:	00bff616 	blt	zero,r2,44cf8 <__alt_data_end+0xfffd2cf8>
   44d20:	88c0030b 	ldhu	r3,12(r17)
   44d24:	00bfffc4 	movi	r2,-1
   44d28:	18c01014 	ori	r3,r3,64
   44d2c:	88c0030d 	sth	r3,12(r17)
   44d30:	003fdf06 	br	44cb0 <__alt_data_end+0xfffd2cb0>
   44d34:	0005883a 	mov	r2,zero
   44d38:	003fec06 	br	44cec <__alt_data_end+0xfffd2cec>
   44d3c:	88801415 	stw	r2,80(r17)
   44d40:	003fd206 	br	44c8c <__alt_data_end+0xfffd2c8c>
   44d44:	28c00f17 	ldw	r3,60(r5)
   44d48:	00ffb316 	blt	zero,r3,44c18 <__alt_data_end+0xfffd2c18>
   44d4c:	003fd706 	br	44cac <__alt_data_end+0xfffd2cac>
   44d50:	89400717 	ldw	r5,28(r17)
   44d54:	000d883a 	mov	r6,zero
   44d58:	01c00044 	movi	r7,1
   44d5c:	9809883a 	mov	r4,r19
   44d60:	403ee83a 	callr	r8
   44d64:	100d883a 	mov	r6,r2
   44d68:	00bfffc4 	movi	r2,-1
   44d6c:	30801426 	beq	r6,r2,44dc0 <__sflush_r+0x1e4>
   44d70:	8880030b 	ldhu	r2,12(r17)
   44d74:	8a000a17 	ldw	r8,40(r17)
   44d78:	003fae06 	br	44c34 <__alt_data_end+0xfffd2c34>
   44d7c:	98c00017 	ldw	r3,0(r19)
   44d80:	183fba26 	beq	r3,zero,44c6c <__alt_data_end+0xfffd2c6c>
   44d84:	01000744 	movi	r4,29
   44d88:	19000626 	beq	r3,r4,44da4 <__sflush_r+0x1c8>
   44d8c:	01000584 	movi	r4,22
   44d90:	19000426 	beq	r3,r4,44da4 <__sflush_r+0x1c8>
   44d94:	88c0030b 	ldhu	r3,12(r17)
   44d98:	18c01014 	ori	r3,r3,64
   44d9c:	88c0030d 	sth	r3,12(r17)
   44da0:	003fc306 	br	44cb0 <__alt_data_end+0xfffd2cb0>
   44da4:	8880030b 	ldhu	r2,12(r17)
   44da8:	88c00417 	ldw	r3,16(r17)
   44dac:	88000115 	stw	zero,4(r17)
   44db0:	10bdffcc 	andi	r2,r2,63487
   44db4:	8880030d 	sth	r2,12(r17)
   44db8:	88c00015 	stw	r3,0(r17)
   44dbc:	003fb306 	br	44c8c <__alt_data_end+0xfffd2c8c>
   44dc0:	98800017 	ldw	r2,0(r19)
   44dc4:	103fea26 	beq	r2,zero,44d70 <__alt_data_end+0xfffd2d70>
   44dc8:	00c00744 	movi	r3,29
   44dcc:	10c00226 	beq	r2,r3,44dd8 <__sflush_r+0x1fc>
   44dd0:	00c00584 	movi	r3,22
   44dd4:	10c0031e 	bne	r2,r3,44de4 <__sflush_r+0x208>
   44dd8:	9c000015 	stw	r16,0(r19)
   44ddc:	0005883a 	mov	r2,zero
   44de0:	003fb306 	br	44cb0 <__alt_data_end+0xfffd2cb0>
   44de4:	88c0030b 	ldhu	r3,12(r17)
   44de8:	3005883a 	mov	r2,r6
   44dec:	18c01014 	ori	r3,r3,64
   44df0:	88c0030d 	sth	r3,12(r17)
   44df4:	003fae06 	br	44cb0 <__alt_data_end+0xfffd2cb0>

00044df8 <_fflush_r>:
   44df8:	defffd04 	addi	sp,sp,-12
   44dfc:	dc000115 	stw	r16,4(sp)
   44e00:	dfc00215 	stw	ra,8(sp)
   44e04:	2021883a 	mov	r16,r4
   44e08:	20000226 	beq	r4,zero,44e14 <_fflush_r+0x1c>
   44e0c:	20800e17 	ldw	r2,56(r4)
   44e10:	10000c26 	beq	r2,zero,44e44 <_fflush_r+0x4c>
   44e14:	2880030f 	ldh	r2,12(r5)
   44e18:	1000051e 	bne	r2,zero,44e30 <_fflush_r+0x38>
   44e1c:	0005883a 	mov	r2,zero
   44e20:	dfc00217 	ldw	ra,8(sp)
   44e24:	dc000117 	ldw	r16,4(sp)
   44e28:	dec00304 	addi	sp,sp,12
   44e2c:	f800283a 	ret
   44e30:	8009883a 	mov	r4,r16
   44e34:	dfc00217 	ldw	ra,8(sp)
   44e38:	dc000117 	ldw	r16,4(sp)
   44e3c:	dec00304 	addi	sp,sp,12
   44e40:	0044bdc1 	jmpi	44bdc <__sflush_r>
   44e44:	d9400015 	stw	r5,0(sp)
   44e48:	00451d40 	call	451d4 <__sinit>
   44e4c:	d9400017 	ldw	r5,0(sp)
   44e50:	003ff006 	br	44e14 <__alt_data_end+0xfffd2e14>

00044e54 <fflush>:
   44e54:	20000526 	beq	r4,zero,44e6c <fflush+0x18>
   44e58:	00800174 	movhi	r2,5
   44e5c:	10872804 	addi	r2,r2,7328
   44e60:	200b883a 	mov	r5,r4
   44e64:	11000017 	ldw	r4,0(r2)
   44e68:	0044df81 	jmpi	44df8 <_fflush_r>
   44e6c:	00800174 	movhi	r2,5
   44e70:	10872704 	addi	r2,r2,7324
   44e74:	11000017 	ldw	r4,0(r2)
   44e78:	01400134 	movhi	r5,4
   44e7c:	29537e04 	addi	r5,r5,19960
   44e80:	0045bd81 	jmpi	45bd8 <_fwalk_reent>

00044e84 <__fp_unlock>:
   44e84:	0005883a 	mov	r2,zero
   44e88:	f800283a 	ret

00044e8c <_cleanup_r>:
   44e8c:	01400174 	movhi	r5,5
   44e90:	2966fc04 	addi	r5,r5,-25616
   44e94:	0045bd81 	jmpi	45bd8 <_fwalk_reent>

00044e98 <__sinit.part.1>:
   44e98:	defff704 	addi	sp,sp,-36
   44e9c:	00c00134 	movhi	r3,4
   44ea0:	dfc00815 	stw	ra,32(sp)
   44ea4:	ddc00715 	stw	r23,28(sp)
   44ea8:	dd800615 	stw	r22,24(sp)
   44eac:	dd400515 	stw	r21,20(sp)
   44eb0:	dd000415 	stw	r20,16(sp)
   44eb4:	dcc00315 	stw	r19,12(sp)
   44eb8:	dc800215 	stw	r18,8(sp)
   44ebc:	dc400115 	stw	r17,4(sp)
   44ec0:	dc000015 	stw	r16,0(sp)
   44ec4:	18d3a304 	addi	r3,r3,20108
   44ec8:	24000117 	ldw	r16,4(r4)
   44ecc:	20c00f15 	stw	r3,60(r4)
   44ed0:	2080bb04 	addi	r2,r4,748
   44ed4:	00c000c4 	movi	r3,3
   44ed8:	20c0b915 	stw	r3,740(r4)
   44edc:	2080ba15 	stw	r2,744(r4)
   44ee0:	2000b815 	stw	zero,736(r4)
   44ee4:	05c00204 	movi	r23,8
   44ee8:	00800104 	movi	r2,4
   44eec:	2025883a 	mov	r18,r4
   44ef0:	b80d883a 	mov	r6,r23
   44ef4:	81001704 	addi	r4,r16,92
   44ef8:	000b883a 	mov	r5,zero
   44efc:	80000015 	stw	zero,0(r16)
   44f00:	80000115 	stw	zero,4(r16)
   44f04:	80000215 	stw	zero,8(r16)
   44f08:	8080030d 	sth	r2,12(r16)
   44f0c:	80001915 	stw	zero,100(r16)
   44f10:	8000038d 	sth	zero,14(r16)
   44f14:	80000415 	stw	zero,16(r16)
   44f18:	80000515 	stw	zero,20(r16)
   44f1c:	80000615 	stw	zero,24(r16)
   44f20:	0046ac80 	call	46ac8 <memset>
   44f24:	05800174 	movhi	r22,5
   44f28:	94400217 	ldw	r17,8(r18)
   44f2c:	05400174 	movhi	r21,5
   44f30:	05000174 	movhi	r20,5
   44f34:	04c00174 	movhi	r19,5
   44f38:	b5a08604 	addi	r22,r22,-32232
   44f3c:	ad609d04 	addi	r21,r21,-32140
   44f40:	a520bc04 	addi	r20,r20,-32016
   44f44:	9ce0d304 	addi	r19,r19,-31924
   44f48:	85800815 	stw	r22,32(r16)
   44f4c:	85400915 	stw	r21,36(r16)
   44f50:	85000a15 	stw	r20,40(r16)
   44f54:	84c00b15 	stw	r19,44(r16)
   44f58:	84000715 	stw	r16,28(r16)
   44f5c:	00800284 	movi	r2,10
   44f60:	8880030d 	sth	r2,12(r17)
   44f64:	00800044 	movi	r2,1
   44f68:	b80d883a 	mov	r6,r23
   44f6c:	89001704 	addi	r4,r17,92
   44f70:	000b883a 	mov	r5,zero
   44f74:	88000015 	stw	zero,0(r17)
   44f78:	88000115 	stw	zero,4(r17)
   44f7c:	88000215 	stw	zero,8(r17)
   44f80:	88001915 	stw	zero,100(r17)
   44f84:	8880038d 	sth	r2,14(r17)
   44f88:	88000415 	stw	zero,16(r17)
   44f8c:	88000515 	stw	zero,20(r17)
   44f90:	88000615 	stw	zero,24(r17)
   44f94:	0046ac80 	call	46ac8 <memset>
   44f98:	94000317 	ldw	r16,12(r18)
   44f9c:	00800484 	movi	r2,18
   44fa0:	8c400715 	stw	r17,28(r17)
   44fa4:	8d800815 	stw	r22,32(r17)
   44fa8:	8d400915 	stw	r21,36(r17)
   44fac:	8d000a15 	stw	r20,40(r17)
   44fb0:	8cc00b15 	stw	r19,44(r17)
   44fb4:	8080030d 	sth	r2,12(r16)
   44fb8:	00800084 	movi	r2,2
   44fbc:	80000015 	stw	zero,0(r16)
   44fc0:	80000115 	stw	zero,4(r16)
   44fc4:	80000215 	stw	zero,8(r16)
   44fc8:	80001915 	stw	zero,100(r16)
   44fcc:	8080038d 	sth	r2,14(r16)
   44fd0:	80000415 	stw	zero,16(r16)
   44fd4:	80000515 	stw	zero,20(r16)
   44fd8:	80000615 	stw	zero,24(r16)
   44fdc:	b80d883a 	mov	r6,r23
   44fe0:	000b883a 	mov	r5,zero
   44fe4:	81001704 	addi	r4,r16,92
   44fe8:	0046ac80 	call	46ac8 <memset>
   44fec:	00800044 	movi	r2,1
   44ff0:	84000715 	stw	r16,28(r16)
   44ff4:	85800815 	stw	r22,32(r16)
   44ff8:	85400915 	stw	r21,36(r16)
   44ffc:	85000a15 	stw	r20,40(r16)
   45000:	84c00b15 	stw	r19,44(r16)
   45004:	90800e15 	stw	r2,56(r18)
   45008:	dfc00817 	ldw	ra,32(sp)
   4500c:	ddc00717 	ldw	r23,28(sp)
   45010:	dd800617 	ldw	r22,24(sp)
   45014:	dd400517 	ldw	r21,20(sp)
   45018:	dd000417 	ldw	r20,16(sp)
   4501c:	dcc00317 	ldw	r19,12(sp)
   45020:	dc800217 	ldw	r18,8(sp)
   45024:	dc400117 	ldw	r17,4(sp)
   45028:	dc000017 	ldw	r16,0(sp)
   4502c:	dec00904 	addi	sp,sp,36
   45030:	f800283a 	ret

00045034 <__fp_lock>:
   45034:	0005883a 	mov	r2,zero
   45038:	f800283a 	ret

0004503c <__sfmoreglue>:
   4503c:	defffc04 	addi	sp,sp,-16
   45040:	dc400115 	stw	r17,4(sp)
   45044:	2c7fffc4 	addi	r17,r5,-1
   45048:	8c401a24 	muli	r17,r17,104
   4504c:	dc800215 	stw	r18,8(sp)
   45050:	2825883a 	mov	r18,r5
   45054:	89401d04 	addi	r5,r17,116
   45058:	dc000015 	stw	r16,0(sp)
   4505c:	dfc00315 	stw	ra,12(sp)
   45060:	0045f340 	call	45f34 <_malloc_r>
   45064:	1021883a 	mov	r16,r2
   45068:	10000726 	beq	r2,zero,45088 <__sfmoreglue+0x4c>
   4506c:	11000304 	addi	r4,r2,12
   45070:	10000015 	stw	zero,0(r2)
   45074:	14800115 	stw	r18,4(r2)
   45078:	11000215 	stw	r4,8(r2)
   4507c:	89801a04 	addi	r6,r17,104
   45080:	000b883a 	mov	r5,zero
   45084:	0046ac80 	call	46ac8 <memset>
   45088:	8005883a 	mov	r2,r16
   4508c:	dfc00317 	ldw	ra,12(sp)
   45090:	dc800217 	ldw	r18,8(sp)
   45094:	dc400117 	ldw	r17,4(sp)
   45098:	dc000017 	ldw	r16,0(sp)
   4509c:	dec00404 	addi	sp,sp,16
   450a0:	f800283a 	ret

000450a4 <__sfp>:
   450a4:	defffb04 	addi	sp,sp,-20
   450a8:	dc000015 	stw	r16,0(sp)
   450ac:	04000174 	movhi	r16,5
   450b0:	84072704 	addi	r16,r16,7324
   450b4:	dcc00315 	stw	r19,12(sp)
   450b8:	2027883a 	mov	r19,r4
   450bc:	81000017 	ldw	r4,0(r16)
   450c0:	dfc00415 	stw	ra,16(sp)
   450c4:	dc800215 	stw	r18,8(sp)
   450c8:	20800e17 	ldw	r2,56(r4)
   450cc:	dc400115 	stw	r17,4(sp)
   450d0:	1000021e 	bne	r2,zero,450dc <__sfp+0x38>
   450d4:	0044e980 	call	44e98 <__sinit.part.1>
   450d8:	81000017 	ldw	r4,0(r16)
   450dc:	2480b804 	addi	r18,r4,736
   450e0:	047fffc4 	movi	r17,-1
   450e4:	91000117 	ldw	r4,4(r18)
   450e8:	94000217 	ldw	r16,8(r18)
   450ec:	213fffc4 	addi	r4,r4,-1
   450f0:	20000a16 	blt	r4,zero,4511c <__sfp+0x78>
   450f4:	8080030f 	ldh	r2,12(r16)
   450f8:	10000c26 	beq	r2,zero,4512c <__sfp+0x88>
   450fc:	80c01d04 	addi	r3,r16,116
   45100:	00000206 	br	4510c <__sfp+0x68>
   45104:	18bfe60f 	ldh	r2,-104(r3)
   45108:	10000826 	beq	r2,zero,4512c <__sfp+0x88>
   4510c:	213fffc4 	addi	r4,r4,-1
   45110:	1c3ffd04 	addi	r16,r3,-12
   45114:	18c01a04 	addi	r3,r3,104
   45118:	247ffa1e 	bne	r4,r17,45104 <__alt_data_end+0xfffd3104>
   4511c:	90800017 	ldw	r2,0(r18)
   45120:	10001d26 	beq	r2,zero,45198 <__sfp+0xf4>
   45124:	1025883a 	mov	r18,r2
   45128:	003fee06 	br	450e4 <__alt_data_end+0xfffd30e4>
   4512c:	00bfffc4 	movi	r2,-1
   45130:	8080038d 	sth	r2,14(r16)
   45134:	00800044 	movi	r2,1
   45138:	8080030d 	sth	r2,12(r16)
   4513c:	80001915 	stw	zero,100(r16)
   45140:	80000015 	stw	zero,0(r16)
   45144:	80000215 	stw	zero,8(r16)
   45148:	80000115 	stw	zero,4(r16)
   4514c:	80000415 	stw	zero,16(r16)
   45150:	80000515 	stw	zero,20(r16)
   45154:	80000615 	stw	zero,24(r16)
   45158:	01800204 	movi	r6,8
   4515c:	000b883a 	mov	r5,zero
   45160:	81001704 	addi	r4,r16,92
   45164:	0046ac80 	call	46ac8 <memset>
   45168:	8005883a 	mov	r2,r16
   4516c:	80000c15 	stw	zero,48(r16)
   45170:	80000d15 	stw	zero,52(r16)
   45174:	80001115 	stw	zero,68(r16)
   45178:	80001215 	stw	zero,72(r16)
   4517c:	dfc00417 	ldw	ra,16(sp)
   45180:	dcc00317 	ldw	r19,12(sp)
   45184:	dc800217 	ldw	r18,8(sp)
   45188:	dc400117 	ldw	r17,4(sp)
   4518c:	dc000017 	ldw	r16,0(sp)
   45190:	dec00504 	addi	sp,sp,20
   45194:	f800283a 	ret
   45198:	01400104 	movi	r5,4
   4519c:	9809883a 	mov	r4,r19
   451a0:	004503c0 	call	4503c <__sfmoreglue>
   451a4:	90800015 	stw	r2,0(r18)
   451a8:	103fde1e 	bne	r2,zero,45124 <__alt_data_end+0xfffd3124>
   451ac:	00800304 	movi	r2,12
   451b0:	98800015 	stw	r2,0(r19)
   451b4:	0005883a 	mov	r2,zero
   451b8:	003ff006 	br	4517c <__alt_data_end+0xfffd317c>

000451bc <_cleanup>:
   451bc:	00800174 	movhi	r2,5
   451c0:	10872704 	addi	r2,r2,7324
   451c4:	11000017 	ldw	r4,0(r2)
   451c8:	01400174 	movhi	r5,5
   451cc:	2966fc04 	addi	r5,r5,-25616
   451d0:	0045bd81 	jmpi	45bd8 <_fwalk_reent>

000451d4 <__sinit>:
   451d4:	20800e17 	ldw	r2,56(r4)
   451d8:	10000126 	beq	r2,zero,451e0 <__sinit+0xc>
   451dc:	f800283a 	ret
   451e0:	0044e981 	jmpi	44e98 <__sinit.part.1>

000451e4 <__sfp_lock_acquire>:
   451e4:	f800283a 	ret

000451e8 <__sfp_lock_release>:
   451e8:	f800283a 	ret

000451ec <__sinit_lock_acquire>:
   451ec:	f800283a 	ret

000451f0 <__sinit_lock_release>:
   451f0:	f800283a 	ret

000451f4 <__fp_lock_all>:
   451f4:	00800174 	movhi	r2,5
   451f8:	10872804 	addi	r2,r2,7328
   451fc:	11000017 	ldw	r4,0(r2)
   45200:	01400134 	movhi	r5,4
   45204:	29540d04 	addi	r5,r5,20532
   45208:	0045b141 	jmpi	45b14 <_fwalk>

0004520c <__fp_unlock_all>:
   4520c:	00800174 	movhi	r2,5
   45210:	10872804 	addi	r2,r2,7328
   45214:	11000017 	ldw	r4,0(r2)
   45218:	01400134 	movhi	r5,4
   4521c:	2953a104 	addi	r5,r5,20100
   45220:	0045b141 	jmpi	45b14 <_fwalk>

00045224 <_malloc_trim_r>:
   45224:	defffb04 	addi	sp,sp,-20
   45228:	dcc00315 	stw	r19,12(sp)
   4522c:	04c00174 	movhi	r19,5
   45230:	dc800215 	stw	r18,8(sp)
   45234:	dc400115 	stw	r17,4(sp)
   45238:	dc000015 	stw	r16,0(sp)
   4523c:	dfc00415 	stw	ra,16(sp)
   45240:	2821883a 	mov	r16,r5
   45244:	9cc1a304 	addi	r19,r19,1676
   45248:	2025883a 	mov	r18,r4
   4524c:	004dc280 	call	4dc28 <__malloc_lock>
   45250:	98800217 	ldw	r2,8(r19)
   45254:	14400117 	ldw	r17,4(r2)
   45258:	00bfff04 	movi	r2,-4
   4525c:	88a2703a 	and	r17,r17,r2
   45260:	8c21c83a 	sub	r16,r17,r16
   45264:	8403fbc4 	addi	r16,r16,4079
   45268:	8020d33a 	srli	r16,r16,12
   4526c:	0083ffc4 	movi	r2,4095
   45270:	843fffc4 	addi	r16,r16,-1
   45274:	8020933a 	slli	r16,r16,12
   45278:	1400060e 	bge	r2,r16,45294 <_malloc_trim_r+0x70>
   4527c:	000b883a 	mov	r5,zero
   45280:	9009883a 	mov	r4,r18
   45284:	00481c40 	call	481c4 <_sbrk_r>
   45288:	98c00217 	ldw	r3,8(r19)
   4528c:	1c47883a 	add	r3,r3,r17
   45290:	10c00a26 	beq	r2,r3,452bc <_malloc_trim_r+0x98>
   45294:	9009883a 	mov	r4,r18
   45298:	004dc4c0 	call	4dc4c <__malloc_unlock>
   4529c:	0005883a 	mov	r2,zero
   452a0:	dfc00417 	ldw	ra,16(sp)
   452a4:	dcc00317 	ldw	r19,12(sp)
   452a8:	dc800217 	ldw	r18,8(sp)
   452ac:	dc400117 	ldw	r17,4(sp)
   452b0:	dc000017 	ldw	r16,0(sp)
   452b4:	dec00504 	addi	sp,sp,20
   452b8:	f800283a 	ret
   452bc:	040bc83a 	sub	r5,zero,r16
   452c0:	9009883a 	mov	r4,r18
   452c4:	00481c40 	call	481c4 <_sbrk_r>
   452c8:	00ffffc4 	movi	r3,-1
   452cc:	10c00d26 	beq	r2,r3,45304 <_malloc_trim_r+0xe0>
   452d0:	00c00174 	movhi	r3,5
   452d4:	18ce0004 	addi	r3,r3,14336
   452d8:	18800017 	ldw	r2,0(r3)
   452dc:	99000217 	ldw	r4,8(r19)
   452e0:	8c23c83a 	sub	r17,r17,r16
   452e4:	8c400054 	ori	r17,r17,1
   452e8:	1421c83a 	sub	r16,r2,r16
   452ec:	24400115 	stw	r17,4(r4)
   452f0:	9009883a 	mov	r4,r18
   452f4:	1c000015 	stw	r16,0(r3)
   452f8:	004dc4c0 	call	4dc4c <__malloc_unlock>
   452fc:	00800044 	movi	r2,1
   45300:	003fe706 	br	452a0 <__alt_data_end+0xfffd32a0>
   45304:	000b883a 	mov	r5,zero
   45308:	9009883a 	mov	r4,r18
   4530c:	00481c40 	call	481c4 <_sbrk_r>
   45310:	99000217 	ldw	r4,8(r19)
   45314:	014003c4 	movi	r5,15
   45318:	1107c83a 	sub	r3,r2,r4
   4531c:	28ffdd0e 	bge	r5,r3,45294 <__alt_data_end+0xfffd3294>
   45320:	01400174 	movhi	r5,5
   45324:	29472a04 	addi	r5,r5,7336
   45328:	29400017 	ldw	r5,0(r5)
   4532c:	18c00054 	ori	r3,r3,1
   45330:	20c00115 	stw	r3,4(r4)
   45334:	00c00174 	movhi	r3,5
   45338:	1145c83a 	sub	r2,r2,r5
   4533c:	18ce0004 	addi	r3,r3,14336
   45340:	18800015 	stw	r2,0(r3)
   45344:	003fd306 	br	45294 <__alt_data_end+0xfffd3294>

00045348 <_free_r>:
   45348:	28004126 	beq	r5,zero,45450 <_free_r+0x108>
   4534c:	defffd04 	addi	sp,sp,-12
   45350:	dc400115 	stw	r17,4(sp)
   45354:	dc000015 	stw	r16,0(sp)
   45358:	2023883a 	mov	r17,r4
   4535c:	2821883a 	mov	r16,r5
   45360:	dfc00215 	stw	ra,8(sp)
   45364:	004dc280 	call	4dc28 <__malloc_lock>
   45368:	81ffff17 	ldw	r7,-4(r16)
   4536c:	00bfff84 	movi	r2,-2
   45370:	01000174 	movhi	r4,5
   45374:	81bffe04 	addi	r6,r16,-8
   45378:	3884703a 	and	r2,r7,r2
   4537c:	2101a304 	addi	r4,r4,1676
   45380:	308b883a 	add	r5,r6,r2
   45384:	2a400117 	ldw	r9,4(r5)
   45388:	22000217 	ldw	r8,8(r4)
   4538c:	00ffff04 	movi	r3,-4
   45390:	48c6703a 	and	r3,r9,r3
   45394:	2a005726 	beq	r5,r8,454f4 <_free_r+0x1ac>
   45398:	28c00115 	stw	r3,4(r5)
   4539c:	39c0004c 	andi	r7,r7,1
   453a0:	3800091e 	bne	r7,zero,453c8 <_free_r+0x80>
   453a4:	823ffe17 	ldw	r8,-8(r16)
   453a8:	22400204 	addi	r9,r4,8
   453ac:	320dc83a 	sub	r6,r6,r8
   453b0:	31c00217 	ldw	r7,8(r6)
   453b4:	1205883a 	add	r2,r2,r8
   453b8:	3a406526 	beq	r7,r9,45550 <_free_r+0x208>
   453bc:	32000317 	ldw	r8,12(r6)
   453c0:	3a000315 	stw	r8,12(r7)
   453c4:	41c00215 	stw	r7,8(r8)
   453c8:	28cf883a 	add	r7,r5,r3
   453cc:	39c00117 	ldw	r7,4(r7)
   453d0:	39c0004c 	andi	r7,r7,1
   453d4:	38003a26 	beq	r7,zero,454c0 <_free_r+0x178>
   453d8:	10c00054 	ori	r3,r2,1
   453dc:	30c00115 	stw	r3,4(r6)
   453e0:	3087883a 	add	r3,r6,r2
   453e4:	18800015 	stw	r2,0(r3)
   453e8:	00c07fc4 	movi	r3,511
   453ec:	18801936 	bltu	r3,r2,45454 <_free_r+0x10c>
   453f0:	1004d0fa 	srli	r2,r2,3
   453f4:	01c00044 	movi	r7,1
   453f8:	21400117 	ldw	r5,4(r4)
   453fc:	10c00044 	addi	r3,r2,1
   45400:	18c7883a 	add	r3,r3,r3
   45404:	1005d0ba 	srai	r2,r2,2
   45408:	18c7883a 	add	r3,r3,r3
   4540c:	18c7883a 	add	r3,r3,r3
   45410:	1907883a 	add	r3,r3,r4
   45414:	3884983a 	sll	r2,r7,r2
   45418:	19c00017 	ldw	r7,0(r3)
   4541c:	1a3ffe04 	addi	r8,r3,-8
   45420:	1144b03a 	or	r2,r2,r5
   45424:	32000315 	stw	r8,12(r6)
   45428:	31c00215 	stw	r7,8(r6)
   4542c:	20800115 	stw	r2,4(r4)
   45430:	19800015 	stw	r6,0(r3)
   45434:	39800315 	stw	r6,12(r7)
   45438:	8809883a 	mov	r4,r17
   4543c:	dfc00217 	ldw	ra,8(sp)
   45440:	dc400117 	ldw	r17,4(sp)
   45444:	dc000017 	ldw	r16,0(sp)
   45448:	dec00304 	addi	sp,sp,12
   4544c:	004dc4c1 	jmpi	4dc4c <__malloc_unlock>
   45450:	f800283a 	ret
   45454:	100ad27a 	srli	r5,r2,9
   45458:	00c00104 	movi	r3,4
   4545c:	19404a36 	bltu	r3,r5,45588 <_free_r+0x240>
   45460:	100ad1ba 	srli	r5,r2,6
   45464:	28c00e44 	addi	r3,r5,57
   45468:	18c7883a 	add	r3,r3,r3
   4546c:	29400e04 	addi	r5,r5,56
   45470:	18c7883a 	add	r3,r3,r3
   45474:	18c7883a 	add	r3,r3,r3
   45478:	1909883a 	add	r4,r3,r4
   4547c:	20c00017 	ldw	r3,0(r4)
   45480:	01c00174 	movhi	r7,5
   45484:	213ffe04 	addi	r4,r4,-8
   45488:	39c1a304 	addi	r7,r7,1676
   4548c:	20c04426 	beq	r4,r3,455a0 <_free_r+0x258>
   45490:	01ffff04 	movi	r7,-4
   45494:	19400117 	ldw	r5,4(r3)
   45498:	29ca703a 	and	r5,r5,r7
   4549c:	1140022e 	bgeu	r2,r5,454a8 <_free_r+0x160>
   454a0:	18c00217 	ldw	r3,8(r3)
   454a4:	20fffb1e 	bne	r4,r3,45494 <__alt_data_end+0xfffd3494>
   454a8:	19000317 	ldw	r4,12(r3)
   454ac:	31000315 	stw	r4,12(r6)
   454b0:	30c00215 	stw	r3,8(r6)
   454b4:	21800215 	stw	r6,8(r4)
   454b8:	19800315 	stw	r6,12(r3)
   454bc:	003fde06 	br	45438 <__alt_data_end+0xfffd3438>
   454c0:	29c00217 	ldw	r7,8(r5)
   454c4:	10c5883a 	add	r2,r2,r3
   454c8:	00c00174 	movhi	r3,5
   454cc:	18c1a504 	addi	r3,r3,1684
   454d0:	38c03b26 	beq	r7,r3,455c0 <_free_r+0x278>
   454d4:	2a000317 	ldw	r8,12(r5)
   454d8:	11400054 	ori	r5,r2,1
   454dc:	3087883a 	add	r3,r6,r2
   454e0:	3a000315 	stw	r8,12(r7)
   454e4:	41c00215 	stw	r7,8(r8)
   454e8:	31400115 	stw	r5,4(r6)
   454ec:	18800015 	stw	r2,0(r3)
   454f0:	003fbd06 	br	453e8 <__alt_data_end+0xfffd33e8>
   454f4:	39c0004c 	andi	r7,r7,1
   454f8:	10c5883a 	add	r2,r2,r3
   454fc:	3800071e 	bne	r7,zero,4551c <_free_r+0x1d4>
   45500:	81fffe17 	ldw	r7,-8(r16)
   45504:	31cdc83a 	sub	r6,r6,r7
   45508:	30c00317 	ldw	r3,12(r6)
   4550c:	31400217 	ldw	r5,8(r6)
   45510:	11c5883a 	add	r2,r2,r7
   45514:	28c00315 	stw	r3,12(r5)
   45518:	19400215 	stw	r5,8(r3)
   4551c:	10c00054 	ori	r3,r2,1
   45520:	30c00115 	stw	r3,4(r6)
   45524:	00c00174 	movhi	r3,5
   45528:	18c72b04 	addi	r3,r3,7340
   4552c:	18c00017 	ldw	r3,0(r3)
   45530:	21800215 	stw	r6,8(r4)
   45534:	10ffc036 	bltu	r2,r3,45438 <__alt_data_end+0xfffd3438>
   45538:	00800174 	movhi	r2,5
   4553c:	108df704 	addi	r2,r2,14300
   45540:	11400017 	ldw	r5,0(r2)
   45544:	8809883a 	mov	r4,r17
   45548:	00452240 	call	45224 <_malloc_trim_r>
   4554c:	003fba06 	br	45438 <__alt_data_end+0xfffd3438>
   45550:	28c9883a 	add	r4,r5,r3
   45554:	21000117 	ldw	r4,4(r4)
   45558:	2100004c 	andi	r4,r4,1
   4555c:	2000391e 	bne	r4,zero,45644 <_free_r+0x2fc>
   45560:	29c00217 	ldw	r7,8(r5)
   45564:	29000317 	ldw	r4,12(r5)
   45568:	1885883a 	add	r2,r3,r2
   4556c:	10c00054 	ori	r3,r2,1
   45570:	39000315 	stw	r4,12(r7)
   45574:	21c00215 	stw	r7,8(r4)
   45578:	30c00115 	stw	r3,4(r6)
   4557c:	308d883a 	add	r6,r6,r2
   45580:	30800015 	stw	r2,0(r6)
   45584:	003fac06 	br	45438 <__alt_data_end+0xfffd3438>
   45588:	00c00504 	movi	r3,20
   4558c:	19401536 	bltu	r3,r5,455e4 <_free_r+0x29c>
   45590:	28c01704 	addi	r3,r5,92
   45594:	18c7883a 	add	r3,r3,r3
   45598:	294016c4 	addi	r5,r5,91
   4559c:	003fb406 	br	45470 <__alt_data_end+0xfffd3470>
   455a0:	280bd0ba 	srai	r5,r5,2
   455a4:	00c00044 	movi	r3,1
   455a8:	38800117 	ldw	r2,4(r7)
   455ac:	194a983a 	sll	r5,r3,r5
   455b0:	2007883a 	mov	r3,r4
   455b4:	2884b03a 	or	r2,r5,r2
   455b8:	38800115 	stw	r2,4(r7)
   455bc:	003fbb06 	br	454ac <__alt_data_end+0xfffd34ac>
   455c0:	21800515 	stw	r6,20(r4)
   455c4:	21800415 	stw	r6,16(r4)
   455c8:	10c00054 	ori	r3,r2,1
   455cc:	31c00315 	stw	r7,12(r6)
   455d0:	31c00215 	stw	r7,8(r6)
   455d4:	30c00115 	stw	r3,4(r6)
   455d8:	308d883a 	add	r6,r6,r2
   455dc:	30800015 	stw	r2,0(r6)
   455e0:	003f9506 	br	45438 <__alt_data_end+0xfffd3438>
   455e4:	00c01504 	movi	r3,84
   455e8:	19400536 	bltu	r3,r5,45600 <_free_r+0x2b8>
   455ec:	100ad33a 	srli	r5,r2,12
   455f0:	28c01bc4 	addi	r3,r5,111
   455f4:	18c7883a 	add	r3,r3,r3
   455f8:	29401b84 	addi	r5,r5,110
   455fc:	003f9c06 	br	45470 <__alt_data_end+0xfffd3470>
   45600:	00c05504 	movi	r3,340
   45604:	19400536 	bltu	r3,r5,4561c <_free_r+0x2d4>
   45608:	100ad3fa 	srli	r5,r2,15
   4560c:	28c01e04 	addi	r3,r5,120
   45610:	18c7883a 	add	r3,r3,r3
   45614:	29401dc4 	addi	r5,r5,119
   45618:	003f9506 	br	45470 <__alt_data_end+0xfffd3470>
   4561c:	00c15504 	movi	r3,1364
   45620:	19400536 	bltu	r3,r5,45638 <_free_r+0x2f0>
   45624:	100ad4ba 	srli	r5,r2,18
   45628:	28c01f44 	addi	r3,r5,125
   4562c:	18c7883a 	add	r3,r3,r3
   45630:	29401f04 	addi	r5,r5,124
   45634:	003f8e06 	br	45470 <__alt_data_end+0xfffd3470>
   45638:	00c03f84 	movi	r3,254
   4563c:	01401f84 	movi	r5,126
   45640:	003f8b06 	br	45470 <__alt_data_end+0xfffd3470>
   45644:	10c00054 	ori	r3,r2,1
   45648:	30c00115 	stw	r3,4(r6)
   4564c:	308d883a 	add	r6,r6,r2
   45650:	30800015 	stw	r2,0(r6)
   45654:	003f7806 	br	45438 <__alt_data_end+0xfffd3438>

00045658 <__sfvwrite_r>:
   45658:	30800217 	ldw	r2,8(r6)
   4565c:	10006726 	beq	r2,zero,457fc <__sfvwrite_r+0x1a4>
   45660:	28c0030b 	ldhu	r3,12(r5)
   45664:	defff404 	addi	sp,sp,-48
   45668:	dd400715 	stw	r21,28(sp)
   4566c:	dd000615 	stw	r20,24(sp)
   45670:	dc000215 	stw	r16,8(sp)
   45674:	dfc00b15 	stw	ra,44(sp)
   45678:	df000a15 	stw	fp,40(sp)
   4567c:	ddc00915 	stw	r23,36(sp)
   45680:	dd800815 	stw	r22,32(sp)
   45684:	dcc00515 	stw	r19,20(sp)
   45688:	dc800415 	stw	r18,16(sp)
   4568c:	dc400315 	stw	r17,12(sp)
   45690:	1880020c 	andi	r2,r3,8
   45694:	2821883a 	mov	r16,r5
   45698:	202b883a 	mov	r21,r4
   4569c:	3029883a 	mov	r20,r6
   456a0:	10002726 	beq	r2,zero,45740 <__sfvwrite_r+0xe8>
   456a4:	28800417 	ldw	r2,16(r5)
   456a8:	10002526 	beq	r2,zero,45740 <__sfvwrite_r+0xe8>
   456ac:	1880008c 	andi	r2,r3,2
   456b0:	a4400017 	ldw	r17,0(r20)
   456b4:	10002a26 	beq	r2,zero,45760 <__sfvwrite_r+0x108>
   456b8:	05a00034 	movhi	r22,32768
   456bc:	0027883a 	mov	r19,zero
   456c0:	0025883a 	mov	r18,zero
   456c4:	b5bf0004 	addi	r22,r22,-1024
   456c8:	980d883a 	mov	r6,r19
   456cc:	a809883a 	mov	r4,r21
   456d0:	90004626 	beq	r18,zero,457ec <__sfvwrite_r+0x194>
   456d4:	900f883a 	mov	r7,r18
   456d8:	b480022e 	bgeu	r22,r18,456e4 <__sfvwrite_r+0x8c>
   456dc:	01e00034 	movhi	r7,32768
   456e0:	39ff0004 	addi	r7,r7,-1024
   456e4:	80800917 	ldw	r2,36(r16)
   456e8:	81400717 	ldw	r5,28(r16)
   456ec:	103ee83a 	callr	r2
   456f0:	0080570e 	bge	zero,r2,45850 <__sfvwrite_r+0x1f8>
   456f4:	a0c00217 	ldw	r3,8(r20)
   456f8:	98a7883a 	add	r19,r19,r2
   456fc:	90a5c83a 	sub	r18,r18,r2
   45700:	1885c83a 	sub	r2,r3,r2
   45704:	a0800215 	stw	r2,8(r20)
   45708:	103fef1e 	bne	r2,zero,456c8 <__alt_data_end+0xfffd36c8>
   4570c:	0005883a 	mov	r2,zero
   45710:	dfc00b17 	ldw	ra,44(sp)
   45714:	df000a17 	ldw	fp,40(sp)
   45718:	ddc00917 	ldw	r23,36(sp)
   4571c:	dd800817 	ldw	r22,32(sp)
   45720:	dd400717 	ldw	r21,28(sp)
   45724:	dd000617 	ldw	r20,24(sp)
   45728:	dcc00517 	ldw	r19,20(sp)
   4572c:	dc800417 	ldw	r18,16(sp)
   45730:	dc400317 	ldw	r17,12(sp)
   45734:	dc000217 	ldw	r16,8(sp)
   45738:	dec00c04 	addi	sp,sp,48
   4573c:	f800283a 	ret
   45740:	800b883a 	mov	r5,r16
   45744:	a809883a 	mov	r4,r21
   45748:	00430800 	call	43080 <__swsetup_r>
   4574c:	1000eb1e 	bne	r2,zero,45afc <__sfvwrite_r+0x4a4>
   45750:	80c0030b 	ldhu	r3,12(r16)
   45754:	a4400017 	ldw	r17,0(r20)
   45758:	1880008c 	andi	r2,r3,2
   4575c:	103fd61e 	bne	r2,zero,456b8 <__alt_data_end+0xfffd36b8>
   45760:	1880004c 	andi	r2,r3,1
   45764:	10003f1e 	bne	r2,zero,45864 <__sfvwrite_r+0x20c>
   45768:	0039883a 	mov	fp,zero
   4576c:	0025883a 	mov	r18,zero
   45770:	90001a26 	beq	r18,zero,457dc <__sfvwrite_r+0x184>
   45774:	1880800c 	andi	r2,r3,512
   45778:	84c00217 	ldw	r19,8(r16)
   4577c:	10002126 	beq	r2,zero,45804 <__sfvwrite_r+0x1ac>
   45780:	982f883a 	mov	r23,r19
   45784:	94c09336 	bltu	r18,r19,459d4 <__sfvwrite_r+0x37c>
   45788:	1881200c 	andi	r2,r3,1152
   4578c:	10009e1e 	bne	r2,zero,45a08 <__sfvwrite_r+0x3b0>
   45790:	81000017 	ldw	r4,0(r16)
   45794:	b80d883a 	mov	r6,r23
   45798:	e00b883a 	mov	r5,fp
   4579c:	004696c0 	call	4696c <memmove>
   457a0:	80c00217 	ldw	r3,8(r16)
   457a4:	81000017 	ldw	r4,0(r16)
   457a8:	9005883a 	mov	r2,r18
   457ac:	1ce7c83a 	sub	r19,r3,r19
   457b0:	25cf883a 	add	r7,r4,r23
   457b4:	84c00215 	stw	r19,8(r16)
   457b8:	81c00015 	stw	r7,0(r16)
   457bc:	a0c00217 	ldw	r3,8(r20)
   457c0:	e0b9883a 	add	fp,fp,r2
   457c4:	90a5c83a 	sub	r18,r18,r2
   457c8:	18a7c83a 	sub	r19,r3,r2
   457cc:	a4c00215 	stw	r19,8(r20)
   457d0:	983fce26 	beq	r19,zero,4570c <__alt_data_end+0xfffd370c>
   457d4:	80c0030b 	ldhu	r3,12(r16)
   457d8:	903fe61e 	bne	r18,zero,45774 <__alt_data_end+0xfffd3774>
   457dc:	8f000017 	ldw	fp,0(r17)
   457e0:	8c800117 	ldw	r18,4(r17)
   457e4:	8c400204 	addi	r17,r17,8
   457e8:	003fe106 	br	45770 <__alt_data_end+0xfffd3770>
   457ec:	8cc00017 	ldw	r19,0(r17)
   457f0:	8c800117 	ldw	r18,4(r17)
   457f4:	8c400204 	addi	r17,r17,8
   457f8:	003fb306 	br	456c8 <__alt_data_end+0xfffd36c8>
   457fc:	0005883a 	mov	r2,zero
   45800:	f800283a 	ret
   45804:	81000017 	ldw	r4,0(r16)
   45808:	80800417 	ldw	r2,16(r16)
   4580c:	11005736 	bltu	r2,r4,4596c <__sfvwrite_r+0x314>
   45810:	85c00517 	ldw	r23,20(r16)
   45814:	95c05536 	bltu	r18,r23,4596c <__sfvwrite_r+0x314>
   45818:	00a00034 	movhi	r2,32768
   4581c:	10bfffc4 	addi	r2,r2,-1
   45820:	9009883a 	mov	r4,r18
   45824:	1480012e 	bgeu	r2,r18,4582c <__sfvwrite_r+0x1d4>
   45828:	1009883a 	mov	r4,r2
   4582c:	b80b883a 	mov	r5,r23
   45830:	004ae5c0 	call	4ae5c <__divsi3>
   45834:	15cf383a 	mul	r7,r2,r23
   45838:	81400717 	ldw	r5,28(r16)
   4583c:	80800917 	ldw	r2,36(r16)
   45840:	e00d883a 	mov	r6,fp
   45844:	a809883a 	mov	r4,r21
   45848:	103ee83a 	callr	r2
   4584c:	00bfdb16 	blt	zero,r2,457bc <__alt_data_end+0xfffd37bc>
   45850:	8080030b 	ldhu	r2,12(r16)
   45854:	10801014 	ori	r2,r2,64
   45858:	8080030d 	sth	r2,12(r16)
   4585c:	00bfffc4 	movi	r2,-1
   45860:	003fab06 	br	45710 <__alt_data_end+0xfffd3710>
   45864:	0027883a 	mov	r19,zero
   45868:	0011883a 	mov	r8,zero
   4586c:	0039883a 	mov	fp,zero
   45870:	0025883a 	mov	r18,zero
   45874:	90001f26 	beq	r18,zero,458f4 <__sfvwrite_r+0x29c>
   45878:	40005a26 	beq	r8,zero,459e4 <__sfvwrite_r+0x38c>
   4587c:	982d883a 	mov	r22,r19
   45880:	94c0012e 	bgeu	r18,r19,45888 <__sfvwrite_r+0x230>
   45884:	902d883a 	mov	r22,r18
   45888:	81000017 	ldw	r4,0(r16)
   4588c:	80800417 	ldw	r2,16(r16)
   45890:	b02f883a 	mov	r23,r22
   45894:	81c00517 	ldw	r7,20(r16)
   45898:	1100032e 	bgeu	r2,r4,458a8 <__sfvwrite_r+0x250>
   4589c:	80c00217 	ldw	r3,8(r16)
   458a0:	38c7883a 	add	r3,r7,r3
   458a4:	1d801816 	blt	r3,r22,45908 <__sfvwrite_r+0x2b0>
   458a8:	b1c03e16 	blt	r22,r7,459a4 <__sfvwrite_r+0x34c>
   458ac:	80800917 	ldw	r2,36(r16)
   458b0:	81400717 	ldw	r5,28(r16)
   458b4:	e00d883a 	mov	r6,fp
   458b8:	da000115 	stw	r8,4(sp)
   458bc:	a809883a 	mov	r4,r21
   458c0:	103ee83a 	callr	r2
   458c4:	102f883a 	mov	r23,r2
   458c8:	da000117 	ldw	r8,4(sp)
   458cc:	00bfe00e 	bge	zero,r2,45850 <__alt_data_end+0xfffd3850>
   458d0:	9de7c83a 	sub	r19,r19,r23
   458d4:	98001f26 	beq	r19,zero,45954 <__sfvwrite_r+0x2fc>
   458d8:	a0800217 	ldw	r2,8(r20)
   458dc:	e5f9883a 	add	fp,fp,r23
   458e0:	95e5c83a 	sub	r18,r18,r23
   458e4:	15efc83a 	sub	r23,r2,r23
   458e8:	a5c00215 	stw	r23,8(r20)
   458ec:	b83f8726 	beq	r23,zero,4570c <__alt_data_end+0xfffd370c>
   458f0:	903fe11e 	bne	r18,zero,45878 <__alt_data_end+0xfffd3878>
   458f4:	8f000017 	ldw	fp,0(r17)
   458f8:	8c800117 	ldw	r18,4(r17)
   458fc:	0011883a 	mov	r8,zero
   45900:	8c400204 	addi	r17,r17,8
   45904:	003fdb06 	br	45874 <__alt_data_end+0xfffd3874>
   45908:	180d883a 	mov	r6,r3
   4590c:	e00b883a 	mov	r5,fp
   45910:	da000115 	stw	r8,4(sp)
   45914:	d8c00015 	stw	r3,0(sp)
   45918:	004696c0 	call	4696c <memmove>
   4591c:	d8c00017 	ldw	r3,0(sp)
   45920:	80800017 	ldw	r2,0(r16)
   45924:	800b883a 	mov	r5,r16
   45928:	a809883a 	mov	r4,r21
   4592c:	10c5883a 	add	r2,r2,r3
   45930:	80800015 	stw	r2,0(r16)
   45934:	d8c00015 	stw	r3,0(sp)
   45938:	0044df80 	call	44df8 <_fflush_r>
   4593c:	d8c00017 	ldw	r3,0(sp)
   45940:	da000117 	ldw	r8,4(sp)
   45944:	103fc21e 	bne	r2,zero,45850 <__alt_data_end+0xfffd3850>
   45948:	182f883a 	mov	r23,r3
   4594c:	9de7c83a 	sub	r19,r19,r23
   45950:	983fe11e 	bne	r19,zero,458d8 <__alt_data_end+0xfffd38d8>
   45954:	800b883a 	mov	r5,r16
   45958:	a809883a 	mov	r4,r21
   4595c:	0044df80 	call	44df8 <_fflush_r>
   45960:	103fbb1e 	bne	r2,zero,45850 <__alt_data_end+0xfffd3850>
   45964:	0011883a 	mov	r8,zero
   45968:	003fdb06 	br	458d8 <__alt_data_end+0xfffd38d8>
   4596c:	94c0012e 	bgeu	r18,r19,45974 <__sfvwrite_r+0x31c>
   45970:	9027883a 	mov	r19,r18
   45974:	980d883a 	mov	r6,r19
   45978:	e00b883a 	mov	r5,fp
   4597c:	004696c0 	call	4696c <memmove>
   45980:	80800217 	ldw	r2,8(r16)
   45984:	80c00017 	ldw	r3,0(r16)
   45988:	14c5c83a 	sub	r2,r2,r19
   4598c:	1cc7883a 	add	r3,r3,r19
   45990:	80800215 	stw	r2,8(r16)
   45994:	80c00015 	stw	r3,0(r16)
   45998:	10004326 	beq	r2,zero,45aa8 <__sfvwrite_r+0x450>
   4599c:	9805883a 	mov	r2,r19
   459a0:	003f8606 	br	457bc <__alt_data_end+0xfffd37bc>
   459a4:	b00d883a 	mov	r6,r22
   459a8:	e00b883a 	mov	r5,fp
   459ac:	da000115 	stw	r8,4(sp)
   459b0:	004696c0 	call	4696c <memmove>
   459b4:	80800217 	ldw	r2,8(r16)
   459b8:	80c00017 	ldw	r3,0(r16)
   459bc:	da000117 	ldw	r8,4(sp)
   459c0:	1585c83a 	sub	r2,r2,r22
   459c4:	1dad883a 	add	r22,r3,r22
   459c8:	80800215 	stw	r2,8(r16)
   459cc:	85800015 	stw	r22,0(r16)
   459d0:	003fbf06 	br	458d0 <__alt_data_end+0xfffd38d0>
   459d4:	81000017 	ldw	r4,0(r16)
   459d8:	9027883a 	mov	r19,r18
   459dc:	902f883a 	mov	r23,r18
   459e0:	003f6c06 	br	45794 <__alt_data_end+0xfffd3794>
   459e4:	900d883a 	mov	r6,r18
   459e8:	01400284 	movi	r5,10
   459ec:	e009883a 	mov	r4,fp
   459f0:	00467400 	call	46740 <memchr>
   459f4:	10003e26 	beq	r2,zero,45af0 <__sfvwrite_r+0x498>
   459f8:	10800044 	addi	r2,r2,1
   459fc:	1727c83a 	sub	r19,r2,fp
   45a00:	02000044 	movi	r8,1
   45a04:	003f9d06 	br	4587c <__alt_data_end+0xfffd387c>
   45a08:	80800517 	ldw	r2,20(r16)
   45a0c:	81400417 	ldw	r5,16(r16)
   45a10:	81c00017 	ldw	r7,0(r16)
   45a14:	10a7883a 	add	r19,r2,r2
   45a18:	9885883a 	add	r2,r19,r2
   45a1c:	1026d7fa 	srli	r19,r2,31
   45a20:	396dc83a 	sub	r22,r7,r5
   45a24:	b1000044 	addi	r4,r22,1
   45a28:	9885883a 	add	r2,r19,r2
   45a2c:	1027d07a 	srai	r19,r2,1
   45a30:	2485883a 	add	r2,r4,r18
   45a34:	980d883a 	mov	r6,r19
   45a38:	9880022e 	bgeu	r19,r2,45a44 <__sfvwrite_r+0x3ec>
   45a3c:	1027883a 	mov	r19,r2
   45a40:	100d883a 	mov	r6,r2
   45a44:	18c1000c 	andi	r3,r3,1024
   45a48:	18001c26 	beq	r3,zero,45abc <__sfvwrite_r+0x464>
   45a4c:	300b883a 	mov	r5,r6
   45a50:	a809883a 	mov	r4,r21
   45a54:	0045f340 	call	45f34 <_malloc_r>
   45a58:	102f883a 	mov	r23,r2
   45a5c:	10002926 	beq	r2,zero,45b04 <__sfvwrite_r+0x4ac>
   45a60:	81400417 	ldw	r5,16(r16)
   45a64:	b00d883a 	mov	r6,r22
   45a68:	1009883a 	mov	r4,r2
   45a6c:	00468240 	call	46824 <memcpy>
   45a70:	8080030b 	ldhu	r2,12(r16)
   45a74:	00fedfc4 	movi	r3,-1153
   45a78:	10c4703a 	and	r2,r2,r3
   45a7c:	10802014 	ori	r2,r2,128
   45a80:	8080030d 	sth	r2,12(r16)
   45a84:	bd89883a 	add	r4,r23,r22
   45a88:	9d8fc83a 	sub	r7,r19,r22
   45a8c:	85c00415 	stw	r23,16(r16)
   45a90:	84c00515 	stw	r19,20(r16)
   45a94:	81000015 	stw	r4,0(r16)
   45a98:	9027883a 	mov	r19,r18
   45a9c:	81c00215 	stw	r7,8(r16)
   45aa0:	902f883a 	mov	r23,r18
   45aa4:	003f3b06 	br	45794 <__alt_data_end+0xfffd3794>
   45aa8:	800b883a 	mov	r5,r16
   45aac:	a809883a 	mov	r4,r21
   45ab0:	0044df80 	call	44df8 <_fflush_r>
   45ab4:	103fb926 	beq	r2,zero,4599c <__alt_data_end+0xfffd399c>
   45ab8:	003f6506 	br	45850 <__alt_data_end+0xfffd3850>
   45abc:	a809883a 	mov	r4,r21
   45ac0:	0047bec0 	call	47bec <_realloc_r>
   45ac4:	102f883a 	mov	r23,r2
   45ac8:	103fee1e 	bne	r2,zero,45a84 <__alt_data_end+0xfffd3a84>
   45acc:	81400417 	ldw	r5,16(r16)
   45ad0:	a809883a 	mov	r4,r21
   45ad4:	00453480 	call	45348 <_free_r>
   45ad8:	8080030b 	ldhu	r2,12(r16)
   45adc:	00ffdfc4 	movi	r3,-129
   45ae0:	1884703a 	and	r2,r3,r2
   45ae4:	00c00304 	movi	r3,12
   45ae8:	a8c00015 	stw	r3,0(r21)
   45aec:	003f5906 	br	45854 <__alt_data_end+0xfffd3854>
   45af0:	94c00044 	addi	r19,r18,1
   45af4:	02000044 	movi	r8,1
   45af8:	003f6006 	br	4587c <__alt_data_end+0xfffd387c>
   45afc:	00bfffc4 	movi	r2,-1
   45b00:	003f0306 	br	45710 <__alt_data_end+0xfffd3710>
   45b04:	00800304 	movi	r2,12
   45b08:	a8800015 	stw	r2,0(r21)
   45b0c:	8080030b 	ldhu	r2,12(r16)
   45b10:	003f5006 	br	45854 <__alt_data_end+0xfffd3854>

00045b14 <_fwalk>:
   45b14:	defff704 	addi	sp,sp,-36
   45b18:	dd000415 	stw	r20,16(sp)
   45b1c:	dfc00815 	stw	ra,32(sp)
   45b20:	ddc00715 	stw	r23,28(sp)
   45b24:	dd800615 	stw	r22,24(sp)
   45b28:	dd400515 	stw	r21,20(sp)
   45b2c:	dcc00315 	stw	r19,12(sp)
   45b30:	dc800215 	stw	r18,8(sp)
   45b34:	dc400115 	stw	r17,4(sp)
   45b38:	dc000015 	stw	r16,0(sp)
   45b3c:	2500b804 	addi	r20,r4,736
   45b40:	a0002326 	beq	r20,zero,45bd0 <_fwalk+0xbc>
   45b44:	282b883a 	mov	r21,r5
   45b48:	002f883a 	mov	r23,zero
   45b4c:	05800044 	movi	r22,1
   45b50:	04ffffc4 	movi	r19,-1
   45b54:	a4400117 	ldw	r17,4(r20)
   45b58:	a4800217 	ldw	r18,8(r20)
   45b5c:	8c7fffc4 	addi	r17,r17,-1
   45b60:	88000d16 	blt	r17,zero,45b98 <_fwalk+0x84>
   45b64:	94000304 	addi	r16,r18,12
   45b68:	94800384 	addi	r18,r18,14
   45b6c:	8080000b 	ldhu	r2,0(r16)
   45b70:	8c7fffc4 	addi	r17,r17,-1
   45b74:	813ffd04 	addi	r4,r16,-12
   45b78:	b080042e 	bgeu	r22,r2,45b8c <_fwalk+0x78>
   45b7c:	9080000f 	ldh	r2,0(r18)
   45b80:	14c00226 	beq	r2,r19,45b8c <_fwalk+0x78>
   45b84:	a83ee83a 	callr	r21
   45b88:	b8aeb03a 	or	r23,r23,r2
   45b8c:	84001a04 	addi	r16,r16,104
   45b90:	94801a04 	addi	r18,r18,104
   45b94:	8cfff51e 	bne	r17,r19,45b6c <__alt_data_end+0xfffd3b6c>
   45b98:	a5000017 	ldw	r20,0(r20)
   45b9c:	a03fed1e 	bne	r20,zero,45b54 <__alt_data_end+0xfffd3b54>
   45ba0:	b805883a 	mov	r2,r23
   45ba4:	dfc00817 	ldw	ra,32(sp)
   45ba8:	ddc00717 	ldw	r23,28(sp)
   45bac:	dd800617 	ldw	r22,24(sp)
   45bb0:	dd400517 	ldw	r21,20(sp)
   45bb4:	dd000417 	ldw	r20,16(sp)
   45bb8:	dcc00317 	ldw	r19,12(sp)
   45bbc:	dc800217 	ldw	r18,8(sp)
   45bc0:	dc400117 	ldw	r17,4(sp)
   45bc4:	dc000017 	ldw	r16,0(sp)
   45bc8:	dec00904 	addi	sp,sp,36
   45bcc:	f800283a 	ret
   45bd0:	002f883a 	mov	r23,zero
   45bd4:	003ff206 	br	45ba0 <__alt_data_end+0xfffd3ba0>

00045bd8 <_fwalk_reent>:
   45bd8:	defff704 	addi	sp,sp,-36
   45bdc:	dd000415 	stw	r20,16(sp)
   45be0:	dfc00815 	stw	ra,32(sp)
   45be4:	ddc00715 	stw	r23,28(sp)
   45be8:	dd800615 	stw	r22,24(sp)
   45bec:	dd400515 	stw	r21,20(sp)
   45bf0:	dcc00315 	stw	r19,12(sp)
   45bf4:	dc800215 	stw	r18,8(sp)
   45bf8:	dc400115 	stw	r17,4(sp)
   45bfc:	dc000015 	stw	r16,0(sp)
   45c00:	2500b804 	addi	r20,r4,736
   45c04:	a0002326 	beq	r20,zero,45c94 <_fwalk_reent+0xbc>
   45c08:	282b883a 	mov	r21,r5
   45c0c:	2027883a 	mov	r19,r4
   45c10:	002f883a 	mov	r23,zero
   45c14:	05800044 	movi	r22,1
   45c18:	04bfffc4 	movi	r18,-1
   45c1c:	a4400117 	ldw	r17,4(r20)
   45c20:	a4000217 	ldw	r16,8(r20)
   45c24:	8c7fffc4 	addi	r17,r17,-1
   45c28:	88000c16 	blt	r17,zero,45c5c <_fwalk_reent+0x84>
   45c2c:	84000304 	addi	r16,r16,12
   45c30:	8080000b 	ldhu	r2,0(r16)
   45c34:	8c7fffc4 	addi	r17,r17,-1
   45c38:	817ffd04 	addi	r5,r16,-12
   45c3c:	b080052e 	bgeu	r22,r2,45c54 <_fwalk_reent+0x7c>
   45c40:	8080008f 	ldh	r2,2(r16)
   45c44:	9809883a 	mov	r4,r19
   45c48:	14800226 	beq	r2,r18,45c54 <_fwalk_reent+0x7c>
   45c4c:	a83ee83a 	callr	r21
   45c50:	b8aeb03a 	or	r23,r23,r2
   45c54:	84001a04 	addi	r16,r16,104
   45c58:	8cbff51e 	bne	r17,r18,45c30 <__alt_data_end+0xfffd3c30>
   45c5c:	a5000017 	ldw	r20,0(r20)
   45c60:	a03fee1e 	bne	r20,zero,45c1c <__alt_data_end+0xfffd3c1c>
   45c64:	b805883a 	mov	r2,r23
   45c68:	dfc00817 	ldw	ra,32(sp)
   45c6c:	ddc00717 	ldw	r23,28(sp)
   45c70:	dd800617 	ldw	r22,24(sp)
   45c74:	dd400517 	ldw	r21,20(sp)
   45c78:	dd000417 	ldw	r20,16(sp)
   45c7c:	dcc00317 	ldw	r19,12(sp)
   45c80:	dc800217 	ldw	r18,8(sp)
   45c84:	dc400117 	ldw	r17,4(sp)
   45c88:	dc000017 	ldw	r16,0(sp)
   45c8c:	dec00904 	addi	sp,sp,36
   45c90:	f800283a 	ret
   45c94:	002f883a 	mov	r23,zero
   45c98:	003ff206 	br	45c64 <__alt_data_end+0xfffd3c64>

00045c9c <_setlocale_r>:
   45c9c:	30001b26 	beq	r6,zero,45d0c <_setlocale_r+0x70>
   45ca0:	01400174 	movhi	r5,5
   45ca4:	defffe04 	addi	sp,sp,-8
   45ca8:	297fdd04 	addi	r5,r5,-140
   45cac:	3009883a 	mov	r4,r6
   45cb0:	dc000015 	stw	r16,0(sp)
   45cb4:	dfc00115 	stw	ra,4(sp)
   45cb8:	3021883a 	mov	r16,r6
   45cbc:	00483540 	call	48354 <strcmp>
   45cc0:	1000061e 	bne	r2,zero,45cdc <_setlocale_r+0x40>
   45cc4:	00800174 	movhi	r2,5
   45cc8:	10bfbe04 	addi	r2,r2,-264
   45ccc:	dfc00117 	ldw	ra,4(sp)
   45cd0:	dc000017 	ldw	r16,0(sp)
   45cd4:	dec00204 	addi	sp,sp,8
   45cd8:	f800283a 	ret
   45cdc:	01400174 	movhi	r5,5
   45ce0:	297fbe04 	addi	r5,r5,-264
   45ce4:	8009883a 	mov	r4,r16
   45ce8:	00483540 	call	48354 <strcmp>
   45cec:	103ff526 	beq	r2,zero,45cc4 <__alt_data_end+0xfffd3cc4>
   45cf0:	01400174 	movhi	r5,5
   45cf4:	297fc804 	addi	r5,r5,-224
   45cf8:	8009883a 	mov	r4,r16
   45cfc:	00483540 	call	48354 <strcmp>
   45d00:	103ff026 	beq	r2,zero,45cc4 <__alt_data_end+0xfffd3cc4>
   45d04:	0005883a 	mov	r2,zero
   45d08:	003ff006 	br	45ccc <__alt_data_end+0xfffd3ccc>
   45d0c:	00800174 	movhi	r2,5
   45d10:	10bfbe04 	addi	r2,r2,-264
   45d14:	f800283a 	ret

00045d18 <__locale_charset>:
   45d18:	00800174 	movhi	r2,5
   45d1c:	10818d04 	addi	r2,r2,1588
   45d20:	f800283a 	ret

00045d24 <__locale_mb_cur_max>:
   45d24:	00800174 	movhi	r2,5
   45d28:	10872904 	addi	r2,r2,7332
   45d2c:	10800017 	ldw	r2,0(r2)
   45d30:	f800283a 	ret

00045d34 <__locale_msgcharset>:
   45d34:	00800174 	movhi	r2,5
   45d38:	10818504 	addi	r2,r2,1556
   45d3c:	f800283a 	ret

00045d40 <__locale_cjk_lang>:
   45d40:	0005883a 	mov	r2,zero
   45d44:	f800283a 	ret

00045d48 <_localeconv_r>:
   45d48:	00800174 	movhi	r2,5
   45d4c:	10819504 	addi	r2,r2,1620
   45d50:	f800283a 	ret

00045d54 <setlocale>:
   45d54:	00800174 	movhi	r2,5
   45d58:	10872804 	addi	r2,r2,7328
   45d5c:	280d883a 	mov	r6,r5
   45d60:	200b883a 	mov	r5,r4
   45d64:	11000017 	ldw	r4,0(r2)
   45d68:	0045c9c1 	jmpi	45c9c <_setlocale_r>

00045d6c <localeconv>:
   45d6c:	00800174 	movhi	r2,5
   45d70:	10819504 	addi	r2,r2,1620
   45d74:	f800283a 	ret

00045d78 <__smakebuf_r>:
   45d78:	2880030b 	ldhu	r2,12(r5)
   45d7c:	10c0008c 	andi	r3,r2,2
   45d80:	1800411e 	bne	r3,zero,45e88 <__smakebuf_r+0x110>
   45d84:	deffec04 	addi	sp,sp,-80
   45d88:	dc000f15 	stw	r16,60(sp)
   45d8c:	2821883a 	mov	r16,r5
   45d90:	2940038f 	ldh	r5,14(r5)
   45d94:	dc401015 	stw	r17,64(sp)
   45d98:	dfc01315 	stw	ra,76(sp)
   45d9c:	dcc01215 	stw	r19,72(sp)
   45da0:	dc801115 	stw	r18,68(sp)
   45da4:	2023883a 	mov	r17,r4
   45da8:	28001c16 	blt	r5,zero,45e1c <__smakebuf_r+0xa4>
   45dac:	d80d883a 	mov	r6,sp
   45db0:	0049efc0 	call	49efc <_fstat_r>
   45db4:	10001816 	blt	r2,zero,45e18 <__smakebuf_r+0xa0>
   45db8:	d8800117 	ldw	r2,4(sp)
   45dbc:	00e00014 	movui	r3,32768
   45dc0:	10bc000c 	andi	r2,r2,61440
   45dc4:	14c80020 	cmpeqi	r19,r2,8192
   45dc8:	10c03726 	beq	r2,r3,45ea8 <__smakebuf_r+0x130>
   45dcc:	80c0030b 	ldhu	r3,12(r16)
   45dd0:	18c20014 	ori	r3,r3,2048
   45dd4:	80c0030d 	sth	r3,12(r16)
   45dd8:	00c80004 	movi	r3,8192
   45ddc:	10c0521e 	bne	r2,r3,45f28 <__smakebuf_r+0x1b0>
   45de0:	8140038f 	ldh	r5,14(r16)
   45de4:	8809883a 	mov	r4,r17
   45de8:	0049f580 	call	49f58 <_isatty_r>
   45dec:	10004c26 	beq	r2,zero,45f20 <__smakebuf_r+0x1a8>
   45df0:	8080030b 	ldhu	r2,12(r16)
   45df4:	80c010c4 	addi	r3,r16,67
   45df8:	80c00015 	stw	r3,0(r16)
   45dfc:	10800054 	ori	r2,r2,1
   45e00:	8080030d 	sth	r2,12(r16)
   45e04:	00800044 	movi	r2,1
   45e08:	80c00415 	stw	r3,16(r16)
   45e0c:	80800515 	stw	r2,20(r16)
   45e10:	04810004 	movi	r18,1024
   45e14:	00000706 	br	45e34 <__smakebuf_r+0xbc>
   45e18:	8080030b 	ldhu	r2,12(r16)
   45e1c:	10c0200c 	andi	r3,r2,128
   45e20:	18001f1e 	bne	r3,zero,45ea0 <__smakebuf_r+0x128>
   45e24:	04810004 	movi	r18,1024
   45e28:	10820014 	ori	r2,r2,2048
   45e2c:	8080030d 	sth	r2,12(r16)
   45e30:	0027883a 	mov	r19,zero
   45e34:	900b883a 	mov	r5,r18
   45e38:	8809883a 	mov	r4,r17
   45e3c:	0045f340 	call	45f34 <_malloc_r>
   45e40:	10002c26 	beq	r2,zero,45ef4 <__smakebuf_r+0x17c>
   45e44:	80c0030b 	ldhu	r3,12(r16)
   45e48:	01000134 	movhi	r4,4
   45e4c:	2113a304 	addi	r4,r4,20108
   45e50:	89000f15 	stw	r4,60(r17)
   45e54:	18c02014 	ori	r3,r3,128
   45e58:	80c0030d 	sth	r3,12(r16)
   45e5c:	80800015 	stw	r2,0(r16)
   45e60:	80800415 	stw	r2,16(r16)
   45e64:	84800515 	stw	r18,20(r16)
   45e68:	98001a1e 	bne	r19,zero,45ed4 <__smakebuf_r+0x15c>
   45e6c:	dfc01317 	ldw	ra,76(sp)
   45e70:	dcc01217 	ldw	r19,72(sp)
   45e74:	dc801117 	ldw	r18,68(sp)
   45e78:	dc401017 	ldw	r17,64(sp)
   45e7c:	dc000f17 	ldw	r16,60(sp)
   45e80:	dec01404 	addi	sp,sp,80
   45e84:	f800283a 	ret
   45e88:	288010c4 	addi	r2,r5,67
   45e8c:	28800015 	stw	r2,0(r5)
   45e90:	28800415 	stw	r2,16(r5)
   45e94:	00800044 	movi	r2,1
   45e98:	28800515 	stw	r2,20(r5)
   45e9c:	f800283a 	ret
   45ea0:	04801004 	movi	r18,64
   45ea4:	003fe006 	br	45e28 <__alt_data_end+0xfffd3e28>
   45ea8:	81000a17 	ldw	r4,40(r16)
   45eac:	00c00174 	movhi	r3,5
   45eb0:	18e0bc04 	addi	r3,r3,-32016
   45eb4:	20ffc51e 	bne	r4,r3,45dcc <__alt_data_end+0xfffd3dcc>
   45eb8:	8080030b 	ldhu	r2,12(r16)
   45ebc:	04810004 	movi	r18,1024
   45ec0:	84801315 	stw	r18,76(r16)
   45ec4:	1484b03a 	or	r2,r2,r18
   45ec8:	8080030d 	sth	r2,12(r16)
   45ecc:	0027883a 	mov	r19,zero
   45ed0:	003fd806 	br	45e34 <__alt_data_end+0xfffd3e34>
   45ed4:	8140038f 	ldh	r5,14(r16)
   45ed8:	8809883a 	mov	r4,r17
   45edc:	0049f580 	call	49f58 <_isatty_r>
   45ee0:	103fe226 	beq	r2,zero,45e6c <__alt_data_end+0xfffd3e6c>
   45ee4:	8080030b 	ldhu	r2,12(r16)
   45ee8:	10800054 	ori	r2,r2,1
   45eec:	8080030d 	sth	r2,12(r16)
   45ef0:	003fde06 	br	45e6c <__alt_data_end+0xfffd3e6c>
   45ef4:	8080030b 	ldhu	r2,12(r16)
   45ef8:	10c0800c 	andi	r3,r2,512
   45efc:	183fdb1e 	bne	r3,zero,45e6c <__alt_data_end+0xfffd3e6c>
   45f00:	10800094 	ori	r2,r2,2
   45f04:	80c010c4 	addi	r3,r16,67
   45f08:	8080030d 	sth	r2,12(r16)
   45f0c:	00800044 	movi	r2,1
   45f10:	80c00015 	stw	r3,0(r16)
   45f14:	80c00415 	stw	r3,16(r16)
   45f18:	80800515 	stw	r2,20(r16)
   45f1c:	003fd306 	br	45e6c <__alt_data_end+0xfffd3e6c>
   45f20:	04810004 	movi	r18,1024
   45f24:	003fc306 	br	45e34 <__alt_data_end+0xfffd3e34>
   45f28:	0027883a 	mov	r19,zero
   45f2c:	04810004 	movi	r18,1024
   45f30:	003fc006 	br	45e34 <__alt_data_end+0xfffd3e34>

00045f34 <_malloc_r>:
   45f34:	defff504 	addi	sp,sp,-44
   45f38:	dc800315 	stw	r18,12(sp)
   45f3c:	dfc00a15 	stw	ra,40(sp)
   45f40:	df000915 	stw	fp,36(sp)
   45f44:	ddc00815 	stw	r23,32(sp)
   45f48:	dd800715 	stw	r22,28(sp)
   45f4c:	dd400615 	stw	r21,24(sp)
   45f50:	dd000515 	stw	r20,20(sp)
   45f54:	dcc00415 	stw	r19,16(sp)
   45f58:	dc400215 	stw	r17,8(sp)
   45f5c:	dc000115 	stw	r16,4(sp)
   45f60:	288002c4 	addi	r2,r5,11
   45f64:	00c00584 	movi	r3,22
   45f68:	2025883a 	mov	r18,r4
   45f6c:	18807f2e 	bgeu	r3,r2,4616c <_malloc_r+0x238>
   45f70:	047ffe04 	movi	r17,-8
   45f74:	1462703a 	and	r17,r2,r17
   45f78:	8800a316 	blt	r17,zero,46208 <_malloc_r+0x2d4>
   45f7c:	8940a236 	bltu	r17,r5,46208 <_malloc_r+0x2d4>
   45f80:	004dc280 	call	4dc28 <__malloc_lock>
   45f84:	00807dc4 	movi	r2,503
   45f88:	1441e92e 	bgeu	r2,r17,46730 <_malloc_r+0x7fc>
   45f8c:	8804d27a 	srli	r2,r17,9
   45f90:	1000a126 	beq	r2,zero,46218 <_malloc_r+0x2e4>
   45f94:	00c00104 	movi	r3,4
   45f98:	18811e36 	bltu	r3,r2,46414 <_malloc_r+0x4e0>
   45f9c:	8804d1ba 	srli	r2,r17,6
   45fa0:	12000e44 	addi	r8,r2,57
   45fa4:	11c00e04 	addi	r7,r2,56
   45fa8:	4209883a 	add	r4,r8,r8
   45fac:	04c00174 	movhi	r19,5
   45fb0:	2109883a 	add	r4,r4,r4
   45fb4:	9cc1a304 	addi	r19,r19,1676
   45fb8:	2109883a 	add	r4,r4,r4
   45fbc:	9909883a 	add	r4,r19,r4
   45fc0:	24000117 	ldw	r16,4(r4)
   45fc4:	213ffe04 	addi	r4,r4,-8
   45fc8:	24009726 	beq	r4,r16,46228 <_malloc_r+0x2f4>
   45fcc:	80800117 	ldw	r2,4(r16)
   45fd0:	01bfff04 	movi	r6,-4
   45fd4:	014003c4 	movi	r5,15
   45fd8:	1184703a 	and	r2,r2,r6
   45fdc:	1447c83a 	sub	r3,r2,r17
   45fe0:	28c00716 	blt	r5,r3,46000 <_malloc_r+0xcc>
   45fe4:	1800920e 	bge	r3,zero,46230 <_malloc_r+0x2fc>
   45fe8:	84000317 	ldw	r16,12(r16)
   45fec:	24008e26 	beq	r4,r16,46228 <_malloc_r+0x2f4>
   45ff0:	80800117 	ldw	r2,4(r16)
   45ff4:	1184703a 	and	r2,r2,r6
   45ff8:	1447c83a 	sub	r3,r2,r17
   45ffc:	28fff90e 	bge	r5,r3,45fe4 <__alt_data_end+0xfffd3fe4>
   46000:	3809883a 	mov	r4,r7
   46004:	01800174 	movhi	r6,5
   46008:	9c000417 	ldw	r16,16(r19)
   4600c:	3181a304 	addi	r6,r6,1676
   46010:	32000204 	addi	r8,r6,8
   46014:	82013426 	beq	r16,r8,464e8 <_malloc_r+0x5b4>
   46018:	80c00117 	ldw	r3,4(r16)
   4601c:	00bfff04 	movi	r2,-4
   46020:	188e703a 	and	r7,r3,r2
   46024:	3c45c83a 	sub	r2,r7,r17
   46028:	00c003c4 	movi	r3,15
   4602c:	18811f16 	blt	r3,r2,464ac <_malloc_r+0x578>
   46030:	32000515 	stw	r8,20(r6)
   46034:	32000415 	stw	r8,16(r6)
   46038:	10007f0e 	bge	r2,zero,46238 <_malloc_r+0x304>
   4603c:	00807fc4 	movi	r2,511
   46040:	11c0fd36 	bltu	r2,r7,46438 <_malloc_r+0x504>
   46044:	3806d0fa 	srli	r3,r7,3
   46048:	01c00044 	movi	r7,1
   4604c:	30800117 	ldw	r2,4(r6)
   46050:	19400044 	addi	r5,r3,1
   46054:	294b883a 	add	r5,r5,r5
   46058:	1807d0ba 	srai	r3,r3,2
   4605c:	294b883a 	add	r5,r5,r5
   46060:	294b883a 	add	r5,r5,r5
   46064:	298b883a 	add	r5,r5,r6
   46068:	38c6983a 	sll	r3,r7,r3
   4606c:	29c00017 	ldw	r7,0(r5)
   46070:	2a7ffe04 	addi	r9,r5,-8
   46074:	1886b03a 	or	r3,r3,r2
   46078:	82400315 	stw	r9,12(r16)
   4607c:	81c00215 	stw	r7,8(r16)
   46080:	30c00115 	stw	r3,4(r6)
   46084:	2c000015 	stw	r16,0(r5)
   46088:	3c000315 	stw	r16,12(r7)
   4608c:	2005d0ba 	srai	r2,r4,2
   46090:	01400044 	movi	r5,1
   46094:	288a983a 	sll	r5,r5,r2
   46098:	19406f36 	bltu	r3,r5,46258 <_malloc_r+0x324>
   4609c:	28c4703a 	and	r2,r5,r3
   460a0:	10000a1e 	bne	r2,zero,460cc <_malloc_r+0x198>
   460a4:	00bfff04 	movi	r2,-4
   460a8:	294b883a 	add	r5,r5,r5
   460ac:	2088703a 	and	r4,r4,r2
   460b0:	28c4703a 	and	r2,r5,r3
   460b4:	21000104 	addi	r4,r4,4
   460b8:	1000041e 	bne	r2,zero,460cc <_malloc_r+0x198>
   460bc:	294b883a 	add	r5,r5,r5
   460c0:	28c4703a 	and	r2,r5,r3
   460c4:	21000104 	addi	r4,r4,4
   460c8:	103ffc26 	beq	r2,zero,460bc <__alt_data_end+0xfffd40bc>
   460cc:	02bfff04 	movi	r10,-4
   460d0:	024003c4 	movi	r9,15
   460d4:	21800044 	addi	r6,r4,1
   460d8:	318d883a 	add	r6,r6,r6
   460dc:	318d883a 	add	r6,r6,r6
   460e0:	318d883a 	add	r6,r6,r6
   460e4:	998d883a 	add	r6,r19,r6
   460e8:	333ffe04 	addi	r12,r6,-8
   460ec:	2017883a 	mov	r11,r4
   460f0:	31800104 	addi	r6,r6,4
   460f4:	34000017 	ldw	r16,0(r6)
   460f8:	31fffd04 	addi	r7,r6,-12
   460fc:	81c0041e 	bne	r16,r7,46110 <_malloc_r+0x1dc>
   46100:	0000fb06 	br	464f0 <_malloc_r+0x5bc>
   46104:	1801030e 	bge	r3,zero,46514 <_malloc_r+0x5e0>
   46108:	84000317 	ldw	r16,12(r16)
   4610c:	81c0f826 	beq	r16,r7,464f0 <_malloc_r+0x5bc>
   46110:	80800117 	ldw	r2,4(r16)
   46114:	1284703a 	and	r2,r2,r10
   46118:	1447c83a 	sub	r3,r2,r17
   4611c:	48fff90e 	bge	r9,r3,46104 <__alt_data_end+0xfffd4104>
   46120:	80800317 	ldw	r2,12(r16)
   46124:	81000217 	ldw	r4,8(r16)
   46128:	89400054 	ori	r5,r17,1
   4612c:	81400115 	stw	r5,4(r16)
   46130:	20800315 	stw	r2,12(r4)
   46134:	11000215 	stw	r4,8(r2)
   46138:	8463883a 	add	r17,r16,r17
   4613c:	9c400515 	stw	r17,20(r19)
   46140:	9c400415 	stw	r17,16(r19)
   46144:	18800054 	ori	r2,r3,1
   46148:	88800115 	stw	r2,4(r17)
   4614c:	8a000315 	stw	r8,12(r17)
   46150:	8a000215 	stw	r8,8(r17)
   46154:	88e3883a 	add	r17,r17,r3
   46158:	88c00015 	stw	r3,0(r17)
   4615c:	9009883a 	mov	r4,r18
   46160:	004dc4c0 	call	4dc4c <__malloc_unlock>
   46164:	80800204 	addi	r2,r16,8
   46168:	00001b06 	br	461d8 <_malloc_r+0x2a4>
   4616c:	04400404 	movi	r17,16
   46170:	89402536 	bltu	r17,r5,46208 <_malloc_r+0x2d4>
   46174:	004dc280 	call	4dc28 <__malloc_lock>
   46178:	00800184 	movi	r2,6
   4617c:	01000084 	movi	r4,2
   46180:	04c00174 	movhi	r19,5
   46184:	1085883a 	add	r2,r2,r2
   46188:	9cc1a304 	addi	r19,r19,1676
   4618c:	1085883a 	add	r2,r2,r2
   46190:	9885883a 	add	r2,r19,r2
   46194:	14000117 	ldw	r16,4(r2)
   46198:	10fffe04 	addi	r3,r2,-8
   4619c:	80c0d926 	beq	r16,r3,46504 <_malloc_r+0x5d0>
   461a0:	80c00117 	ldw	r3,4(r16)
   461a4:	81000317 	ldw	r4,12(r16)
   461a8:	00bfff04 	movi	r2,-4
   461ac:	1884703a 	and	r2,r3,r2
   461b0:	81400217 	ldw	r5,8(r16)
   461b4:	8085883a 	add	r2,r16,r2
   461b8:	10c00117 	ldw	r3,4(r2)
   461bc:	29000315 	stw	r4,12(r5)
   461c0:	21400215 	stw	r5,8(r4)
   461c4:	18c00054 	ori	r3,r3,1
   461c8:	10c00115 	stw	r3,4(r2)
   461cc:	9009883a 	mov	r4,r18
   461d0:	004dc4c0 	call	4dc4c <__malloc_unlock>
   461d4:	80800204 	addi	r2,r16,8
   461d8:	dfc00a17 	ldw	ra,40(sp)
   461dc:	df000917 	ldw	fp,36(sp)
   461e0:	ddc00817 	ldw	r23,32(sp)
   461e4:	dd800717 	ldw	r22,28(sp)
   461e8:	dd400617 	ldw	r21,24(sp)
   461ec:	dd000517 	ldw	r20,20(sp)
   461f0:	dcc00417 	ldw	r19,16(sp)
   461f4:	dc800317 	ldw	r18,12(sp)
   461f8:	dc400217 	ldw	r17,8(sp)
   461fc:	dc000117 	ldw	r16,4(sp)
   46200:	dec00b04 	addi	sp,sp,44
   46204:	f800283a 	ret
   46208:	00800304 	movi	r2,12
   4620c:	90800015 	stw	r2,0(r18)
   46210:	0005883a 	mov	r2,zero
   46214:	003ff006 	br	461d8 <__alt_data_end+0xfffd41d8>
   46218:	01002004 	movi	r4,128
   4621c:	02001004 	movi	r8,64
   46220:	01c00fc4 	movi	r7,63
   46224:	003f6106 	br	45fac <__alt_data_end+0xfffd3fac>
   46228:	4009883a 	mov	r4,r8
   4622c:	003f7506 	br	46004 <__alt_data_end+0xfffd4004>
   46230:	81000317 	ldw	r4,12(r16)
   46234:	003fde06 	br	461b0 <__alt_data_end+0xfffd41b0>
   46238:	81c5883a 	add	r2,r16,r7
   4623c:	11400117 	ldw	r5,4(r2)
   46240:	9009883a 	mov	r4,r18
   46244:	29400054 	ori	r5,r5,1
   46248:	11400115 	stw	r5,4(r2)
   4624c:	004dc4c0 	call	4dc4c <__malloc_unlock>
   46250:	80800204 	addi	r2,r16,8
   46254:	003fe006 	br	461d8 <__alt_data_end+0xfffd41d8>
   46258:	9c000217 	ldw	r16,8(r19)
   4625c:	00bfff04 	movi	r2,-4
   46260:	85800117 	ldw	r22,4(r16)
   46264:	b0ac703a 	and	r22,r22,r2
   46268:	b4400336 	bltu	r22,r17,46278 <_malloc_r+0x344>
   4626c:	b445c83a 	sub	r2,r22,r17
   46270:	00c003c4 	movi	r3,15
   46274:	18805d16 	blt	r3,r2,463ec <_malloc_r+0x4b8>
   46278:	05c00174 	movhi	r23,5
   4627c:	00800174 	movhi	r2,5
   46280:	108df704 	addi	r2,r2,14300
   46284:	bdc72a04 	addi	r23,r23,7336
   46288:	15400017 	ldw	r21,0(r2)
   4628c:	b8c00017 	ldw	r3,0(r23)
   46290:	00bfffc4 	movi	r2,-1
   46294:	858d883a 	add	r6,r16,r22
   46298:	8d6b883a 	add	r21,r17,r21
   4629c:	1880ea26 	beq	r3,r2,46648 <_malloc_r+0x714>
   462a0:	ad4403c4 	addi	r21,r21,4111
   462a4:	00bc0004 	movi	r2,-4096
   462a8:	a8aa703a 	and	r21,r21,r2
   462ac:	a80b883a 	mov	r5,r21
   462b0:	9009883a 	mov	r4,r18
   462b4:	d9800015 	stw	r6,0(sp)
   462b8:	00481c40 	call	481c4 <_sbrk_r>
   462bc:	1029883a 	mov	r20,r2
   462c0:	00bfffc4 	movi	r2,-1
   462c4:	d9800017 	ldw	r6,0(sp)
   462c8:	a080e826 	beq	r20,r2,4666c <_malloc_r+0x738>
   462cc:	a180a636 	bltu	r20,r6,46568 <_malloc_r+0x634>
   462d0:	07000174 	movhi	fp,5
   462d4:	e70e0004 	addi	fp,fp,14336
   462d8:	e0800017 	ldw	r2,0(fp)
   462dc:	a887883a 	add	r3,r21,r2
   462e0:	e0c00015 	stw	r3,0(fp)
   462e4:	3500e626 	beq	r6,r20,46680 <_malloc_r+0x74c>
   462e8:	b9000017 	ldw	r4,0(r23)
   462ec:	00bfffc4 	movi	r2,-1
   462f0:	2080ee26 	beq	r4,r2,466ac <_malloc_r+0x778>
   462f4:	a185c83a 	sub	r2,r20,r6
   462f8:	10c5883a 	add	r2,r2,r3
   462fc:	e0800015 	stw	r2,0(fp)
   46300:	a0c001cc 	andi	r3,r20,7
   46304:	1800bc26 	beq	r3,zero,465f8 <_malloc_r+0x6c4>
   46308:	a0e9c83a 	sub	r20,r20,r3
   4630c:	00840204 	movi	r2,4104
   46310:	a5000204 	addi	r20,r20,8
   46314:	10c7c83a 	sub	r3,r2,r3
   46318:	a545883a 	add	r2,r20,r21
   4631c:	1083ffcc 	andi	r2,r2,4095
   46320:	18abc83a 	sub	r21,r3,r2
   46324:	a80b883a 	mov	r5,r21
   46328:	9009883a 	mov	r4,r18
   4632c:	00481c40 	call	481c4 <_sbrk_r>
   46330:	00ffffc4 	movi	r3,-1
   46334:	10c0e126 	beq	r2,r3,466bc <_malloc_r+0x788>
   46338:	1505c83a 	sub	r2,r2,r20
   4633c:	1545883a 	add	r2,r2,r21
   46340:	10800054 	ori	r2,r2,1
   46344:	e0c00017 	ldw	r3,0(fp)
   46348:	9d000215 	stw	r20,8(r19)
   4634c:	a0800115 	stw	r2,4(r20)
   46350:	a8c7883a 	add	r3,r21,r3
   46354:	e0c00015 	stw	r3,0(fp)
   46358:	84c00e26 	beq	r16,r19,46394 <_malloc_r+0x460>
   4635c:	018003c4 	movi	r6,15
   46360:	3580a72e 	bgeu	r6,r22,46600 <_malloc_r+0x6cc>
   46364:	81400117 	ldw	r5,4(r16)
   46368:	013ffe04 	movi	r4,-8
   4636c:	b0bffd04 	addi	r2,r22,-12
   46370:	1104703a 	and	r2,r2,r4
   46374:	2900004c 	andi	r4,r5,1
   46378:	2088b03a 	or	r4,r4,r2
   4637c:	81000115 	stw	r4,4(r16)
   46380:	01400144 	movi	r5,5
   46384:	8089883a 	add	r4,r16,r2
   46388:	21400115 	stw	r5,4(r4)
   4638c:	21400215 	stw	r5,8(r4)
   46390:	3080cd36 	bltu	r6,r2,466c8 <_malloc_r+0x794>
   46394:	00800174 	movhi	r2,5
   46398:	108df604 	addi	r2,r2,14296
   4639c:	11000017 	ldw	r4,0(r2)
   463a0:	20c0012e 	bgeu	r4,r3,463a8 <_malloc_r+0x474>
   463a4:	10c00015 	stw	r3,0(r2)
   463a8:	00800174 	movhi	r2,5
   463ac:	108df504 	addi	r2,r2,14292
   463b0:	11000017 	ldw	r4,0(r2)
   463b4:	9c000217 	ldw	r16,8(r19)
   463b8:	20c0012e 	bgeu	r4,r3,463c0 <_malloc_r+0x48c>
   463bc:	10c00015 	stw	r3,0(r2)
   463c0:	80c00117 	ldw	r3,4(r16)
   463c4:	00bfff04 	movi	r2,-4
   463c8:	1886703a 	and	r3,r3,r2
   463cc:	1c45c83a 	sub	r2,r3,r17
   463d0:	1c400236 	bltu	r3,r17,463dc <_malloc_r+0x4a8>
   463d4:	00c003c4 	movi	r3,15
   463d8:	18800416 	blt	r3,r2,463ec <_malloc_r+0x4b8>
   463dc:	9009883a 	mov	r4,r18
   463e0:	004dc4c0 	call	4dc4c <__malloc_unlock>
   463e4:	0005883a 	mov	r2,zero
   463e8:	003f7b06 	br	461d8 <__alt_data_end+0xfffd41d8>
   463ec:	88c00054 	ori	r3,r17,1
   463f0:	80c00115 	stw	r3,4(r16)
   463f4:	8463883a 	add	r17,r16,r17
   463f8:	10800054 	ori	r2,r2,1
   463fc:	9c400215 	stw	r17,8(r19)
   46400:	88800115 	stw	r2,4(r17)
   46404:	9009883a 	mov	r4,r18
   46408:	004dc4c0 	call	4dc4c <__malloc_unlock>
   4640c:	80800204 	addi	r2,r16,8
   46410:	003f7106 	br	461d8 <__alt_data_end+0xfffd41d8>
   46414:	00c00504 	movi	r3,20
   46418:	18804a2e 	bgeu	r3,r2,46544 <_malloc_r+0x610>
   4641c:	00c01504 	movi	r3,84
   46420:	18806e36 	bltu	r3,r2,465dc <_malloc_r+0x6a8>
   46424:	8804d33a 	srli	r2,r17,12
   46428:	12001bc4 	addi	r8,r2,111
   4642c:	11c01b84 	addi	r7,r2,110
   46430:	4209883a 	add	r4,r8,r8
   46434:	003edd06 	br	45fac <__alt_data_end+0xfffd3fac>
   46438:	3804d27a 	srli	r2,r7,9
   4643c:	00c00104 	movi	r3,4
   46440:	1880442e 	bgeu	r3,r2,46554 <_malloc_r+0x620>
   46444:	00c00504 	movi	r3,20
   46448:	18808136 	bltu	r3,r2,46650 <_malloc_r+0x71c>
   4644c:	11401704 	addi	r5,r2,92
   46450:	10c016c4 	addi	r3,r2,91
   46454:	294b883a 	add	r5,r5,r5
   46458:	294b883a 	add	r5,r5,r5
   4645c:	294b883a 	add	r5,r5,r5
   46460:	994b883a 	add	r5,r19,r5
   46464:	28800017 	ldw	r2,0(r5)
   46468:	01800174 	movhi	r6,5
   4646c:	297ffe04 	addi	r5,r5,-8
   46470:	3181a304 	addi	r6,r6,1676
   46474:	28806526 	beq	r5,r2,4660c <_malloc_r+0x6d8>
   46478:	01bfff04 	movi	r6,-4
   4647c:	10c00117 	ldw	r3,4(r2)
   46480:	1986703a 	and	r3,r3,r6
   46484:	38c0022e 	bgeu	r7,r3,46490 <_malloc_r+0x55c>
   46488:	10800217 	ldw	r2,8(r2)
   4648c:	28bffb1e 	bne	r5,r2,4647c <__alt_data_end+0xfffd447c>
   46490:	11400317 	ldw	r5,12(r2)
   46494:	98c00117 	ldw	r3,4(r19)
   46498:	81400315 	stw	r5,12(r16)
   4649c:	80800215 	stw	r2,8(r16)
   464a0:	2c000215 	stw	r16,8(r5)
   464a4:	14000315 	stw	r16,12(r2)
   464a8:	003ef806 	br	4608c <__alt_data_end+0xfffd408c>
   464ac:	88c00054 	ori	r3,r17,1
   464b0:	80c00115 	stw	r3,4(r16)
   464b4:	8463883a 	add	r17,r16,r17
   464b8:	34400515 	stw	r17,20(r6)
   464bc:	34400415 	stw	r17,16(r6)
   464c0:	10c00054 	ori	r3,r2,1
   464c4:	8a000315 	stw	r8,12(r17)
   464c8:	8a000215 	stw	r8,8(r17)
   464cc:	88c00115 	stw	r3,4(r17)
   464d0:	88a3883a 	add	r17,r17,r2
   464d4:	88800015 	stw	r2,0(r17)
   464d8:	9009883a 	mov	r4,r18
   464dc:	004dc4c0 	call	4dc4c <__malloc_unlock>
   464e0:	80800204 	addi	r2,r16,8
   464e4:	003f3c06 	br	461d8 <__alt_data_end+0xfffd41d8>
   464e8:	30c00117 	ldw	r3,4(r6)
   464ec:	003ee706 	br	4608c <__alt_data_end+0xfffd408c>
   464f0:	5ac00044 	addi	r11,r11,1
   464f4:	588000cc 	andi	r2,r11,3
   464f8:	31800204 	addi	r6,r6,8
   464fc:	103efd1e 	bne	r2,zero,460f4 <__alt_data_end+0xfffd40f4>
   46500:	00002406 	br	46594 <_malloc_r+0x660>
   46504:	14000317 	ldw	r16,12(r2)
   46508:	143f251e 	bne	r2,r16,461a0 <__alt_data_end+0xfffd41a0>
   4650c:	21000084 	addi	r4,r4,2
   46510:	003ebc06 	br	46004 <__alt_data_end+0xfffd4004>
   46514:	8085883a 	add	r2,r16,r2
   46518:	10c00117 	ldw	r3,4(r2)
   4651c:	81000317 	ldw	r4,12(r16)
   46520:	81400217 	ldw	r5,8(r16)
   46524:	18c00054 	ori	r3,r3,1
   46528:	10c00115 	stw	r3,4(r2)
   4652c:	29000315 	stw	r4,12(r5)
   46530:	21400215 	stw	r5,8(r4)
   46534:	9009883a 	mov	r4,r18
   46538:	004dc4c0 	call	4dc4c <__malloc_unlock>
   4653c:	80800204 	addi	r2,r16,8
   46540:	003f2506 	br	461d8 <__alt_data_end+0xfffd41d8>
   46544:	12001704 	addi	r8,r2,92
   46548:	11c016c4 	addi	r7,r2,91
   4654c:	4209883a 	add	r4,r8,r8
   46550:	003e9606 	br	45fac <__alt_data_end+0xfffd3fac>
   46554:	3804d1ba 	srli	r2,r7,6
   46558:	11400e44 	addi	r5,r2,57
   4655c:	10c00e04 	addi	r3,r2,56
   46560:	294b883a 	add	r5,r5,r5
   46564:	003fbc06 	br	46458 <__alt_data_end+0xfffd4458>
   46568:	84ff5926 	beq	r16,r19,462d0 <__alt_data_end+0xfffd42d0>
   4656c:	00800174 	movhi	r2,5
   46570:	1081a304 	addi	r2,r2,1676
   46574:	14000217 	ldw	r16,8(r2)
   46578:	00bfff04 	movi	r2,-4
   4657c:	80c00117 	ldw	r3,4(r16)
   46580:	1886703a 	and	r3,r3,r2
   46584:	003f9106 	br	463cc <__alt_data_end+0xfffd43cc>
   46588:	60800217 	ldw	r2,8(r12)
   4658c:	213fffc4 	addi	r4,r4,-1
   46590:	1300651e 	bne	r2,r12,46728 <_malloc_r+0x7f4>
   46594:	208000cc 	andi	r2,r4,3
   46598:	633ffe04 	addi	r12,r12,-8
   4659c:	103ffa1e 	bne	r2,zero,46588 <__alt_data_end+0xfffd4588>
   465a0:	98800117 	ldw	r2,4(r19)
   465a4:	0146303a 	nor	r3,zero,r5
   465a8:	1884703a 	and	r2,r3,r2
   465ac:	98800115 	stw	r2,4(r19)
   465b0:	294b883a 	add	r5,r5,r5
   465b4:	117f2836 	bltu	r2,r5,46258 <__alt_data_end+0xfffd4258>
   465b8:	283f2726 	beq	r5,zero,46258 <__alt_data_end+0xfffd4258>
   465bc:	2886703a 	and	r3,r5,r2
   465c0:	5809883a 	mov	r4,r11
   465c4:	183ec31e 	bne	r3,zero,460d4 <__alt_data_end+0xfffd40d4>
   465c8:	294b883a 	add	r5,r5,r5
   465cc:	2886703a 	and	r3,r5,r2
   465d0:	21000104 	addi	r4,r4,4
   465d4:	183ffc26 	beq	r3,zero,465c8 <__alt_data_end+0xfffd45c8>
   465d8:	003ebe06 	br	460d4 <__alt_data_end+0xfffd40d4>
   465dc:	00c05504 	movi	r3,340
   465e0:	18801236 	bltu	r3,r2,4662c <_malloc_r+0x6f8>
   465e4:	8804d3fa 	srli	r2,r17,15
   465e8:	12001e04 	addi	r8,r2,120
   465ec:	11c01dc4 	addi	r7,r2,119
   465f0:	4209883a 	add	r4,r8,r8
   465f4:	003e6d06 	br	45fac <__alt_data_end+0xfffd3fac>
   465f8:	00c40004 	movi	r3,4096
   465fc:	003f4606 	br	46318 <__alt_data_end+0xfffd4318>
   46600:	00800044 	movi	r2,1
   46604:	a0800115 	stw	r2,4(r20)
   46608:	003f7406 	br	463dc <__alt_data_end+0xfffd43dc>
   4660c:	1805d0ba 	srai	r2,r3,2
   46610:	01c00044 	movi	r7,1
   46614:	30c00117 	ldw	r3,4(r6)
   46618:	388e983a 	sll	r7,r7,r2
   4661c:	2805883a 	mov	r2,r5
   46620:	38c6b03a 	or	r3,r7,r3
   46624:	30c00115 	stw	r3,4(r6)
   46628:	003f9b06 	br	46498 <__alt_data_end+0xfffd4498>
   4662c:	00c15504 	movi	r3,1364
   46630:	18801a36 	bltu	r3,r2,4669c <_malloc_r+0x768>
   46634:	8804d4ba 	srli	r2,r17,18
   46638:	12001f44 	addi	r8,r2,125
   4663c:	11c01f04 	addi	r7,r2,124
   46640:	4209883a 	add	r4,r8,r8
   46644:	003e5906 	br	45fac <__alt_data_end+0xfffd3fac>
   46648:	ad400404 	addi	r21,r21,16
   4664c:	003f1706 	br	462ac <__alt_data_end+0xfffd42ac>
   46650:	00c01504 	movi	r3,84
   46654:	18802336 	bltu	r3,r2,466e4 <_malloc_r+0x7b0>
   46658:	3804d33a 	srli	r2,r7,12
   4665c:	11401bc4 	addi	r5,r2,111
   46660:	10c01b84 	addi	r3,r2,110
   46664:	294b883a 	add	r5,r5,r5
   46668:	003f7b06 	br	46458 <__alt_data_end+0xfffd4458>
   4666c:	9c000217 	ldw	r16,8(r19)
   46670:	00bfff04 	movi	r2,-4
   46674:	80c00117 	ldw	r3,4(r16)
   46678:	1886703a 	and	r3,r3,r2
   4667c:	003f5306 	br	463cc <__alt_data_end+0xfffd43cc>
   46680:	3083ffcc 	andi	r2,r6,4095
   46684:	103f181e 	bne	r2,zero,462e8 <__alt_data_end+0xfffd42e8>
   46688:	99000217 	ldw	r4,8(r19)
   4668c:	b545883a 	add	r2,r22,r21
   46690:	10800054 	ori	r2,r2,1
   46694:	20800115 	stw	r2,4(r4)
   46698:	003f3e06 	br	46394 <__alt_data_end+0xfffd4394>
   4669c:	01003f84 	movi	r4,254
   466a0:	02001fc4 	movi	r8,127
   466a4:	01c01f84 	movi	r7,126
   466a8:	003e4006 	br	45fac <__alt_data_end+0xfffd3fac>
   466ac:	00800174 	movhi	r2,5
   466b0:	10872a04 	addi	r2,r2,7336
   466b4:	15000015 	stw	r20,0(r2)
   466b8:	003f1106 	br	46300 <__alt_data_end+0xfffd4300>
   466bc:	00800044 	movi	r2,1
   466c0:	002b883a 	mov	r21,zero
   466c4:	003f1f06 	br	46344 <__alt_data_end+0xfffd4344>
   466c8:	81400204 	addi	r5,r16,8
   466cc:	9009883a 	mov	r4,r18
   466d0:	00453480 	call	45348 <_free_r>
   466d4:	00800174 	movhi	r2,5
   466d8:	108e0004 	addi	r2,r2,14336
   466dc:	10c00017 	ldw	r3,0(r2)
   466e0:	003f2c06 	br	46394 <__alt_data_end+0xfffd4394>
   466e4:	00c05504 	movi	r3,340
   466e8:	18800536 	bltu	r3,r2,46700 <_malloc_r+0x7cc>
   466ec:	3804d3fa 	srli	r2,r7,15
   466f0:	11401e04 	addi	r5,r2,120
   466f4:	10c01dc4 	addi	r3,r2,119
   466f8:	294b883a 	add	r5,r5,r5
   466fc:	003f5606 	br	46458 <__alt_data_end+0xfffd4458>
   46700:	00c15504 	movi	r3,1364
   46704:	18800536 	bltu	r3,r2,4671c <_malloc_r+0x7e8>
   46708:	3804d4ba 	srli	r2,r7,18
   4670c:	11401f44 	addi	r5,r2,125
   46710:	10c01f04 	addi	r3,r2,124
   46714:	294b883a 	add	r5,r5,r5
   46718:	003f4f06 	br	46458 <__alt_data_end+0xfffd4458>
   4671c:	01403f84 	movi	r5,254
   46720:	00c01f84 	movi	r3,126
   46724:	003f4c06 	br	46458 <__alt_data_end+0xfffd4458>
   46728:	98800117 	ldw	r2,4(r19)
   4672c:	003fa006 	br	465b0 <__alt_data_end+0xfffd45b0>
   46730:	8808d0fa 	srli	r4,r17,3
   46734:	20800044 	addi	r2,r4,1
   46738:	1085883a 	add	r2,r2,r2
   4673c:	003e9006 	br	46180 <__alt_data_end+0xfffd4180>

00046740 <memchr>:
   46740:	208000cc 	andi	r2,r4,3
   46744:	280f883a 	mov	r7,r5
   46748:	10003426 	beq	r2,zero,4681c <memchr+0xdc>
   4674c:	30bfffc4 	addi	r2,r6,-1
   46750:	30001a26 	beq	r6,zero,467bc <memchr+0x7c>
   46754:	20c00003 	ldbu	r3,0(r4)
   46758:	29803fcc 	andi	r6,r5,255
   4675c:	30c0051e 	bne	r6,r3,46774 <memchr+0x34>
   46760:	00001806 	br	467c4 <memchr+0x84>
   46764:	10001526 	beq	r2,zero,467bc <memchr+0x7c>
   46768:	20c00003 	ldbu	r3,0(r4)
   4676c:	10bfffc4 	addi	r2,r2,-1
   46770:	30c01426 	beq	r6,r3,467c4 <memchr+0x84>
   46774:	21000044 	addi	r4,r4,1
   46778:	20c000cc 	andi	r3,r4,3
   4677c:	183ff91e 	bne	r3,zero,46764 <__alt_data_end+0xfffd4764>
   46780:	020000c4 	movi	r8,3
   46784:	40801136 	bltu	r8,r2,467cc <memchr+0x8c>
   46788:	10000c26 	beq	r2,zero,467bc <memchr+0x7c>
   4678c:	20c00003 	ldbu	r3,0(r4)
   46790:	29403fcc 	andi	r5,r5,255
   46794:	28c00b26 	beq	r5,r3,467c4 <memchr+0x84>
   46798:	20c00044 	addi	r3,r4,1
   4679c:	39803fcc 	andi	r6,r7,255
   467a0:	2089883a 	add	r4,r4,r2
   467a4:	00000306 	br	467b4 <memchr+0x74>
   467a8:	18c00044 	addi	r3,r3,1
   467ac:	197fffc3 	ldbu	r5,-1(r3)
   467b0:	31400526 	beq	r6,r5,467c8 <memchr+0x88>
   467b4:	1805883a 	mov	r2,r3
   467b8:	20fffb1e 	bne	r4,r3,467a8 <__alt_data_end+0xfffd47a8>
   467bc:	0005883a 	mov	r2,zero
   467c0:	f800283a 	ret
   467c4:	2005883a 	mov	r2,r4
   467c8:	f800283a 	ret
   467cc:	28c03fcc 	andi	r3,r5,255
   467d0:	1812923a 	slli	r9,r3,8
   467d4:	02ffbff4 	movhi	r11,65279
   467d8:	02a02074 	movhi	r10,32897
   467dc:	48d2b03a 	or	r9,r9,r3
   467e0:	4806943a 	slli	r3,r9,16
   467e4:	5affbfc4 	addi	r11,r11,-257
   467e8:	52a02004 	addi	r10,r10,-32640
   467ec:	48d2b03a 	or	r9,r9,r3
   467f0:	20c00017 	ldw	r3,0(r4)
   467f4:	48c6f03a 	xor	r3,r9,r3
   467f8:	1acd883a 	add	r6,r3,r11
   467fc:	00c6303a 	nor	r3,zero,r3
   46800:	30c6703a 	and	r3,r6,r3
   46804:	1a86703a 	and	r3,r3,r10
   46808:	183fe01e 	bne	r3,zero,4678c <__alt_data_end+0xfffd478c>
   4680c:	10bfff04 	addi	r2,r2,-4
   46810:	21000104 	addi	r4,r4,4
   46814:	40bff636 	bltu	r8,r2,467f0 <__alt_data_end+0xfffd47f0>
   46818:	003fdb06 	br	46788 <__alt_data_end+0xfffd4788>
   4681c:	3005883a 	mov	r2,r6
   46820:	003fd706 	br	46780 <__alt_data_end+0xfffd4780>

00046824 <memcpy>:
   46824:	defffd04 	addi	sp,sp,-12
   46828:	dfc00215 	stw	ra,8(sp)
   4682c:	dc400115 	stw	r17,4(sp)
   46830:	dc000015 	stw	r16,0(sp)
   46834:	00c003c4 	movi	r3,15
   46838:	2005883a 	mov	r2,r4
   4683c:	1980452e 	bgeu	r3,r6,46954 <memcpy+0x130>
   46840:	2906b03a 	or	r3,r5,r4
   46844:	18c000cc 	andi	r3,r3,3
   46848:	1800441e 	bne	r3,zero,4695c <memcpy+0x138>
   4684c:	347ffc04 	addi	r17,r6,-16
   46850:	8822d13a 	srli	r17,r17,4
   46854:	28c00104 	addi	r3,r5,4
   46858:	23400104 	addi	r13,r4,4
   4685c:	8820913a 	slli	r16,r17,4
   46860:	2b000204 	addi	r12,r5,8
   46864:	22c00204 	addi	r11,r4,8
   46868:	84000504 	addi	r16,r16,20
   4686c:	2a800304 	addi	r10,r5,12
   46870:	22400304 	addi	r9,r4,12
   46874:	2c21883a 	add	r16,r5,r16
   46878:	2811883a 	mov	r8,r5
   4687c:	200f883a 	mov	r7,r4
   46880:	41000017 	ldw	r4,0(r8)
   46884:	1fc00017 	ldw	ra,0(r3)
   46888:	63c00017 	ldw	r15,0(r12)
   4688c:	39000015 	stw	r4,0(r7)
   46890:	53800017 	ldw	r14,0(r10)
   46894:	6fc00015 	stw	ra,0(r13)
   46898:	5bc00015 	stw	r15,0(r11)
   4689c:	4b800015 	stw	r14,0(r9)
   468a0:	18c00404 	addi	r3,r3,16
   468a4:	39c00404 	addi	r7,r7,16
   468a8:	42000404 	addi	r8,r8,16
   468ac:	6b400404 	addi	r13,r13,16
   468b0:	63000404 	addi	r12,r12,16
   468b4:	5ac00404 	addi	r11,r11,16
   468b8:	52800404 	addi	r10,r10,16
   468bc:	4a400404 	addi	r9,r9,16
   468c0:	1c3fef1e 	bne	r3,r16,46880 <__alt_data_end+0xfffd4880>
   468c4:	89c00044 	addi	r7,r17,1
   468c8:	380e913a 	slli	r7,r7,4
   468cc:	310003cc 	andi	r4,r6,15
   468d0:	02c000c4 	movi	r11,3
   468d4:	11c7883a 	add	r3,r2,r7
   468d8:	29cb883a 	add	r5,r5,r7
   468dc:	5900212e 	bgeu	r11,r4,46964 <memcpy+0x140>
   468e0:	1813883a 	mov	r9,r3
   468e4:	2811883a 	mov	r8,r5
   468e8:	200f883a 	mov	r7,r4
   468ec:	42800017 	ldw	r10,0(r8)
   468f0:	4a400104 	addi	r9,r9,4
   468f4:	39ffff04 	addi	r7,r7,-4
   468f8:	4abfff15 	stw	r10,-4(r9)
   468fc:	42000104 	addi	r8,r8,4
   46900:	59fffa36 	bltu	r11,r7,468ec <__alt_data_end+0xfffd48ec>
   46904:	213fff04 	addi	r4,r4,-4
   46908:	2008d0ba 	srli	r4,r4,2
   4690c:	318000cc 	andi	r6,r6,3
   46910:	21000044 	addi	r4,r4,1
   46914:	2109883a 	add	r4,r4,r4
   46918:	2109883a 	add	r4,r4,r4
   4691c:	1907883a 	add	r3,r3,r4
   46920:	290b883a 	add	r5,r5,r4
   46924:	30000626 	beq	r6,zero,46940 <memcpy+0x11c>
   46928:	198d883a 	add	r6,r3,r6
   4692c:	29c00003 	ldbu	r7,0(r5)
   46930:	18c00044 	addi	r3,r3,1
   46934:	29400044 	addi	r5,r5,1
   46938:	19ffffc5 	stb	r7,-1(r3)
   4693c:	19bffb1e 	bne	r3,r6,4692c <__alt_data_end+0xfffd492c>
   46940:	dfc00217 	ldw	ra,8(sp)
   46944:	dc400117 	ldw	r17,4(sp)
   46948:	dc000017 	ldw	r16,0(sp)
   4694c:	dec00304 	addi	sp,sp,12
   46950:	f800283a 	ret
   46954:	2007883a 	mov	r3,r4
   46958:	003ff206 	br	46924 <__alt_data_end+0xfffd4924>
   4695c:	2007883a 	mov	r3,r4
   46960:	003ff106 	br	46928 <__alt_data_end+0xfffd4928>
   46964:	200d883a 	mov	r6,r4
   46968:	003fee06 	br	46924 <__alt_data_end+0xfffd4924>

0004696c <memmove>:
   4696c:	2005883a 	mov	r2,r4
   46970:	29000b2e 	bgeu	r5,r4,469a0 <memmove+0x34>
   46974:	298f883a 	add	r7,r5,r6
   46978:	21c0092e 	bgeu	r4,r7,469a0 <memmove+0x34>
   4697c:	2187883a 	add	r3,r4,r6
   46980:	198bc83a 	sub	r5,r3,r6
   46984:	30004826 	beq	r6,zero,46aa8 <memmove+0x13c>
   46988:	39ffffc4 	addi	r7,r7,-1
   4698c:	39000003 	ldbu	r4,0(r7)
   46990:	18ffffc4 	addi	r3,r3,-1
   46994:	19000005 	stb	r4,0(r3)
   46998:	28fffb1e 	bne	r5,r3,46988 <__alt_data_end+0xfffd4988>
   4699c:	f800283a 	ret
   469a0:	00c003c4 	movi	r3,15
   469a4:	1980412e 	bgeu	r3,r6,46aac <memmove+0x140>
   469a8:	2886b03a 	or	r3,r5,r2
   469ac:	18c000cc 	andi	r3,r3,3
   469b0:	1800401e 	bne	r3,zero,46ab4 <memmove+0x148>
   469b4:	33fffc04 	addi	r15,r6,-16
   469b8:	781ed13a 	srli	r15,r15,4
   469bc:	28c00104 	addi	r3,r5,4
   469c0:	13400104 	addi	r13,r2,4
   469c4:	781c913a 	slli	r14,r15,4
   469c8:	2b000204 	addi	r12,r5,8
   469cc:	12c00204 	addi	r11,r2,8
   469d0:	73800504 	addi	r14,r14,20
   469d4:	2a800304 	addi	r10,r5,12
   469d8:	12400304 	addi	r9,r2,12
   469dc:	2b9d883a 	add	r14,r5,r14
   469e0:	2811883a 	mov	r8,r5
   469e4:	100f883a 	mov	r7,r2
   469e8:	41000017 	ldw	r4,0(r8)
   469ec:	39c00404 	addi	r7,r7,16
   469f0:	18c00404 	addi	r3,r3,16
   469f4:	393ffc15 	stw	r4,-16(r7)
   469f8:	193ffc17 	ldw	r4,-16(r3)
   469fc:	6b400404 	addi	r13,r13,16
   46a00:	5ac00404 	addi	r11,r11,16
   46a04:	693ffc15 	stw	r4,-16(r13)
   46a08:	61000017 	ldw	r4,0(r12)
   46a0c:	4a400404 	addi	r9,r9,16
   46a10:	42000404 	addi	r8,r8,16
   46a14:	593ffc15 	stw	r4,-16(r11)
   46a18:	51000017 	ldw	r4,0(r10)
   46a1c:	63000404 	addi	r12,r12,16
   46a20:	52800404 	addi	r10,r10,16
   46a24:	493ffc15 	stw	r4,-16(r9)
   46a28:	1bbfef1e 	bne	r3,r14,469e8 <__alt_data_end+0xfffd49e8>
   46a2c:	79000044 	addi	r4,r15,1
   46a30:	2008913a 	slli	r4,r4,4
   46a34:	328003cc 	andi	r10,r6,15
   46a38:	02c000c4 	movi	r11,3
   46a3c:	1107883a 	add	r3,r2,r4
   46a40:	290b883a 	add	r5,r5,r4
   46a44:	5a801e2e 	bgeu	r11,r10,46ac0 <memmove+0x154>
   46a48:	1813883a 	mov	r9,r3
   46a4c:	2811883a 	mov	r8,r5
   46a50:	500f883a 	mov	r7,r10
   46a54:	41000017 	ldw	r4,0(r8)
   46a58:	4a400104 	addi	r9,r9,4
   46a5c:	39ffff04 	addi	r7,r7,-4
   46a60:	493fff15 	stw	r4,-4(r9)
   46a64:	42000104 	addi	r8,r8,4
   46a68:	59fffa36 	bltu	r11,r7,46a54 <__alt_data_end+0xfffd4a54>
   46a6c:	513fff04 	addi	r4,r10,-4
   46a70:	2008d0ba 	srli	r4,r4,2
   46a74:	318000cc 	andi	r6,r6,3
   46a78:	21000044 	addi	r4,r4,1
   46a7c:	2109883a 	add	r4,r4,r4
   46a80:	2109883a 	add	r4,r4,r4
   46a84:	1907883a 	add	r3,r3,r4
   46a88:	290b883a 	add	r5,r5,r4
   46a8c:	30000b26 	beq	r6,zero,46abc <memmove+0x150>
   46a90:	198d883a 	add	r6,r3,r6
   46a94:	29c00003 	ldbu	r7,0(r5)
   46a98:	18c00044 	addi	r3,r3,1
   46a9c:	29400044 	addi	r5,r5,1
   46aa0:	19ffffc5 	stb	r7,-1(r3)
   46aa4:	19bffb1e 	bne	r3,r6,46a94 <__alt_data_end+0xfffd4a94>
   46aa8:	f800283a 	ret
   46aac:	1007883a 	mov	r3,r2
   46ab0:	003ff606 	br	46a8c <__alt_data_end+0xfffd4a8c>
   46ab4:	1007883a 	mov	r3,r2
   46ab8:	003ff506 	br	46a90 <__alt_data_end+0xfffd4a90>
   46abc:	f800283a 	ret
   46ac0:	500d883a 	mov	r6,r10
   46ac4:	003ff106 	br	46a8c <__alt_data_end+0xfffd4a8c>

00046ac8 <memset>:
   46ac8:	20c000cc 	andi	r3,r4,3
   46acc:	2005883a 	mov	r2,r4
   46ad0:	18004426 	beq	r3,zero,46be4 <memset+0x11c>
   46ad4:	31ffffc4 	addi	r7,r6,-1
   46ad8:	30004026 	beq	r6,zero,46bdc <memset+0x114>
   46adc:	2813883a 	mov	r9,r5
   46ae0:	200d883a 	mov	r6,r4
   46ae4:	2007883a 	mov	r3,r4
   46ae8:	00000406 	br	46afc <memset+0x34>
   46aec:	3a3fffc4 	addi	r8,r7,-1
   46af0:	31800044 	addi	r6,r6,1
   46af4:	38003926 	beq	r7,zero,46bdc <memset+0x114>
   46af8:	400f883a 	mov	r7,r8
   46afc:	18c00044 	addi	r3,r3,1
   46b00:	32400005 	stb	r9,0(r6)
   46b04:	1a0000cc 	andi	r8,r3,3
   46b08:	403ff81e 	bne	r8,zero,46aec <__alt_data_end+0xfffd4aec>
   46b0c:	010000c4 	movi	r4,3
   46b10:	21c02d2e 	bgeu	r4,r7,46bc8 <memset+0x100>
   46b14:	29003fcc 	andi	r4,r5,255
   46b18:	200c923a 	slli	r6,r4,8
   46b1c:	3108b03a 	or	r4,r6,r4
   46b20:	200c943a 	slli	r6,r4,16
   46b24:	218cb03a 	or	r6,r4,r6
   46b28:	010003c4 	movi	r4,15
   46b2c:	21c0182e 	bgeu	r4,r7,46b90 <memset+0xc8>
   46b30:	3b3ffc04 	addi	r12,r7,-16
   46b34:	6018d13a 	srli	r12,r12,4
   46b38:	1a000104 	addi	r8,r3,4
   46b3c:	1ac00204 	addi	r11,r3,8
   46b40:	6008913a 	slli	r4,r12,4
   46b44:	1a800304 	addi	r10,r3,12
   46b48:	1813883a 	mov	r9,r3
   46b4c:	21000504 	addi	r4,r4,20
   46b50:	1909883a 	add	r4,r3,r4
   46b54:	49800015 	stw	r6,0(r9)
   46b58:	41800015 	stw	r6,0(r8)
   46b5c:	59800015 	stw	r6,0(r11)
   46b60:	51800015 	stw	r6,0(r10)
   46b64:	42000404 	addi	r8,r8,16
   46b68:	4a400404 	addi	r9,r9,16
   46b6c:	5ac00404 	addi	r11,r11,16
   46b70:	52800404 	addi	r10,r10,16
   46b74:	413ff71e 	bne	r8,r4,46b54 <__alt_data_end+0xfffd4b54>
   46b78:	63000044 	addi	r12,r12,1
   46b7c:	6018913a 	slli	r12,r12,4
   46b80:	39c003cc 	andi	r7,r7,15
   46b84:	010000c4 	movi	r4,3
   46b88:	1b07883a 	add	r3,r3,r12
   46b8c:	21c00e2e 	bgeu	r4,r7,46bc8 <memset+0x100>
   46b90:	1813883a 	mov	r9,r3
   46b94:	3811883a 	mov	r8,r7
   46b98:	010000c4 	movi	r4,3
   46b9c:	49800015 	stw	r6,0(r9)
   46ba0:	423fff04 	addi	r8,r8,-4
   46ba4:	4a400104 	addi	r9,r9,4
   46ba8:	223ffc36 	bltu	r4,r8,46b9c <__alt_data_end+0xfffd4b9c>
   46bac:	393fff04 	addi	r4,r7,-4
   46bb0:	2008d0ba 	srli	r4,r4,2
   46bb4:	39c000cc 	andi	r7,r7,3
   46bb8:	21000044 	addi	r4,r4,1
   46bbc:	2109883a 	add	r4,r4,r4
   46bc0:	2109883a 	add	r4,r4,r4
   46bc4:	1907883a 	add	r3,r3,r4
   46bc8:	38000526 	beq	r7,zero,46be0 <memset+0x118>
   46bcc:	19cf883a 	add	r7,r3,r7
   46bd0:	19400005 	stb	r5,0(r3)
   46bd4:	18c00044 	addi	r3,r3,1
   46bd8:	38fffd1e 	bne	r7,r3,46bd0 <__alt_data_end+0xfffd4bd0>
   46bdc:	f800283a 	ret
   46be0:	f800283a 	ret
   46be4:	2007883a 	mov	r3,r4
   46be8:	300f883a 	mov	r7,r6
   46bec:	003fc706 	br	46b0c <__alt_data_end+0xfffd4b0c>

00046bf0 <_Balloc>:
   46bf0:	20801317 	ldw	r2,76(r4)
   46bf4:	defffc04 	addi	sp,sp,-16
   46bf8:	dc400115 	stw	r17,4(sp)
   46bfc:	dc000015 	stw	r16,0(sp)
   46c00:	dfc00315 	stw	ra,12(sp)
   46c04:	dc800215 	stw	r18,8(sp)
   46c08:	2023883a 	mov	r17,r4
   46c0c:	2821883a 	mov	r16,r5
   46c10:	10000f26 	beq	r2,zero,46c50 <_Balloc+0x60>
   46c14:	8407883a 	add	r3,r16,r16
   46c18:	18c7883a 	add	r3,r3,r3
   46c1c:	10c7883a 	add	r3,r2,r3
   46c20:	18800017 	ldw	r2,0(r3)
   46c24:	10001126 	beq	r2,zero,46c6c <_Balloc+0x7c>
   46c28:	11000017 	ldw	r4,0(r2)
   46c2c:	19000015 	stw	r4,0(r3)
   46c30:	10000415 	stw	zero,16(r2)
   46c34:	10000315 	stw	zero,12(r2)
   46c38:	dfc00317 	ldw	ra,12(sp)
   46c3c:	dc800217 	ldw	r18,8(sp)
   46c40:	dc400117 	ldw	r17,4(sp)
   46c44:	dc000017 	ldw	r16,0(sp)
   46c48:	dec00404 	addi	sp,sp,16
   46c4c:	f800283a 	ret
   46c50:	01800844 	movi	r6,33
   46c54:	01400104 	movi	r5,4
   46c58:	0049b2c0 	call	49b2c <_calloc_r>
   46c5c:	88801315 	stw	r2,76(r17)
   46c60:	103fec1e 	bne	r2,zero,46c14 <__alt_data_end+0xfffd4c14>
   46c64:	0005883a 	mov	r2,zero
   46c68:	003ff306 	br	46c38 <__alt_data_end+0xfffd4c38>
   46c6c:	01400044 	movi	r5,1
   46c70:	2c24983a 	sll	r18,r5,r16
   46c74:	8809883a 	mov	r4,r17
   46c78:	91800144 	addi	r6,r18,5
   46c7c:	318d883a 	add	r6,r6,r6
   46c80:	318d883a 	add	r6,r6,r6
   46c84:	0049b2c0 	call	49b2c <_calloc_r>
   46c88:	103ff626 	beq	r2,zero,46c64 <__alt_data_end+0xfffd4c64>
   46c8c:	14000115 	stw	r16,4(r2)
   46c90:	14800215 	stw	r18,8(r2)
   46c94:	003fe606 	br	46c30 <__alt_data_end+0xfffd4c30>

00046c98 <_Bfree>:
   46c98:	28000826 	beq	r5,zero,46cbc <_Bfree+0x24>
   46c9c:	28c00117 	ldw	r3,4(r5)
   46ca0:	20801317 	ldw	r2,76(r4)
   46ca4:	18c7883a 	add	r3,r3,r3
   46ca8:	18c7883a 	add	r3,r3,r3
   46cac:	10c5883a 	add	r2,r2,r3
   46cb0:	10c00017 	ldw	r3,0(r2)
   46cb4:	28c00015 	stw	r3,0(r5)
   46cb8:	11400015 	stw	r5,0(r2)
   46cbc:	f800283a 	ret

00046cc0 <__multadd>:
   46cc0:	defffa04 	addi	sp,sp,-24
   46cc4:	dc800315 	stw	r18,12(sp)
   46cc8:	dc400215 	stw	r17,8(sp)
   46ccc:	dc000115 	stw	r16,4(sp)
   46cd0:	2823883a 	mov	r17,r5
   46cd4:	2c000417 	ldw	r16,16(r5)
   46cd8:	dfc00515 	stw	ra,20(sp)
   46cdc:	dcc00415 	stw	r19,16(sp)
   46ce0:	2025883a 	mov	r18,r4
   46ce4:	29400504 	addi	r5,r5,20
   46ce8:	0011883a 	mov	r8,zero
   46cec:	28c00017 	ldw	r3,0(r5)
   46cf0:	29400104 	addi	r5,r5,4
   46cf4:	42000044 	addi	r8,r8,1
   46cf8:	18bfffcc 	andi	r2,r3,65535
   46cfc:	1185383a 	mul	r2,r2,r6
   46d00:	1806d43a 	srli	r3,r3,16
   46d04:	11cf883a 	add	r7,r2,r7
   46d08:	3808d43a 	srli	r4,r7,16
   46d0c:	1987383a 	mul	r3,r3,r6
   46d10:	38bfffcc 	andi	r2,r7,65535
   46d14:	1907883a 	add	r3,r3,r4
   46d18:	1808943a 	slli	r4,r3,16
   46d1c:	180ed43a 	srli	r7,r3,16
   46d20:	2085883a 	add	r2,r4,r2
   46d24:	28bfff15 	stw	r2,-4(r5)
   46d28:	443ff016 	blt	r8,r16,46cec <__alt_data_end+0xfffd4cec>
   46d2c:	38000926 	beq	r7,zero,46d54 <__multadd+0x94>
   46d30:	88800217 	ldw	r2,8(r17)
   46d34:	80800f0e 	bge	r16,r2,46d74 <__multadd+0xb4>
   46d38:	80800144 	addi	r2,r16,5
   46d3c:	1085883a 	add	r2,r2,r2
   46d40:	1085883a 	add	r2,r2,r2
   46d44:	8885883a 	add	r2,r17,r2
   46d48:	11c00015 	stw	r7,0(r2)
   46d4c:	84000044 	addi	r16,r16,1
   46d50:	8c000415 	stw	r16,16(r17)
   46d54:	8805883a 	mov	r2,r17
   46d58:	dfc00517 	ldw	ra,20(sp)
   46d5c:	dcc00417 	ldw	r19,16(sp)
   46d60:	dc800317 	ldw	r18,12(sp)
   46d64:	dc400217 	ldw	r17,8(sp)
   46d68:	dc000117 	ldw	r16,4(sp)
   46d6c:	dec00604 	addi	sp,sp,24
   46d70:	f800283a 	ret
   46d74:	89400117 	ldw	r5,4(r17)
   46d78:	9009883a 	mov	r4,r18
   46d7c:	d9c00015 	stw	r7,0(sp)
   46d80:	29400044 	addi	r5,r5,1
   46d84:	0046bf00 	call	46bf0 <_Balloc>
   46d88:	89800417 	ldw	r6,16(r17)
   46d8c:	89400304 	addi	r5,r17,12
   46d90:	11000304 	addi	r4,r2,12
   46d94:	31800084 	addi	r6,r6,2
   46d98:	318d883a 	add	r6,r6,r6
   46d9c:	318d883a 	add	r6,r6,r6
   46da0:	1027883a 	mov	r19,r2
   46da4:	00468240 	call	46824 <memcpy>
   46da8:	d9c00017 	ldw	r7,0(sp)
   46dac:	88000a26 	beq	r17,zero,46dd8 <__multadd+0x118>
   46db0:	88c00117 	ldw	r3,4(r17)
   46db4:	90801317 	ldw	r2,76(r18)
   46db8:	18c7883a 	add	r3,r3,r3
   46dbc:	18c7883a 	add	r3,r3,r3
   46dc0:	10c5883a 	add	r2,r2,r3
   46dc4:	10c00017 	ldw	r3,0(r2)
   46dc8:	88c00015 	stw	r3,0(r17)
   46dcc:	14400015 	stw	r17,0(r2)
   46dd0:	9823883a 	mov	r17,r19
   46dd4:	003fd806 	br	46d38 <__alt_data_end+0xfffd4d38>
   46dd8:	9823883a 	mov	r17,r19
   46ddc:	003fd606 	br	46d38 <__alt_data_end+0xfffd4d38>

00046de0 <__s2b>:
   46de0:	defff904 	addi	sp,sp,-28
   46de4:	dc400115 	stw	r17,4(sp)
   46de8:	dc000015 	stw	r16,0(sp)
   46dec:	2023883a 	mov	r17,r4
   46df0:	2821883a 	mov	r16,r5
   46df4:	39000204 	addi	r4,r7,8
   46df8:	01400244 	movi	r5,9
   46dfc:	dcc00315 	stw	r19,12(sp)
   46e00:	dc800215 	stw	r18,8(sp)
   46e04:	dfc00615 	stw	ra,24(sp)
   46e08:	dd400515 	stw	r21,20(sp)
   46e0c:	dd000415 	stw	r20,16(sp)
   46e10:	3825883a 	mov	r18,r7
   46e14:	3027883a 	mov	r19,r6
   46e18:	004ae5c0 	call	4ae5c <__divsi3>
   46e1c:	00c00044 	movi	r3,1
   46e20:	000b883a 	mov	r5,zero
   46e24:	1880030e 	bge	r3,r2,46e34 <__s2b+0x54>
   46e28:	18c7883a 	add	r3,r3,r3
   46e2c:	29400044 	addi	r5,r5,1
   46e30:	18bffd16 	blt	r3,r2,46e28 <__alt_data_end+0xfffd4e28>
   46e34:	8809883a 	mov	r4,r17
   46e38:	0046bf00 	call	46bf0 <_Balloc>
   46e3c:	d8c00717 	ldw	r3,28(sp)
   46e40:	10c00515 	stw	r3,20(r2)
   46e44:	00c00044 	movi	r3,1
   46e48:	10c00415 	stw	r3,16(r2)
   46e4c:	00c00244 	movi	r3,9
   46e50:	1cc0210e 	bge	r3,r19,46ed8 <__s2b+0xf8>
   46e54:	80eb883a 	add	r21,r16,r3
   46e58:	a829883a 	mov	r20,r21
   46e5c:	84e1883a 	add	r16,r16,r19
   46e60:	a1c00007 	ldb	r7,0(r20)
   46e64:	01800284 	movi	r6,10
   46e68:	a5000044 	addi	r20,r20,1
   46e6c:	100b883a 	mov	r5,r2
   46e70:	39fff404 	addi	r7,r7,-48
   46e74:	8809883a 	mov	r4,r17
   46e78:	0046cc00 	call	46cc0 <__multadd>
   46e7c:	a43ff81e 	bne	r20,r16,46e60 <__alt_data_end+0xfffd4e60>
   46e80:	ace1883a 	add	r16,r21,r19
   46e84:	843ffe04 	addi	r16,r16,-8
   46e88:	9c800a0e 	bge	r19,r18,46eb4 <__s2b+0xd4>
   46e8c:	94e5c83a 	sub	r18,r18,r19
   46e90:	84a5883a 	add	r18,r16,r18
   46e94:	81c00007 	ldb	r7,0(r16)
   46e98:	01800284 	movi	r6,10
   46e9c:	84000044 	addi	r16,r16,1
   46ea0:	100b883a 	mov	r5,r2
   46ea4:	39fff404 	addi	r7,r7,-48
   46ea8:	8809883a 	mov	r4,r17
   46eac:	0046cc00 	call	46cc0 <__multadd>
   46eb0:	84bff81e 	bne	r16,r18,46e94 <__alt_data_end+0xfffd4e94>
   46eb4:	dfc00617 	ldw	ra,24(sp)
   46eb8:	dd400517 	ldw	r21,20(sp)
   46ebc:	dd000417 	ldw	r20,16(sp)
   46ec0:	dcc00317 	ldw	r19,12(sp)
   46ec4:	dc800217 	ldw	r18,8(sp)
   46ec8:	dc400117 	ldw	r17,4(sp)
   46ecc:	dc000017 	ldw	r16,0(sp)
   46ed0:	dec00704 	addi	sp,sp,28
   46ed4:	f800283a 	ret
   46ed8:	84000284 	addi	r16,r16,10
   46edc:	1827883a 	mov	r19,r3
   46ee0:	003fe906 	br	46e88 <__alt_data_end+0xfffd4e88>

00046ee4 <__hi0bits>:
   46ee4:	20bfffec 	andhi	r2,r4,65535
   46ee8:	1000141e 	bne	r2,zero,46f3c <__hi0bits+0x58>
   46eec:	2008943a 	slli	r4,r4,16
   46ef0:	00800404 	movi	r2,16
   46ef4:	20ffc02c 	andhi	r3,r4,65280
   46ef8:	1800021e 	bne	r3,zero,46f04 <__hi0bits+0x20>
   46efc:	2008923a 	slli	r4,r4,8
   46f00:	10800204 	addi	r2,r2,8
   46f04:	20fc002c 	andhi	r3,r4,61440
   46f08:	1800021e 	bne	r3,zero,46f14 <__hi0bits+0x30>
   46f0c:	2008913a 	slli	r4,r4,4
   46f10:	10800104 	addi	r2,r2,4
   46f14:	20f0002c 	andhi	r3,r4,49152
   46f18:	1800031e 	bne	r3,zero,46f28 <__hi0bits+0x44>
   46f1c:	2109883a 	add	r4,r4,r4
   46f20:	10800084 	addi	r2,r2,2
   46f24:	2109883a 	add	r4,r4,r4
   46f28:	20000316 	blt	r4,zero,46f38 <__hi0bits+0x54>
   46f2c:	2110002c 	andhi	r4,r4,16384
   46f30:	2000041e 	bne	r4,zero,46f44 <__hi0bits+0x60>
   46f34:	00800804 	movi	r2,32
   46f38:	f800283a 	ret
   46f3c:	0005883a 	mov	r2,zero
   46f40:	003fec06 	br	46ef4 <__alt_data_end+0xfffd4ef4>
   46f44:	10800044 	addi	r2,r2,1
   46f48:	f800283a 	ret

00046f4c <__lo0bits>:
   46f4c:	20c00017 	ldw	r3,0(r4)
   46f50:	188001cc 	andi	r2,r3,7
   46f54:	10000826 	beq	r2,zero,46f78 <__lo0bits+0x2c>
   46f58:	1880004c 	andi	r2,r3,1
   46f5c:	1000211e 	bne	r2,zero,46fe4 <__lo0bits+0x98>
   46f60:	1880008c 	andi	r2,r3,2
   46f64:	1000211e 	bne	r2,zero,46fec <__lo0bits+0xa0>
   46f68:	1806d0ba 	srli	r3,r3,2
   46f6c:	00800084 	movi	r2,2
   46f70:	20c00015 	stw	r3,0(r4)
   46f74:	f800283a 	ret
   46f78:	18bfffcc 	andi	r2,r3,65535
   46f7c:	10001326 	beq	r2,zero,46fcc <__lo0bits+0x80>
   46f80:	0005883a 	mov	r2,zero
   46f84:	19403fcc 	andi	r5,r3,255
   46f88:	2800021e 	bne	r5,zero,46f94 <__lo0bits+0x48>
   46f8c:	1806d23a 	srli	r3,r3,8
   46f90:	10800204 	addi	r2,r2,8
   46f94:	194003cc 	andi	r5,r3,15
   46f98:	2800021e 	bne	r5,zero,46fa4 <__lo0bits+0x58>
   46f9c:	1806d13a 	srli	r3,r3,4
   46fa0:	10800104 	addi	r2,r2,4
   46fa4:	194000cc 	andi	r5,r3,3
   46fa8:	2800021e 	bne	r5,zero,46fb4 <__lo0bits+0x68>
   46fac:	1806d0ba 	srli	r3,r3,2
   46fb0:	10800084 	addi	r2,r2,2
   46fb4:	1940004c 	andi	r5,r3,1
   46fb8:	2800081e 	bne	r5,zero,46fdc <__lo0bits+0x90>
   46fbc:	1806d07a 	srli	r3,r3,1
   46fc0:	1800051e 	bne	r3,zero,46fd8 <__lo0bits+0x8c>
   46fc4:	00800804 	movi	r2,32
   46fc8:	f800283a 	ret
   46fcc:	1806d43a 	srli	r3,r3,16
   46fd0:	00800404 	movi	r2,16
   46fd4:	003feb06 	br	46f84 <__alt_data_end+0xfffd4f84>
   46fd8:	10800044 	addi	r2,r2,1
   46fdc:	20c00015 	stw	r3,0(r4)
   46fe0:	f800283a 	ret
   46fe4:	0005883a 	mov	r2,zero
   46fe8:	f800283a 	ret
   46fec:	1806d07a 	srli	r3,r3,1
   46ff0:	00800044 	movi	r2,1
   46ff4:	20c00015 	stw	r3,0(r4)
   46ff8:	f800283a 	ret

00046ffc <__i2b>:
   46ffc:	defffd04 	addi	sp,sp,-12
   47000:	dc000015 	stw	r16,0(sp)
   47004:	04000044 	movi	r16,1
   47008:	dc400115 	stw	r17,4(sp)
   4700c:	2823883a 	mov	r17,r5
   47010:	800b883a 	mov	r5,r16
   47014:	dfc00215 	stw	ra,8(sp)
   47018:	0046bf00 	call	46bf0 <_Balloc>
   4701c:	14400515 	stw	r17,20(r2)
   47020:	14000415 	stw	r16,16(r2)
   47024:	dfc00217 	ldw	ra,8(sp)
   47028:	dc400117 	ldw	r17,4(sp)
   4702c:	dc000017 	ldw	r16,0(sp)
   47030:	dec00304 	addi	sp,sp,12
   47034:	f800283a 	ret

00047038 <__multiply>:
   47038:	defffa04 	addi	sp,sp,-24
   4703c:	dcc00315 	stw	r19,12(sp)
   47040:	dc800215 	stw	r18,8(sp)
   47044:	34c00417 	ldw	r19,16(r6)
   47048:	2c800417 	ldw	r18,16(r5)
   4704c:	dd000415 	stw	r20,16(sp)
   47050:	dc400115 	stw	r17,4(sp)
   47054:	dfc00515 	stw	ra,20(sp)
   47058:	dc000015 	stw	r16,0(sp)
   4705c:	2829883a 	mov	r20,r5
   47060:	3023883a 	mov	r17,r6
   47064:	94c0050e 	bge	r18,r19,4707c <__multiply+0x44>
   47068:	9007883a 	mov	r3,r18
   4706c:	3029883a 	mov	r20,r6
   47070:	9825883a 	mov	r18,r19
   47074:	2823883a 	mov	r17,r5
   47078:	1827883a 	mov	r19,r3
   4707c:	a0800217 	ldw	r2,8(r20)
   47080:	94e1883a 	add	r16,r18,r19
   47084:	a1400117 	ldw	r5,4(r20)
   47088:	1400010e 	bge	r2,r16,47090 <__multiply+0x58>
   4708c:	29400044 	addi	r5,r5,1
   47090:	0046bf00 	call	46bf0 <_Balloc>
   47094:	8415883a 	add	r10,r16,r16
   47098:	12c00504 	addi	r11,r2,20
   4709c:	5295883a 	add	r10,r10,r10
   470a0:	5a95883a 	add	r10,r11,r10
   470a4:	5807883a 	mov	r3,r11
   470a8:	5a80032e 	bgeu	r11,r10,470b8 <__multiply+0x80>
   470ac:	18000015 	stw	zero,0(r3)
   470b0:	18c00104 	addi	r3,r3,4
   470b4:	1abffd36 	bltu	r3,r10,470ac <__alt_data_end+0xfffd50ac>
   470b8:	9ce7883a 	add	r19,r19,r19
   470bc:	94a5883a 	add	r18,r18,r18
   470c0:	89800504 	addi	r6,r17,20
   470c4:	9ce7883a 	add	r19,r19,r19
   470c8:	a3400504 	addi	r13,r20,20
   470cc:	94a5883a 	add	r18,r18,r18
   470d0:	34d9883a 	add	r12,r6,r19
   470d4:	6c93883a 	add	r9,r13,r18
   470d8:	3300422e 	bgeu	r6,r12,471e4 <__multiply+0x1ac>
   470dc:	37c00017 	ldw	ra,0(r6)
   470e0:	fbffffcc 	andi	r15,ra,65535
   470e4:	78001b26 	beq	r15,zero,47154 <__multiply+0x11c>
   470e8:	5811883a 	mov	r8,r11
   470ec:	681d883a 	mov	r14,r13
   470f0:	000f883a 	mov	r7,zero
   470f4:	71000017 	ldw	r4,0(r14)
   470f8:	40c00017 	ldw	r3,0(r8)
   470fc:	73800104 	addi	r14,r14,4
   47100:	217fffcc 	andi	r5,r4,65535
   47104:	2bcb383a 	mul	r5,r5,r15
   47108:	2008d43a 	srli	r4,r4,16
   4710c:	1c7fffcc 	andi	r17,r3,65535
   47110:	2c4b883a 	add	r5,r5,r17
   47114:	29cb883a 	add	r5,r5,r7
   47118:	23c9383a 	mul	r4,r4,r15
   4711c:	1806d43a 	srli	r3,r3,16
   47120:	280ed43a 	srli	r7,r5,16
   47124:	297fffcc 	andi	r5,r5,65535
   47128:	20c7883a 	add	r3,r4,r3
   4712c:	19c7883a 	add	r3,r3,r7
   47130:	1808943a 	slli	r4,r3,16
   47134:	4023883a 	mov	r17,r8
   47138:	180ed43a 	srli	r7,r3,16
   4713c:	214ab03a 	or	r5,r4,r5
   47140:	41400015 	stw	r5,0(r8)
   47144:	42000104 	addi	r8,r8,4
   47148:	727fea36 	bltu	r14,r9,470f4 <__alt_data_end+0xfffd50f4>
   4714c:	89c00115 	stw	r7,4(r17)
   47150:	37c00017 	ldw	ra,0(r6)
   47154:	f83ed43a 	srli	ra,ra,16
   47158:	f8001f26 	beq	ra,zero,471d8 <__multiply+0x1a0>
   4715c:	58c00017 	ldw	r3,0(r11)
   47160:	681d883a 	mov	r14,r13
   47164:	581f883a 	mov	r15,r11
   47168:	1811883a 	mov	r8,r3
   4716c:	5825883a 	mov	r18,r11
   47170:	000f883a 	mov	r7,zero
   47174:	00000106 	br	4717c <__multiply+0x144>
   47178:	8825883a 	mov	r18,r17
   4717c:	7140000b 	ldhu	r5,0(r14)
   47180:	4010d43a 	srli	r8,r8,16
   47184:	193fffcc 	andi	r4,r3,65535
   47188:	2fcb383a 	mul	r5,r5,ra
   4718c:	7bc00104 	addi	r15,r15,4
   47190:	73800104 	addi	r14,r14,4
   47194:	2a0b883a 	add	r5,r5,r8
   47198:	29cb883a 	add	r5,r5,r7
   4719c:	2806943a 	slli	r3,r5,16
   471a0:	94400104 	addi	r17,r18,4
   471a4:	280ad43a 	srli	r5,r5,16
   471a8:	1908b03a 	or	r4,r3,r4
   471ac:	793fff15 	stw	r4,-4(r15)
   471b0:	70ffff17 	ldw	r3,-4(r14)
   471b4:	8a000017 	ldw	r8,0(r17)
   471b8:	1806d43a 	srli	r3,r3,16
   471bc:	413fffcc 	andi	r4,r8,65535
   471c0:	1fc7383a 	mul	r3,r3,ra
   471c4:	1907883a 	add	r3,r3,r4
   471c8:	1947883a 	add	r3,r3,r5
   471cc:	180ed43a 	srli	r7,r3,16
   471d0:	727fe936 	bltu	r14,r9,47178 <__alt_data_end+0xfffd5178>
   471d4:	90c00115 	stw	r3,4(r18)
   471d8:	31800104 	addi	r6,r6,4
   471dc:	5ac00104 	addi	r11,r11,4
   471e0:	333fbe36 	bltu	r6,r12,470dc <__alt_data_end+0xfffd50dc>
   471e4:	0400090e 	bge	zero,r16,4720c <__multiply+0x1d4>
   471e8:	50ffff17 	ldw	r3,-4(r10)
   471ec:	52bfff04 	addi	r10,r10,-4
   471f0:	18000326 	beq	r3,zero,47200 <__multiply+0x1c8>
   471f4:	00000506 	br	4720c <__multiply+0x1d4>
   471f8:	50c00017 	ldw	r3,0(r10)
   471fc:	1800031e 	bne	r3,zero,4720c <__multiply+0x1d4>
   47200:	843fffc4 	addi	r16,r16,-1
   47204:	52bfff04 	addi	r10,r10,-4
   47208:	803ffb1e 	bne	r16,zero,471f8 <__alt_data_end+0xfffd51f8>
   4720c:	14000415 	stw	r16,16(r2)
   47210:	dfc00517 	ldw	ra,20(sp)
   47214:	dd000417 	ldw	r20,16(sp)
   47218:	dcc00317 	ldw	r19,12(sp)
   4721c:	dc800217 	ldw	r18,8(sp)
   47220:	dc400117 	ldw	r17,4(sp)
   47224:	dc000017 	ldw	r16,0(sp)
   47228:	dec00604 	addi	sp,sp,24
   4722c:	f800283a 	ret

00047230 <__pow5mult>:
   47230:	defffa04 	addi	sp,sp,-24
   47234:	dcc00315 	stw	r19,12(sp)
   47238:	dc000015 	stw	r16,0(sp)
   4723c:	dfc00515 	stw	ra,20(sp)
   47240:	dd000415 	stw	r20,16(sp)
   47244:	dc800215 	stw	r18,8(sp)
   47248:	dc400115 	stw	r17,4(sp)
   4724c:	308000cc 	andi	r2,r6,3
   47250:	3021883a 	mov	r16,r6
   47254:	2027883a 	mov	r19,r4
   47258:	10002f1e 	bne	r2,zero,47318 <__pow5mult+0xe8>
   4725c:	2825883a 	mov	r18,r5
   47260:	8021d0ba 	srai	r16,r16,2
   47264:	80001a26 	beq	r16,zero,472d0 <__pow5mult+0xa0>
   47268:	9c401217 	ldw	r17,72(r19)
   4726c:	8800061e 	bne	r17,zero,47288 <__pow5mult+0x58>
   47270:	00003406 	br	47344 <__pow5mult+0x114>
   47274:	8021d07a 	srai	r16,r16,1
   47278:	80001526 	beq	r16,zero,472d0 <__pow5mult+0xa0>
   4727c:	88800017 	ldw	r2,0(r17)
   47280:	10001c26 	beq	r2,zero,472f4 <__pow5mult+0xc4>
   47284:	1023883a 	mov	r17,r2
   47288:	8080004c 	andi	r2,r16,1
   4728c:	103ff926 	beq	r2,zero,47274 <__alt_data_end+0xfffd5274>
   47290:	880d883a 	mov	r6,r17
   47294:	900b883a 	mov	r5,r18
   47298:	9809883a 	mov	r4,r19
   4729c:	00470380 	call	47038 <__multiply>
   472a0:	90001b26 	beq	r18,zero,47310 <__pow5mult+0xe0>
   472a4:	91000117 	ldw	r4,4(r18)
   472a8:	98c01317 	ldw	r3,76(r19)
   472ac:	8021d07a 	srai	r16,r16,1
   472b0:	2109883a 	add	r4,r4,r4
   472b4:	2109883a 	add	r4,r4,r4
   472b8:	1907883a 	add	r3,r3,r4
   472bc:	19000017 	ldw	r4,0(r3)
   472c0:	91000015 	stw	r4,0(r18)
   472c4:	1c800015 	stw	r18,0(r3)
   472c8:	1025883a 	mov	r18,r2
   472cc:	803feb1e 	bne	r16,zero,4727c <__alt_data_end+0xfffd527c>
   472d0:	9005883a 	mov	r2,r18
   472d4:	dfc00517 	ldw	ra,20(sp)
   472d8:	dd000417 	ldw	r20,16(sp)
   472dc:	dcc00317 	ldw	r19,12(sp)
   472e0:	dc800217 	ldw	r18,8(sp)
   472e4:	dc400117 	ldw	r17,4(sp)
   472e8:	dc000017 	ldw	r16,0(sp)
   472ec:	dec00604 	addi	sp,sp,24
   472f0:	f800283a 	ret
   472f4:	880d883a 	mov	r6,r17
   472f8:	880b883a 	mov	r5,r17
   472fc:	9809883a 	mov	r4,r19
   47300:	00470380 	call	47038 <__multiply>
   47304:	88800015 	stw	r2,0(r17)
   47308:	10000015 	stw	zero,0(r2)
   4730c:	003fdd06 	br	47284 <__alt_data_end+0xfffd5284>
   47310:	1025883a 	mov	r18,r2
   47314:	003fd706 	br	47274 <__alt_data_end+0xfffd5274>
   47318:	10bfffc4 	addi	r2,r2,-1
   4731c:	1085883a 	add	r2,r2,r2
   47320:	00c00174 	movhi	r3,5
   47324:	18ffe004 	addi	r3,r3,-128
   47328:	1085883a 	add	r2,r2,r2
   4732c:	1885883a 	add	r2,r3,r2
   47330:	11800017 	ldw	r6,0(r2)
   47334:	000f883a 	mov	r7,zero
   47338:	0046cc00 	call	46cc0 <__multadd>
   4733c:	1025883a 	mov	r18,r2
   47340:	003fc706 	br	47260 <__alt_data_end+0xfffd5260>
   47344:	05000044 	movi	r20,1
   47348:	a00b883a 	mov	r5,r20
   4734c:	9809883a 	mov	r4,r19
   47350:	0046bf00 	call	46bf0 <_Balloc>
   47354:	1023883a 	mov	r17,r2
   47358:	00809c44 	movi	r2,625
   4735c:	88800515 	stw	r2,20(r17)
   47360:	8d000415 	stw	r20,16(r17)
   47364:	9c401215 	stw	r17,72(r19)
   47368:	88000015 	stw	zero,0(r17)
   4736c:	003fc606 	br	47288 <__alt_data_end+0xfffd5288>

00047370 <__lshift>:
   47370:	defff904 	addi	sp,sp,-28
   47374:	dd400515 	stw	r21,20(sp)
   47378:	dcc00315 	stw	r19,12(sp)
   4737c:	302bd17a 	srai	r21,r6,5
   47380:	2cc00417 	ldw	r19,16(r5)
   47384:	28800217 	ldw	r2,8(r5)
   47388:	dd000415 	stw	r20,16(sp)
   4738c:	ace7883a 	add	r19,r21,r19
   47390:	dc800215 	stw	r18,8(sp)
   47394:	dc400115 	stw	r17,4(sp)
   47398:	dc000015 	stw	r16,0(sp)
   4739c:	dfc00615 	stw	ra,24(sp)
   473a0:	9c000044 	addi	r16,r19,1
   473a4:	2823883a 	mov	r17,r5
   473a8:	3029883a 	mov	r20,r6
   473ac:	2025883a 	mov	r18,r4
   473b0:	29400117 	ldw	r5,4(r5)
   473b4:	1400030e 	bge	r2,r16,473c4 <__lshift+0x54>
   473b8:	1085883a 	add	r2,r2,r2
   473bc:	29400044 	addi	r5,r5,1
   473c0:	143ffd16 	blt	r2,r16,473b8 <__alt_data_end+0xfffd53b8>
   473c4:	9009883a 	mov	r4,r18
   473c8:	0046bf00 	call	46bf0 <_Balloc>
   473cc:	10c00504 	addi	r3,r2,20
   473d0:	0540070e 	bge	zero,r21,473f0 <__lshift+0x80>
   473d4:	ad6b883a 	add	r21,r21,r21
   473d8:	ad6b883a 	add	r21,r21,r21
   473dc:	1809883a 	mov	r4,r3
   473e0:	1d47883a 	add	r3,r3,r21
   473e4:	20000015 	stw	zero,0(r4)
   473e8:	21000104 	addi	r4,r4,4
   473ec:	193ffd1e 	bne	r3,r4,473e4 <__alt_data_end+0xfffd53e4>
   473f0:	8a000417 	ldw	r8,16(r17)
   473f4:	89000504 	addi	r4,r17,20
   473f8:	a18007cc 	andi	r6,r20,31
   473fc:	4211883a 	add	r8,r8,r8
   47400:	4211883a 	add	r8,r8,r8
   47404:	2211883a 	add	r8,r4,r8
   47408:	30002326 	beq	r6,zero,47498 <__lshift+0x128>
   4740c:	02400804 	movi	r9,32
   47410:	4993c83a 	sub	r9,r9,r6
   47414:	000b883a 	mov	r5,zero
   47418:	21c00017 	ldw	r7,0(r4)
   4741c:	1815883a 	mov	r10,r3
   47420:	18c00104 	addi	r3,r3,4
   47424:	398e983a 	sll	r7,r7,r6
   47428:	21000104 	addi	r4,r4,4
   4742c:	394ab03a 	or	r5,r7,r5
   47430:	197fff15 	stw	r5,-4(r3)
   47434:	217fff17 	ldw	r5,-4(r4)
   47438:	2a4ad83a 	srl	r5,r5,r9
   4743c:	223ff636 	bltu	r4,r8,47418 <__alt_data_end+0xfffd5418>
   47440:	51400115 	stw	r5,4(r10)
   47444:	28001a1e 	bne	r5,zero,474b0 <__lshift+0x140>
   47448:	843fffc4 	addi	r16,r16,-1
   4744c:	14000415 	stw	r16,16(r2)
   47450:	88000826 	beq	r17,zero,47474 <__lshift+0x104>
   47454:	89000117 	ldw	r4,4(r17)
   47458:	90c01317 	ldw	r3,76(r18)
   4745c:	2109883a 	add	r4,r4,r4
   47460:	2109883a 	add	r4,r4,r4
   47464:	1907883a 	add	r3,r3,r4
   47468:	19000017 	ldw	r4,0(r3)
   4746c:	89000015 	stw	r4,0(r17)
   47470:	1c400015 	stw	r17,0(r3)
   47474:	dfc00617 	ldw	ra,24(sp)
   47478:	dd400517 	ldw	r21,20(sp)
   4747c:	dd000417 	ldw	r20,16(sp)
   47480:	dcc00317 	ldw	r19,12(sp)
   47484:	dc800217 	ldw	r18,8(sp)
   47488:	dc400117 	ldw	r17,4(sp)
   4748c:	dc000017 	ldw	r16,0(sp)
   47490:	dec00704 	addi	sp,sp,28
   47494:	f800283a 	ret
   47498:	21400017 	ldw	r5,0(r4)
   4749c:	18c00104 	addi	r3,r3,4
   474a0:	21000104 	addi	r4,r4,4
   474a4:	197fff15 	stw	r5,-4(r3)
   474a8:	223ffb36 	bltu	r4,r8,47498 <__alt_data_end+0xfffd5498>
   474ac:	003fe606 	br	47448 <__alt_data_end+0xfffd5448>
   474b0:	9c000084 	addi	r16,r19,2
   474b4:	003fe406 	br	47448 <__alt_data_end+0xfffd5448>

000474b8 <__mcmp>:
   474b8:	20800417 	ldw	r2,16(r4)
   474bc:	28c00417 	ldw	r3,16(r5)
   474c0:	10c5c83a 	sub	r2,r2,r3
   474c4:	1000111e 	bne	r2,zero,4750c <__mcmp+0x54>
   474c8:	18c7883a 	add	r3,r3,r3
   474cc:	18c7883a 	add	r3,r3,r3
   474d0:	21000504 	addi	r4,r4,20
   474d4:	29400504 	addi	r5,r5,20
   474d8:	20c5883a 	add	r2,r4,r3
   474dc:	28cb883a 	add	r5,r5,r3
   474e0:	00000106 	br	474e8 <__mcmp+0x30>
   474e4:	20800a2e 	bgeu	r4,r2,47510 <__mcmp+0x58>
   474e8:	10bfff04 	addi	r2,r2,-4
   474ec:	297fff04 	addi	r5,r5,-4
   474f0:	11800017 	ldw	r6,0(r2)
   474f4:	28c00017 	ldw	r3,0(r5)
   474f8:	30fffa26 	beq	r6,r3,474e4 <__alt_data_end+0xfffd54e4>
   474fc:	30c00236 	bltu	r6,r3,47508 <__mcmp+0x50>
   47500:	00800044 	movi	r2,1
   47504:	f800283a 	ret
   47508:	00bfffc4 	movi	r2,-1
   4750c:	f800283a 	ret
   47510:	0005883a 	mov	r2,zero
   47514:	f800283a 	ret

00047518 <__mdiff>:
   47518:	28c00417 	ldw	r3,16(r5)
   4751c:	30800417 	ldw	r2,16(r6)
   47520:	defffa04 	addi	sp,sp,-24
   47524:	dcc00315 	stw	r19,12(sp)
   47528:	dc800215 	stw	r18,8(sp)
   4752c:	dfc00515 	stw	ra,20(sp)
   47530:	dd000415 	stw	r20,16(sp)
   47534:	dc400115 	stw	r17,4(sp)
   47538:	dc000015 	stw	r16,0(sp)
   4753c:	1887c83a 	sub	r3,r3,r2
   47540:	2825883a 	mov	r18,r5
   47544:	3027883a 	mov	r19,r6
   47548:	1800141e 	bne	r3,zero,4759c <__mdiff+0x84>
   4754c:	1085883a 	add	r2,r2,r2
   47550:	1085883a 	add	r2,r2,r2
   47554:	2a000504 	addi	r8,r5,20
   47558:	34000504 	addi	r16,r6,20
   4755c:	4087883a 	add	r3,r8,r2
   47560:	8085883a 	add	r2,r16,r2
   47564:	00000106 	br	4756c <__mdiff+0x54>
   47568:	40c0592e 	bgeu	r8,r3,476d0 <__mdiff+0x1b8>
   4756c:	18ffff04 	addi	r3,r3,-4
   47570:	10bfff04 	addi	r2,r2,-4
   47574:	19c00017 	ldw	r7,0(r3)
   47578:	11400017 	ldw	r5,0(r2)
   4757c:	397ffa26 	beq	r7,r5,47568 <__alt_data_end+0xfffd5568>
   47580:	3940592e 	bgeu	r7,r5,476e8 <__mdiff+0x1d0>
   47584:	9005883a 	mov	r2,r18
   47588:	4023883a 	mov	r17,r8
   4758c:	9825883a 	mov	r18,r19
   47590:	05000044 	movi	r20,1
   47594:	1027883a 	mov	r19,r2
   47598:	00000406 	br	475ac <__mdiff+0x94>
   4759c:	18005616 	blt	r3,zero,476f8 <__mdiff+0x1e0>
   475a0:	34400504 	addi	r17,r6,20
   475a4:	2c000504 	addi	r16,r5,20
   475a8:	0029883a 	mov	r20,zero
   475ac:	91400117 	ldw	r5,4(r18)
   475b0:	0046bf00 	call	46bf0 <_Balloc>
   475b4:	92400417 	ldw	r9,16(r18)
   475b8:	9b000417 	ldw	r12,16(r19)
   475bc:	12c00504 	addi	r11,r2,20
   475c0:	4a51883a 	add	r8,r9,r9
   475c4:	6319883a 	add	r12,r12,r12
   475c8:	4211883a 	add	r8,r8,r8
   475cc:	6319883a 	add	r12,r12,r12
   475d0:	15000315 	stw	r20,12(r2)
   475d4:	8211883a 	add	r8,r16,r8
   475d8:	8b19883a 	add	r12,r17,r12
   475dc:	0007883a 	mov	r3,zero
   475e0:	81400017 	ldw	r5,0(r16)
   475e4:	89c00017 	ldw	r7,0(r17)
   475e8:	59800104 	addi	r6,r11,4
   475ec:	293fffcc 	andi	r4,r5,65535
   475f0:	20c7883a 	add	r3,r4,r3
   475f4:	393fffcc 	andi	r4,r7,65535
   475f8:	1909c83a 	sub	r4,r3,r4
   475fc:	280ad43a 	srli	r5,r5,16
   47600:	380ed43a 	srli	r7,r7,16
   47604:	2007d43a 	srai	r3,r4,16
   47608:	213fffcc 	andi	r4,r4,65535
   4760c:	29cbc83a 	sub	r5,r5,r7
   47610:	28c7883a 	add	r3,r5,r3
   47614:	180a943a 	slli	r5,r3,16
   47618:	8c400104 	addi	r17,r17,4
   4761c:	84000104 	addi	r16,r16,4
   47620:	2908b03a 	or	r4,r5,r4
   47624:	59000015 	stw	r4,0(r11)
   47628:	1807d43a 	srai	r3,r3,16
   4762c:	3015883a 	mov	r10,r6
   47630:	3017883a 	mov	r11,r6
   47634:	8b3fea36 	bltu	r17,r12,475e0 <__alt_data_end+0xfffd55e0>
   47638:	8200162e 	bgeu	r16,r8,47694 <__mdiff+0x17c>
   4763c:	8017883a 	mov	r11,r16
   47640:	59400017 	ldw	r5,0(r11)
   47644:	31800104 	addi	r6,r6,4
   47648:	5ac00104 	addi	r11,r11,4
   4764c:	293fffcc 	andi	r4,r5,65535
   47650:	20c7883a 	add	r3,r4,r3
   47654:	280ed43a 	srli	r7,r5,16
   47658:	180bd43a 	srai	r5,r3,16
   4765c:	193fffcc 	andi	r4,r3,65535
   47660:	3947883a 	add	r3,r7,r5
   47664:	180a943a 	slli	r5,r3,16
   47668:	1807d43a 	srai	r3,r3,16
   4766c:	2908b03a 	or	r4,r5,r4
   47670:	313fff15 	stw	r4,-4(r6)
   47674:	5a3ff236 	bltu	r11,r8,47640 <__alt_data_end+0xfffd5640>
   47678:	0406303a 	nor	r3,zero,r16
   4767c:	1a07883a 	add	r3,r3,r8
   47680:	1806d0ba 	srli	r3,r3,2
   47684:	18c00044 	addi	r3,r3,1
   47688:	18c7883a 	add	r3,r3,r3
   4768c:	18c7883a 	add	r3,r3,r3
   47690:	50d5883a 	add	r10,r10,r3
   47694:	50ffff04 	addi	r3,r10,-4
   47698:	2000041e 	bne	r4,zero,476ac <__mdiff+0x194>
   4769c:	18ffff04 	addi	r3,r3,-4
   476a0:	19000017 	ldw	r4,0(r3)
   476a4:	4a7fffc4 	addi	r9,r9,-1
   476a8:	203ffc26 	beq	r4,zero,4769c <__alt_data_end+0xfffd569c>
   476ac:	12400415 	stw	r9,16(r2)
   476b0:	dfc00517 	ldw	ra,20(sp)
   476b4:	dd000417 	ldw	r20,16(sp)
   476b8:	dcc00317 	ldw	r19,12(sp)
   476bc:	dc800217 	ldw	r18,8(sp)
   476c0:	dc400117 	ldw	r17,4(sp)
   476c4:	dc000017 	ldw	r16,0(sp)
   476c8:	dec00604 	addi	sp,sp,24
   476cc:	f800283a 	ret
   476d0:	000b883a 	mov	r5,zero
   476d4:	0046bf00 	call	46bf0 <_Balloc>
   476d8:	00c00044 	movi	r3,1
   476dc:	10c00415 	stw	r3,16(r2)
   476e0:	10000515 	stw	zero,20(r2)
   476e4:	003ff206 	br	476b0 <__alt_data_end+0xfffd56b0>
   476e8:	8023883a 	mov	r17,r16
   476ec:	0029883a 	mov	r20,zero
   476f0:	4021883a 	mov	r16,r8
   476f4:	003fad06 	br	475ac <__alt_data_end+0xfffd55ac>
   476f8:	9005883a 	mov	r2,r18
   476fc:	94400504 	addi	r17,r18,20
   47700:	9c000504 	addi	r16,r19,20
   47704:	9825883a 	mov	r18,r19
   47708:	05000044 	movi	r20,1
   4770c:	1027883a 	mov	r19,r2
   47710:	003fa606 	br	475ac <__alt_data_end+0xfffd55ac>

00047714 <__ulp>:
   47714:	295ffc2c 	andhi	r5,r5,32752
   47718:	00bf3034 	movhi	r2,64704
   4771c:	2887883a 	add	r3,r5,r2
   47720:	00c0020e 	bge	zero,r3,4772c <__ulp+0x18>
   47724:	0005883a 	mov	r2,zero
   47728:	f800283a 	ret
   4772c:	00c7c83a 	sub	r3,zero,r3
   47730:	1807d53a 	srai	r3,r3,20
   47734:	008004c4 	movi	r2,19
   47738:	10c00b0e 	bge	r2,r3,47768 <__ulp+0x54>
   4773c:	18bffb04 	addi	r2,r3,-20
   47740:	01000784 	movi	r4,30
   47744:	0007883a 	mov	r3,zero
   47748:	20800516 	blt	r4,r2,47760 <__ulp+0x4c>
   4774c:	010007c4 	movi	r4,31
   47750:	2089c83a 	sub	r4,r4,r2
   47754:	00800044 	movi	r2,1
   47758:	1104983a 	sll	r2,r2,r4
   4775c:	f800283a 	ret
   47760:	00800044 	movi	r2,1
   47764:	f800283a 	ret
   47768:	01400234 	movhi	r5,8
   4776c:	28c7d83a 	sra	r3,r5,r3
   47770:	0005883a 	mov	r2,zero
   47774:	f800283a 	ret

00047778 <__b2d>:
   47778:	defffa04 	addi	sp,sp,-24
   4777c:	dc000015 	stw	r16,0(sp)
   47780:	24000417 	ldw	r16,16(r4)
   47784:	dc400115 	stw	r17,4(sp)
   47788:	24400504 	addi	r17,r4,20
   4778c:	8421883a 	add	r16,r16,r16
   47790:	8421883a 	add	r16,r16,r16
   47794:	8c21883a 	add	r16,r17,r16
   47798:	dc800215 	stw	r18,8(sp)
   4779c:	84bfff17 	ldw	r18,-4(r16)
   477a0:	dd000415 	stw	r20,16(sp)
   477a4:	dcc00315 	stw	r19,12(sp)
   477a8:	9009883a 	mov	r4,r18
   477ac:	2829883a 	mov	r20,r5
   477b0:	dfc00515 	stw	ra,20(sp)
   477b4:	0046ee40 	call	46ee4 <__hi0bits>
   477b8:	00c00804 	movi	r3,32
   477bc:	1889c83a 	sub	r4,r3,r2
   477c0:	a1000015 	stw	r4,0(r20)
   477c4:	01000284 	movi	r4,10
   477c8:	84ffff04 	addi	r19,r16,-4
   477cc:	20801216 	blt	r4,r2,47818 <__b2d+0xa0>
   477d0:	018002c4 	movi	r6,11
   477d4:	308dc83a 	sub	r6,r6,r2
   477d8:	9186d83a 	srl	r3,r18,r6
   477dc:	18cffc34 	orhi	r3,r3,16368
   477e0:	8cc0212e 	bgeu	r17,r19,47868 <__b2d+0xf0>
   477e4:	813ffe17 	ldw	r4,-8(r16)
   477e8:	218cd83a 	srl	r6,r4,r6
   477ec:	10800544 	addi	r2,r2,21
   477f0:	9084983a 	sll	r2,r18,r2
   477f4:	1184b03a 	or	r2,r2,r6
   477f8:	dfc00517 	ldw	ra,20(sp)
   477fc:	dd000417 	ldw	r20,16(sp)
   47800:	dcc00317 	ldw	r19,12(sp)
   47804:	dc800217 	ldw	r18,8(sp)
   47808:	dc400117 	ldw	r17,4(sp)
   4780c:	dc000017 	ldw	r16,0(sp)
   47810:	dec00604 	addi	sp,sp,24
   47814:	f800283a 	ret
   47818:	8cc00f2e 	bgeu	r17,r19,47858 <__b2d+0xe0>
   4781c:	117ffd44 	addi	r5,r2,-11
   47820:	80bffe17 	ldw	r2,-8(r16)
   47824:	28000e26 	beq	r5,zero,47860 <__b2d+0xe8>
   47828:	1949c83a 	sub	r4,r3,r5
   4782c:	9164983a 	sll	r18,r18,r5
   47830:	1106d83a 	srl	r3,r2,r4
   47834:	81bffe04 	addi	r6,r16,-8
   47838:	948ffc34 	orhi	r18,r18,16368
   4783c:	90c6b03a 	or	r3,r18,r3
   47840:	89800e2e 	bgeu	r17,r6,4787c <__b2d+0x104>
   47844:	81bffd17 	ldw	r6,-12(r16)
   47848:	1144983a 	sll	r2,r2,r5
   4784c:	310ad83a 	srl	r5,r6,r4
   47850:	2884b03a 	or	r2,r5,r2
   47854:	003fe806 	br	477f8 <__alt_data_end+0xfffd57f8>
   47858:	10bffd44 	addi	r2,r2,-11
   4785c:	1000041e 	bne	r2,zero,47870 <__b2d+0xf8>
   47860:	90cffc34 	orhi	r3,r18,16368
   47864:	003fe406 	br	477f8 <__alt_data_end+0xfffd57f8>
   47868:	000d883a 	mov	r6,zero
   4786c:	003fdf06 	br	477ec <__alt_data_end+0xfffd57ec>
   47870:	90a4983a 	sll	r18,r18,r2
   47874:	0005883a 	mov	r2,zero
   47878:	003ff906 	br	47860 <__alt_data_end+0xfffd5860>
   4787c:	1144983a 	sll	r2,r2,r5
   47880:	003fdd06 	br	477f8 <__alt_data_end+0xfffd57f8>

00047884 <__d2b>:
   47884:	defff804 	addi	sp,sp,-32
   47888:	dc000215 	stw	r16,8(sp)
   4788c:	3021883a 	mov	r16,r6
   47890:	dc400315 	stw	r17,12(sp)
   47894:	8022907a 	slli	r17,r16,1
   47898:	dd000615 	stw	r20,24(sp)
   4789c:	2829883a 	mov	r20,r5
   478a0:	01400044 	movi	r5,1
   478a4:	dcc00515 	stw	r19,20(sp)
   478a8:	dc800415 	stw	r18,16(sp)
   478ac:	dfc00715 	stw	ra,28(sp)
   478b0:	3825883a 	mov	r18,r7
   478b4:	8822d57a 	srli	r17,r17,21
   478b8:	0046bf00 	call	46bf0 <_Balloc>
   478bc:	1027883a 	mov	r19,r2
   478c0:	00800434 	movhi	r2,16
   478c4:	10bfffc4 	addi	r2,r2,-1
   478c8:	808c703a 	and	r6,r16,r2
   478cc:	88000126 	beq	r17,zero,478d4 <__d2b+0x50>
   478d0:	31800434 	orhi	r6,r6,16
   478d4:	d9800015 	stw	r6,0(sp)
   478d8:	a0002426 	beq	r20,zero,4796c <__d2b+0xe8>
   478dc:	d9000104 	addi	r4,sp,4
   478e0:	dd000115 	stw	r20,4(sp)
   478e4:	0046f4c0 	call	46f4c <__lo0bits>
   478e8:	d8c00017 	ldw	r3,0(sp)
   478ec:	10002f1e 	bne	r2,zero,479ac <__d2b+0x128>
   478f0:	d9000117 	ldw	r4,4(sp)
   478f4:	99000515 	stw	r4,20(r19)
   478f8:	1821003a 	cmpeq	r16,r3,zero
   478fc:	01000084 	movi	r4,2
   47900:	2421c83a 	sub	r16,r4,r16
   47904:	98c00615 	stw	r3,24(r19)
   47908:	9c000415 	stw	r16,16(r19)
   4790c:	88001f1e 	bne	r17,zero,4798c <__d2b+0x108>
   47910:	10bef384 	addi	r2,r2,-1074
   47914:	90800015 	stw	r2,0(r18)
   47918:	00900034 	movhi	r2,16384
   4791c:	10bfffc4 	addi	r2,r2,-1
   47920:	8085883a 	add	r2,r16,r2
   47924:	1085883a 	add	r2,r2,r2
   47928:	1085883a 	add	r2,r2,r2
   4792c:	9885883a 	add	r2,r19,r2
   47930:	11000517 	ldw	r4,20(r2)
   47934:	8020917a 	slli	r16,r16,5
   47938:	0046ee40 	call	46ee4 <__hi0bits>
   4793c:	d8c00817 	ldw	r3,32(sp)
   47940:	8085c83a 	sub	r2,r16,r2
   47944:	18800015 	stw	r2,0(r3)
   47948:	9805883a 	mov	r2,r19
   4794c:	dfc00717 	ldw	ra,28(sp)
   47950:	dd000617 	ldw	r20,24(sp)
   47954:	dcc00517 	ldw	r19,20(sp)
   47958:	dc800417 	ldw	r18,16(sp)
   4795c:	dc400317 	ldw	r17,12(sp)
   47960:	dc000217 	ldw	r16,8(sp)
   47964:	dec00804 	addi	sp,sp,32
   47968:	f800283a 	ret
   4796c:	d809883a 	mov	r4,sp
   47970:	0046f4c0 	call	46f4c <__lo0bits>
   47974:	d8c00017 	ldw	r3,0(sp)
   47978:	04000044 	movi	r16,1
   4797c:	9c000415 	stw	r16,16(r19)
   47980:	98c00515 	stw	r3,20(r19)
   47984:	10800804 	addi	r2,r2,32
   47988:	883fe126 	beq	r17,zero,47910 <__alt_data_end+0xfffd5910>
   4798c:	00c00d44 	movi	r3,53
   47990:	8c7ef344 	addi	r17,r17,-1075
   47994:	88a3883a 	add	r17,r17,r2
   47998:	1885c83a 	sub	r2,r3,r2
   4799c:	d8c00817 	ldw	r3,32(sp)
   479a0:	94400015 	stw	r17,0(r18)
   479a4:	18800015 	stw	r2,0(r3)
   479a8:	003fe706 	br	47948 <__alt_data_end+0xfffd5948>
   479ac:	01000804 	movi	r4,32
   479b0:	2089c83a 	sub	r4,r4,r2
   479b4:	1908983a 	sll	r4,r3,r4
   479b8:	d9400117 	ldw	r5,4(sp)
   479bc:	1886d83a 	srl	r3,r3,r2
   479c0:	2148b03a 	or	r4,r4,r5
   479c4:	99000515 	stw	r4,20(r19)
   479c8:	d8c00015 	stw	r3,0(sp)
   479cc:	003fca06 	br	478f8 <__alt_data_end+0xfffd58f8>

000479d0 <__ratio>:
   479d0:	defff904 	addi	sp,sp,-28
   479d4:	dc400315 	stw	r17,12(sp)
   479d8:	2823883a 	mov	r17,r5
   479dc:	d9400104 	addi	r5,sp,4
   479e0:	dfc00615 	stw	ra,24(sp)
   479e4:	dcc00515 	stw	r19,20(sp)
   479e8:	dc800415 	stw	r18,16(sp)
   479ec:	2027883a 	mov	r19,r4
   479f0:	dc000215 	stw	r16,8(sp)
   479f4:	00477780 	call	47778 <__b2d>
   479f8:	d80b883a 	mov	r5,sp
   479fc:	8809883a 	mov	r4,r17
   47a00:	1025883a 	mov	r18,r2
   47a04:	1821883a 	mov	r16,r3
   47a08:	00477780 	call	47778 <__b2d>
   47a0c:	8a000417 	ldw	r8,16(r17)
   47a10:	99000417 	ldw	r4,16(r19)
   47a14:	d9400117 	ldw	r5,4(sp)
   47a18:	2209c83a 	sub	r4,r4,r8
   47a1c:	2010917a 	slli	r8,r4,5
   47a20:	d9000017 	ldw	r4,0(sp)
   47a24:	2909c83a 	sub	r4,r5,r4
   47a28:	4109883a 	add	r4,r8,r4
   47a2c:	01000e0e 	bge	zero,r4,47a68 <__ratio+0x98>
   47a30:	2008953a 	slli	r4,r4,20
   47a34:	2421883a 	add	r16,r4,r16
   47a38:	100d883a 	mov	r6,r2
   47a3c:	180f883a 	mov	r7,r3
   47a40:	9009883a 	mov	r4,r18
   47a44:	800b883a 	mov	r5,r16
   47a48:	004b8bc0 	call	4b8bc <__divdf3>
   47a4c:	dfc00617 	ldw	ra,24(sp)
   47a50:	dcc00517 	ldw	r19,20(sp)
   47a54:	dc800417 	ldw	r18,16(sp)
   47a58:	dc400317 	ldw	r17,12(sp)
   47a5c:	dc000217 	ldw	r16,8(sp)
   47a60:	dec00704 	addi	sp,sp,28
   47a64:	f800283a 	ret
   47a68:	2008953a 	slli	r4,r4,20
   47a6c:	1907c83a 	sub	r3,r3,r4
   47a70:	003ff106 	br	47a38 <__alt_data_end+0xfffd5a38>

00047a74 <_mprec_log10>:
   47a74:	defffe04 	addi	sp,sp,-8
   47a78:	dc000015 	stw	r16,0(sp)
   47a7c:	dfc00115 	stw	ra,4(sp)
   47a80:	008005c4 	movi	r2,23
   47a84:	2021883a 	mov	r16,r4
   47a88:	11000d0e 	bge	r2,r4,47ac0 <_mprec_log10+0x4c>
   47a8c:	0005883a 	mov	r2,zero
   47a90:	00cffc34 	movhi	r3,16368
   47a94:	843fffc4 	addi	r16,r16,-1
   47a98:	000d883a 	mov	r6,zero
   47a9c:	01d00934 	movhi	r7,16420
   47aa0:	1009883a 	mov	r4,r2
   47aa4:	180b883a 	mov	r5,r3
   47aa8:	004c3fc0 	call	4c3fc <__muldf3>
   47aac:	803ff91e 	bne	r16,zero,47a94 <__alt_data_end+0xfffd5a94>
   47ab0:	dfc00117 	ldw	ra,4(sp)
   47ab4:	dc000017 	ldw	r16,0(sp)
   47ab8:	dec00204 	addi	sp,sp,8
   47abc:	f800283a 	ret
   47ac0:	202090fa 	slli	r16,r4,3
   47ac4:	00800174 	movhi	r2,5
   47ac8:	10bff704 	addi	r2,r2,-36
   47acc:	1421883a 	add	r16,r2,r16
   47ad0:	80800017 	ldw	r2,0(r16)
   47ad4:	80c00117 	ldw	r3,4(r16)
   47ad8:	dfc00117 	ldw	ra,4(sp)
   47adc:	dc000017 	ldw	r16,0(sp)
   47ae0:	dec00204 	addi	sp,sp,8
   47ae4:	f800283a 	ret

00047ae8 <__copybits>:
   47ae8:	297fffc4 	addi	r5,r5,-1
   47aec:	280fd17a 	srai	r7,r5,5
   47af0:	30c00417 	ldw	r3,16(r6)
   47af4:	30800504 	addi	r2,r6,20
   47af8:	39c00044 	addi	r7,r7,1
   47afc:	18c7883a 	add	r3,r3,r3
   47b00:	39cf883a 	add	r7,r7,r7
   47b04:	18c7883a 	add	r3,r3,r3
   47b08:	39cf883a 	add	r7,r7,r7
   47b0c:	10c7883a 	add	r3,r2,r3
   47b10:	21cf883a 	add	r7,r4,r7
   47b14:	10c00d2e 	bgeu	r2,r3,47b4c <__copybits+0x64>
   47b18:	200b883a 	mov	r5,r4
   47b1c:	12000017 	ldw	r8,0(r2)
   47b20:	29400104 	addi	r5,r5,4
   47b24:	10800104 	addi	r2,r2,4
   47b28:	2a3fff15 	stw	r8,-4(r5)
   47b2c:	10fffb36 	bltu	r2,r3,47b1c <__alt_data_end+0xfffd5b1c>
   47b30:	1985c83a 	sub	r2,r3,r6
   47b34:	10bffac4 	addi	r2,r2,-21
   47b38:	1004d0ba 	srli	r2,r2,2
   47b3c:	10800044 	addi	r2,r2,1
   47b40:	1085883a 	add	r2,r2,r2
   47b44:	1085883a 	add	r2,r2,r2
   47b48:	2089883a 	add	r4,r4,r2
   47b4c:	21c0032e 	bgeu	r4,r7,47b5c <__copybits+0x74>
   47b50:	20000015 	stw	zero,0(r4)
   47b54:	21000104 	addi	r4,r4,4
   47b58:	21fffd36 	bltu	r4,r7,47b50 <__alt_data_end+0xfffd5b50>
   47b5c:	f800283a 	ret

00047b60 <__any_on>:
   47b60:	20c00417 	ldw	r3,16(r4)
   47b64:	2805d17a 	srai	r2,r5,5
   47b68:	21000504 	addi	r4,r4,20
   47b6c:	18800d0e 	bge	r3,r2,47ba4 <__any_on+0x44>
   47b70:	18c7883a 	add	r3,r3,r3
   47b74:	18c7883a 	add	r3,r3,r3
   47b78:	20c7883a 	add	r3,r4,r3
   47b7c:	20c0192e 	bgeu	r4,r3,47be4 <__any_on+0x84>
   47b80:	18bfff17 	ldw	r2,-4(r3)
   47b84:	18ffff04 	addi	r3,r3,-4
   47b88:	1000041e 	bne	r2,zero,47b9c <__any_on+0x3c>
   47b8c:	20c0142e 	bgeu	r4,r3,47be0 <__any_on+0x80>
   47b90:	18ffff04 	addi	r3,r3,-4
   47b94:	19400017 	ldw	r5,0(r3)
   47b98:	283ffc26 	beq	r5,zero,47b8c <__alt_data_end+0xfffd5b8c>
   47b9c:	00800044 	movi	r2,1
   47ba0:	f800283a 	ret
   47ba4:	10c00a0e 	bge	r2,r3,47bd0 <__any_on+0x70>
   47ba8:	1085883a 	add	r2,r2,r2
   47bac:	1085883a 	add	r2,r2,r2
   47bb0:	294007cc 	andi	r5,r5,31
   47bb4:	2087883a 	add	r3,r4,r2
   47bb8:	283ff026 	beq	r5,zero,47b7c <__alt_data_end+0xfffd5b7c>
   47bbc:	19800017 	ldw	r6,0(r3)
   47bc0:	3144d83a 	srl	r2,r6,r5
   47bc4:	114a983a 	sll	r5,r2,r5
   47bc8:	317ff41e 	bne	r6,r5,47b9c <__alt_data_end+0xfffd5b9c>
   47bcc:	003feb06 	br	47b7c <__alt_data_end+0xfffd5b7c>
   47bd0:	1085883a 	add	r2,r2,r2
   47bd4:	1085883a 	add	r2,r2,r2
   47bd8:	2087883a 	add	r3,r4,r2
   47bdc:	003fe706 	br	47b7c <__alt_data_end+0xfffd5b7c>
   47be0:	f800283a 	ret
   47be4:	0005883a 	mov	r2,zero
   47be8:	f800283a 	ret

00047bec <_realloc_r>:
   47bec:	defff604 	addi	sp,sp,-40
   47bf0:	dc800215 	stw	r18,8(sp)
   47bf4:	dfc00915 	stw	ra,36(sp)
   47bf8:	df000815 	stw	fp,32(sp)
   47bfc:	ddc00715 	stw	r23,28(sp)
   47c00:	dd800615 	stw	r22,24(sp)
   47c04:	dd400515 	stw	r21,20(sp)
   47c08:	dd000415 	stw	r20,16(sp)
   47c0c:	dcc00315 	stw	r19,12(sp)
   47c10:	dc400115 	stw	r17,4(sp)
   47c14:	dc000015 	stw	r16,0(sp)
   47c18:	3025883a 	mov	r18,r6
   47c1c:	2800b726 	beq	r5,zero,47efc <_realloc_r+0x310>
   47c20:	282b883a 	mov	r21,r5
   47c24:	2029883a 	mov	r20,r4
   47c28:	004dc280 	call	4dc28 <__malloc_lock>
   47c2c:	a8bfff17 	ldw	r2,-4(r21)
   47c30:	043fff04 	movi	r16,-4
   47c34:	90c002c4 	addi	r3,r18,11
   47c38:	01000584 	movi	r4,22
   47c3c:	acfffe04 	addi	r19,r21,-8
   47c40:	1420703a 	and	r16,r2,r16
   47c44:	20c0332e 	bgeu	r4,r3,47d14 <_realloc_r+0x128>
   47c48:	047ffe04 	movi	r17,-8
   47c4c:	1c62703a 	and	r17,r3,r17
   47c50:	8807883a 	mov	r3,r17
   47c54:	88005816 	blt	r17,zero,47db8 <_realloc_r+0x1cc>
   47c58:	8c805736 	bltu	r17,r18,47db8 <_realloc_r+0x1cc>
   47c5c:	80c0300e 	bge	r16,r3,47d20 <_realloc_r+0x134>
   47c60:	07000174 	movhi	fp,5
   47c64:	e701a304 	addi	fp,fp,1676
   47c68:	e1c00217 	ldw	r7,8(fp)
   47c6c:	9c09883a 	add	r4,r19,r16
   47c70:	22000117 	ldw	r8,4(r4)
   47c74:	21c06326 	beq	r4,r7,47e04 <_realloc_r+0x218>
   47c78:	017fff84 	movi	r5,-2
   47c7c:	414a703a 	and	r5,r8,r5
   47c80:	214b883a 	add	r5,r4,r5
   47c84:	29800117 	ldw	r6,4(r5)
   47c88:	3180004c 	andi	r6,r6,1
   47c8c:	30003f26 	beq	r6,zero,47d8c <_realloc_r+0x1a0>
   47c90:	1080004c 	andi	r2,r2,1
   47c94:	10008326 	beq	r2,zero,47ea4 <_realloc_r+0x2b8>
   47c98:	900b883a 	mov	r5,r18
   47c9c:	a009883a 	mov	r4,r20
   47ca0:	0045f340 	call	45f34 <_malloc_r>
   47ca4:	1025883a 	mov	r18,r2
   47ca8:	10011e26 	beq	r2,zero,48124 <_realloc_r+0x538>
   47cac:	a93fff17 	ldw	r4,-4(r21)
   47cb0:	10fffe04 	addi	r3,r2,-8
   47cb4:	00bfff84 	movi	r2,-2
   47cb8:	2084703a 	and	r2,r4,r2
   47cbc:	9885883a 	add	r2,r19,r2
   47cc0:	1880ee26 	beq	r3,r2,4807c <_realloc_r+0x490>
   47cc4:	81bfff04 	addi	r6,r16,-4
   47cc8:	00800904 	movi	r2,36
   47ccc:	1180b836 	bltu	r2,r6,47fb0 <_realloc_r+0x3c4>
   47cd0:	00c004c4 	movi	r3,19
   47cd4:	19809636 	bltu	r3,r6,47f30 <_realloc_r+0x344>
   47cd8:	9005883a 	mov	r2,r18
   47cdc:	a807883a 	mov	r3,r21
   47ce0:	19000017 	ldw	r4,0(r3)
   47ce4:	11000015 	stw	r4,0(r2)
   47ce8:	19000117 	ldw	r4,4(r3)
   47cec:	11000115 	stw	r4,4(r2)
   47cf0:	18c00217 	ldw	r3,8(r3)
   47cf4:	10c00215 	stw	r3,8(r2)
   47cf8:	a80b883a 	mov	r5,r21
   47cfc:	a009883a 	mov	r4,r20
   47d00:	00453480 	call	45348 <_free_r>
   47d04:	a009883a 	mov	r4,r20
   47d08:	004dc4c0 	call	4dc4c <__malloc_unlock>
   47d0c:	9005883a 	mov	r2,r18
   47d10:	00001206 	br	47d5c <_realloc_r+0x170>
   47d14:	00c00404 	movi	r3,16
   47d18:	1823883a 	mov	r17,r3
   47d1c:	003fce06 	br	47c58 <__alt_data_end+0xfffd5c58>
   47d20:	a825883a 	mov	r18,r21
   47d24:	8445c83a 	sub	r2,r16,r17
   47d28:	00c003c4 	movi	r3,15
   47d2c:	18802636 	bltu	r3,r2,47dc8 <_realloc_r+0x1dc>
   47d30:	99800117 	ldw	r6,4(r19)
   47d34:	9c07883a 	add	r3,r19,r16
   47d38:	3180004c 	andi	r6,r6,1
   47d3c:	3420b03a 	or	r16,r6,r16
   47d40:	9c000115 	stw	r16,4(r19)
   47d44:	18800117 	ldw	r2,4(r3)
   47d48:	10800054 	ori	r2,r2,1
   47d4c:	18800115 	stw	r2,4(r3)
   47d50:	a009883a 	mov	r4,r20
   47d54:	004dc4c0 	call	4dc4c <__malloc_unlock>
   47d58:	9005883a 	mov	r2,r18
   47d5c:	dfc00917 	ldw	ra,36(sp)
   47d60:	df000817 	ldw	fp,32(sp)
   47d64:	ddc00717 	ldw	r23,28(sp)
   47d68:	dd800617 	ldw	r22,24(sp)
   47d6c:	dd400517 	ldw	r21,20(sp)
   47d70:	dd000417 	ldw	r20,16(sp)
   47d74:	dcc00317 	ldw	r19,12(sp)
   47d78:	dc800217 	ldw	r18,8(sp)
   47d7c:	dc400117 	ldw	r17,4(sp)
   47d80:	dc000017 	ldw	r16,0(sp)
   47d84:	dec00a04 	addi	sp,sp,40
   47d88:	f800283a 	ret
   47d8c:	017fff04 	movi	r5,-4
   47d90:	414a703a 	and	r5,r8,r5
   47d94:	814d883a 	add	r6,r16,r5
   47d98:	30c01f16 	blt	r6,r3,47e18 <_realloc_r+0x22c>
   47d9c:	20800317 	ldw	r2,12(r4)
   47da0:	20c00217 	ldw	r3,8(r4)
   47da4:	a825883a 	mov	r18,r21
   47da8:	3021883a 	mov	r16,r6
   47dac:	18800315 	stw	r2,12(r3)
   47db0:	10c00215 	stw	r3,8(r2)
   47db4:	003fdb06 	br	47d24 <__alt_data_end+0xfffd5d24>
   47db8:	00800304 	movi	r2,12
   47dbc:	a0800015 	stw	r2,0(r20)
   47dc0:	0005883a 	mov	r2,zero
   47dc4:	003fe506 	br	47d5c <__alt_data_end+0xfffd5d5c>
   47dc8:	98c00117 	ldw	r3,4(r19)
   47dcc:	9c4b883a 	add	r5,r19,r17
   47dd0:	11000054 	ori	r4,r2,1
   47dd4:	18c0004c 	andi	r3,r3,1
   47dd8:	1c62b03a 	or	r17,r3,r17
   47ddc:	9c400115 	stw	r17,4(r19)
   47de0:	29000115 	stw	r4,4(r5)
   47de4:	2885883a 	add	r2,r5,r2
   47de8:	10c00117 	ldw	r3,4(r2)
   47dec:	29400204 	addi	r5,r5,8
   47df0:	a009883a 	mov	r4,r20
   47df4:	18c00054 	ori	r3,r3,1
   47df8:	10c00115 	stw	r3,4(r2)
   47dfc:	00453480 	call	45348 <_free_r>
   47e00:	003fd306 	br	47d50 <__alt_data_end+0xfffd5d50>
   47e04:	017fff04 	movi	r5,-4
   47e08:	414a703a 	and	r5,r8,r5
   47e0c:	89800404 	addi	r6,r17,16
   47e10:	8151883a 	add	r8,r16,r5
   47e14:	4180590e 	bge	r8,r6,47f7c <_realloc_r+0x390>
   47e18:	1080004c 	andi	r2,r2,1
   47e1c:	103f9e1e 	bne	r2,zero,47c98 <__alt_data_end+0xfffd5c98>
   47e20:	adbffe17 	ldw	r22,-8(r21)
   47e24:	00bfff04 	movi	r2,-4
   47e28:	9dadc83a 	sub	r22,r19,r22
   47e2c:	b1800117 	ldw	r6,4(r22)
   47e30:	3084703a 	and	r2,r6,r2
   47e34:	20002026 	beq	r4,zero,47eb8 <_realloc_r+0x2cc>
   47e38:	80af883a 	add	r23,r16,r2
   47e3c:	b96f883a 	add	r23,r23,r5
   47e40:	21c05f26 	beq	r4,r7,47fc0 <_realloc_r+0x3d4>
   47e44:	b8c01c16 	blt	r23,r3,47eb8 <_realloc_r+0x2cc>
   47e48:	20800317 	ldw	r2,12(r4)
   47e4c:	20c00217 	ldw	r3,8(r4)
   47e50:	81bfff04 	addi	r6,r16,-4
   47e54:	01000904 	movi	r4,36
   47e58:	18800315 	stw	r2,12(r3)
   47e5c:	10c00215 	stw	r3,8(r2)
   47e60:	b0c00217 	ldw	r3,8(r22)
   47e64:	b0800317 	ldw	r2,12(r22)
   47e68:	b4800204 	addi	r18,r22,8
   47e6c:	18800315 	stw	r2,12(r3)
   47e70:	10c00215 	stw	r3,8(r2)
   47e74:	21801b36 	bltu	r4,r6,47ee4 <_realloc_r+0x2f8>
   47e78:	008004c4 	movi	r2,19
   47e7c:	1180352e 	bgeu	r2,r6,47f54 <_realloc_r+0x368>
   47e80:	a8800017 	ldw	r2,0(r21)
   47e84:	b0800215 	stw	r2,8(r22)
   47e88:	a8800117 	ldw	r2,4(r21)
   47e8c:	b0800315 	stw	r2,12(r22)
   47e90:	008006c4 	movi	r2,27
   47e94:	11807f36 	bltu	r2,r6,48094 <_realloc_r+0x4a8>
   47e98:	b0800404 	addi	r2,r22,16
   47e9c:	ad400204 	addi	r21,r21,8
   47ea0:	00002d06 	br	47f58 <_realloc_r+0x36c>
   47ea4:	adbffe17 	ldw	r22,-8(r21)
   47ea8:	00bfff04 	movi	r2,-4
   47eac:	9dadc83a 	sub	r22,r19,r22
   47eb0:	b1000117 	ldw	r4,4(r22)
   47eb4:	2084703a 	and	r2,r4,r2
   47eb8:	b03f7726 	beq	r22,zero,47c98 <__alt_data_end+0xfffd5c98>
   47ebc:	80af883a 	add	r23,r16,r2
   47ec0:	b8ff7516 	blt	r23,r3,47c98 <__alt_data_end+0xfffd5c98>
   47ec4:	b0800317 	ldw	r2,12(r22)
   47ec8:	b0c00217 	ldw	r3,8(r22)
   47ecc:	81bfff04 	addi	r6,r16,-4
   47ed0:	01000904 	movi	r4,36
   47ed4:	18800315 	stw	r2,12(r3)
   47ed8:	10c00215 	stw	r3,8(r2)
   47edc:	b4800204 	addi	r18,r22,8
   47ee0:	21bfe52e 	bgeu	r4,r6,47e78 <__alt_data_end+0xfffd5e78>
   47ee4:	a80b883a 	mov	r5,r21
   47ee8:	9009883a 	mov	r4,r18
   47eec:	004696c0 	call	4696c <memmove>
   47ef0:	b821883a 	mov	r16,r23
   47ef4:	b027883a 	mov	r19,r22
   47ef8:	003f8a06 	br	47d24 <__alt_data_end+0xfffd5d24>
   47efc:	300b883a 	mov	r5,r6
   47f00:	dfc00917 	ldw	ra,36(sp)
   47f04:	df000817 	ldw	fp,32(sp)
   47f08:	ddc00717 	ldw	r23,28(sp)
   47f0c:	dd800617 	ldw	r22,24(sp)
   47f10:	dd400517 	ldw	r21,20(sp)
   47f14:	dd000417 	ldw	r20,16(sp)
   47f18:	dcc00317 	ldw	r19,12(sp)
   47f1c:	dc800217 	ldw	r18,8(sp)
   47f20:	dc400117 	ldw	r17,4(sp)
   47f24:	dc000017 	ldw	r16,0(sp)
   47f28:	dec00a04 	addi	sp,sp,40
   47f2c:	0045f341 	jmpi	45f34 <_malloc_r>
   47f30:	a8c00017 	ldw	r3,0(r21)
   47f34:	90c00015 	stw	r3,0(r18)
   47f38:	a8c00117 	ldw	r3,4(r21)
   47f3c:	90c00115 	stw	r3,4(r18)
   47f40:	00c006c4 	movi	r3,27
   47f44:	19804536 	bltu	r3,r6,4805c <_realloc_r+0x470>
   47f48:	90800204 	addi	r2,r18,8
   47f4c:	a8c00204 	addi	r3,r21,8
   47f50:	003f6306 	br	47ce0 <__alt_data_end+0xfffd5ce0>
   47f54:	9005883a 	mov	r2,r18
   47f58:	a8c00017 	ldw	r3,0(r21)
   47f5c:	b821883a 	mov	r16,r23
   47f60:	b027883a 	mov	r19,r22
   47f64:	10c00015 	stw	r3,0(r2)
   47f68:	a8c00117 	ldw	r3,4(r21)
   47f6c:	10c00115 	stw	r3,4(r2)
   47f70:	a8c00217 	ldw	r3,8(r21)
   47f74:	10c00215 	stw	r3,8(r2)
   47f78:	003f6a06 	br	47d24 <__alt_data_end+0xfffd5d24>
   47f7c:	9c67883a 	add	r19,r19,r17
   47f80:	4445c83a 	sub	r2,r8,r17
   47f84:	e4c00215 	stw	r19,8(fp)
   47f88:	10800054 	ori	r2,r2,1
   47f8c:	98800115 	stw	r2,4(r19)
   47f90:	a8bfff17 	ldw	r2,-4(r21)
   47f94:	a009883a 	mov	r4,r20
   47f98:	1080004c 	andi	r2,r2,1
   47f9c:	1462b03a 	or	r17,r2,r17
   47fa0:	ac7fff15 	stw	r17,-4(r21)
   47fa4:	004dc4c0 	call	4dc4c <__malloc_unlock>
   47fa8:	a805883a 	mov	r2,r21
   47fac:	003f6b06 	br	47d5c <__alt_data_end+0xfffd5d5c>
   47fb0:	a80b883a 	mov	r5,r21
   47fb4:	9009883a 	mov	r4,r18
   47fb8:	004696c0 	call	4696c <memmove>
   47fbc:	003f4e06 	br	47cf8 <__alt_data_end+0xfffd5cf8>
   47fc0:	89000404 	addi	r4,r17,16
   47fc4:	b93fbc16 	blt	r23,r4,47eb8 <__alt_data_end+0xfffd5eb8>
   47fc8:	b0800317 	ldw	r2,12(r22)
   47fcc:	b0c00217 	ldw	r3,8(r22)
   47fd0:	81bfff04 	addi	r6,r16,-4
   47fd4:	01000904 	movi	r4,36
   47fd8:	18800315 	stw	r2,12(r3)
   47fdc:	10c00215 	stw	r3,8(r2)
   47fe0:	b4800204 	addi	r18,r22,8
   47fe4:	21804336 	bltu	r4,r6,480f4 <_realloc_r+0x508>
   47fe8:	008004c4 	movi	r2,19
   47fec:	11803f2e 	bgeu	r2,r6,480ec <_realloc_r+0x500>
   47ff0:	a8800017 	ldw	r2,0(r21)
   47ff4:	b0800215 	stw	r2,8(r22)
   47ff8:	a8800117 	ldw	r2,4(r21)
   47ffc:	b0800315 	stw	r2,12(r22)
   48000:	008006c4 	movi	r2,27
   48004:	11803f36 	bltu	r2,r6,48104 <_realloc_r+0x518>
   48008:	b0800404 	addi	r2,r22,16
   4800c:	ad400204 	addi	r21,r21,8
   48010:	a8c00017 	ldw	r3,0(r21)
   48014:	10c00015 	stw	r3,0(r2)
   48018:	a8c00117 	ldw	r3,4(r21)
   4801c:	10c00115 	stw	r3,4(r2)
   48020:	a8c00217 	ldw	r3,8(r21)
   48024:	10c00215 	stw	r3,8(r2)
   48028:	b447883a 	add	r3,r22,r17
   4802c:	bc45c83a 	sub	r2,r23,r17
   48030:	e0c00215 	stw	r3,8(fp)
   48034:	10800054 	ori	r2,r2,1
   48038:	18800115 	stw	r2,4(r3)
   4803c:	b0800117 	ldw	r2,4(r22)
   48040:	a009883a 	mov	r4,r20
   48044:	1080004c 	andi	r2,r2,1
   48048:	1462b03a 	or	r17,r2,r17
   4804c:	b4400115 	stw	r17,4(r22)
   48050:	004dc4c0 	call	4dc4c <__malloc_unlock>
   48054:	9005883a 	mov	r2,r18
   48058:	003f4006 	br	47d5c <__alt_data_end+0xfffd5d5c>
   4805c:	a8c00217 	ldw	r3,8(r21)
   48060:	90c00215 	stw	r3,8(r18)
   48064:	a8c00317 	ldw	r3,12(r21)
   48068:	90c00315 	stw	r3,12(r18)
   4806c:	30801126 	beq	r6,r2,480b4 <_realloc_r+0x4c8>
   48070:	90800404 	addi	r2,r18,16
   48074:	a8c00404 	addi	r3,r21,16
   48078:	003f1906 	br	47ce0 <__alt_data_end+0xfffd5ce0>
   4807c:	90ffff17 	ldw	r3,-4(r18)
   48080:	00bfff04 	movi	r2,-4
   48084:	a825883a 	mov	r18,r21
   48088:	1884703a 	and	r2,r3,r2
   4808c:	80a1883a 	add	r16,r16,r2
   48090:	003f2406 	br	47d24 <__alt_data_end+0xfffd5d24>
   48094:	a8800217 	ldw	r2,8(r21)
   48098:	b0800415 	stw	r2,16(r22)
   4809c:	a8800317 	ldw	r2,12(r21)
   480a0:	b0800515 	stw	r2,20(r22)
   480a4:	31000a26 	beq	r6,r4,480d0 <_realloc_r+0x4e4>
   480a8:	b0800604 	addi	r2,r22,24
   480ac:	ad400404 	addi	r21,r21,16
   480b0:	003fa906 	br	47f58 <__alt_data_end+0xfffd5f58>
   480b4:	a9000417 	ldw	r4,16(r21)
   480b8:	90800604 	addi	r2,r18,24
   480bc:	a8c00604 	addi	r3,r21,24
   480c0:	91000415 	stw	r4,16(r18)
   480c4:	a9000517 	ldw	r4,20(r21)
   480c8:	91000515 	stw	r4,20(r18)
   480cc:	003f0406 	br	47ce0 <__alt_data_end+0xfffd5ce0>
   480d0:	a8c00417 	ldw	r3,16(r21)
   480d4:	ad400604 	addi	r21,r21,24
   480d8:	b0800804 	addi	r2,r22,32
   480dc:	b0c00615 	stw	r3,24(r22)
   480e0:	a8ffff17 	ldw	r3,-4(r21)
   480e4:	b0c00715 	stw	r3,28(r22)
   480e8:	003f9b06 	br	47f58 <__alt_data_end+0xfffd5f58>
   480ec:	9005883a 	mov	r2,r18
   480f0:	003fc706 	br	48010 <__alt_data_end+0xfffd6010>
   480f4:	a80b883a 	mov	r5,r21
   480f8:	9009883a 	mov	r4,r18
   480fc:	004696c0 	call	4696c <memmove>
   48100:	003fc906 	br	48028 <__alt_data_end+0xfffd6028>
   48104:	a8800217 	ldw	r2,8(r21)
   48108:	b0800415 	stw	r2,16(r22)
   4810c:	a8800317 	ldw	r2,12(r21)
   48110:	b0800515 	stw	r2,20(r22)
   48114:	31000726 	beq	r6,r4,48134 <_realloc_r+0x548>
   48118:	b0800604 	addi	r2,r22,24
   4811c:	ad400404 	addi	r21,r21,16
   48120:	003fbb06 	br	48010 <__alt_data_end+0xfffd6010>
   48124:	a009883a 	mov	r4,r20
   48128:	004dc4c0 	call	4dc4c <__malloc_unlock>
   4812c:	0005883a 	mov	r2,zero
   48130:	003f0a06 	br	47d5c <__alt_data_end+0xfffd5d5c>
   48134:	a8c00417 	ldw	r3,16(r21)
   48138:	ad400604 	addi	r21,r21,24
   4813c:	b0800804 	addi	r2,r22,32
   48140:	b0c00615 	stw	r3,24(r22)
   48144:	a8ffff17 	ldw	r3,-4(r21)
   48148:	b0c00715 	stw	r3,28(r22)
   4814c:	003fb006 	br	48010 <__alt_data_end+0xfffd6010>

00048150 <__fpclassifyd>:
   48150:	00a00034 	movhi	r2,32768
   48154:	10bfffc4 	addi	r2,r2,-1
   48158:	2884703a 	and	r2,r5,r2
   4815c:	10000726 	beq	r2,zero,4817c <__fpclassifyd+0x2c>
   48160:	00fffc34 	movhi	r3,65520
   48164:	019ff834 	movhi	r6,32736
   48168:	28c7883a 	add	r3,r5,r3
   4816c:	31bfffc4 	addi	r6,r6,-1
   48170:	30c00536 	bltu	r6,r3,48188 <__fpclassifyd+0x38>
   48174:	00800104 	movi	r2,4
   48178:	f800283a 	ret
   4817c:	2000021e 	bne	r4,zero,48188 <__fpclassifyd+0x38>
   48180:	00800084 	movi	r2,2
   48184:	f800283a 	ret
   48188:	00dffc34 	movhi	r3,32752
   4818c:	019ff834 	movhi	r6,32736
   48190:	28cb883a 	add	r5,r5,r3
   48194:	31bfffc4 	addi	r6,r6,-1
   48198:	317ff62e 	bgeu	r6,r5,48174 <__alt_data_end+0xfffd6174>
   4819c:	01400434 	movhi	r5,16
   481a0:	297fffc4 	addi	r5,r5,-1
   481a4:	28800236 	bltu	r5,r2,481b0 <__fpclassifyd+0x60>
   481a8:	008000c4 	movi	r2,3
   481ac:	f800283a 	ret
   481b0:	10c00226 	beq	r2,r3,481bc <__fpclassifyd+0x6c>
   481b4:	0005883a 	mov	r2,zero
   481b8:	f800283a 	ret
   481bc:	2005003a 	cmpeq	r2,r4,zero
   481c0:	f800283a 	ret

000481c4 <_sbrk_r>:
   481c4:	defffd04 	addi	sp,sp,-12
   481c8:	dc000015 	stw	r16,0(sp)
   481cc:	04000174 	movhi	r16,5
   481d0:	dc400115 	stw	r17,4(sp)
   481d4:	840df804 	addi	r16,r16,14304
   481d8:	2023883a 	mov	r17,r4
   481dc:	2809883a 	mov	r4,r5
   481e0:	dfc00215 	stw	ra,8(sp)
   481e4:	80000015 	stw	zero,0(r16)
   481e8:	004de0c0 	call	4de0c <sbrk>
   481ec:	00ffffc4 	movi	r3,-1
   481f0:	10c00526 	beq	r2,r3,48208 <_sbrk_r+0x44>
   481f4:	dfc00217 	ldw	ra,8(sp)
   481f8:	dc400117 	ldw	r17,4(sp)
   481fc:	dc000017 	ldw	r16,0(sp)
   48200:	dec00304 	addi	sp,sp,12
   48204:	f800283a 	ret
   48208:	80c00017 	ldw	r3,0(r16)
   4820c:	183ff926 	beq	r3,zero,481f4 <__alt_data_end+0xfffd61f4>
   48210:	88c00015 	stw	r3,0(r17)
   48214:	003ff706 	br	481f4 <__alt_data_end+0xfffd61f4>

00048218 <__sread>:
   48218:	defffe04 	addi	sp,sp,-8
   4821c:	dc000015 	stw	r16,0(sp)
   48220:	2821883a 	mov	r16,r5
   48224:	2940038f 	ldh	r5,14(r5)
   48228:	dfc00115 	stw	ra,4(sp)
   4822c:	004a00c0 	call	4a00c <_read_r>
   48230:	10000716 	blt	r2,zero,48250 <__sread+0x38>
   48234:	80c01417 	ldw	r3,80(r16)
   48238:	1887883a 	add	r3,r3,r2
   4823c:	80c01415 	stw	r3,80(r16)
   48240:	dfc00117 	ldw	ra,4(sp)
   48244:	dc000017 	ldw	r16,0(sp)
   48248:	dec00204 	addi	sp,sp,8
   4824c:	f800283a 	ret
   48250:	80c0030b 	ldhu	r3,12(r16)
   48254:	18fbffcc 	andi	r3,r3,61439
   48258:	80c0030d 	sth	r3,12(r16)
   4825c:	dfc00117 	ldw	ra,4(sp)
   48260:	dc000017 	ldw	r16,0(sp)
   48264:	dec00204 	addi	sp,sp,8
   48268:	f800283a 	ret

0004826c <__seofread>:
   4826c:	0005883a 	mov	r2,zero
   48270:	f800283a 	ret

00048274 <__swrite>:
   48274:	2880030b 	ldhu	r2,12(r5)
   48278:	defffb04 	addi	sp,sp,-20
   4827c:	dcc00315 	stw	r19,12(sp)
   48280:	dc800215 	stw	r18,8(sp)
   48284:	dc400115 	stw	r17,4(sp)
   48288:	dc000015 	stw	r16,0(sp)
   4828c:	dfc00415 	stw	ra,16(sp)
   48290:	10c0400c 	andi	r3,r2,256
   48294:	2821883a 	mov	r16,r5
   48298:	2023883a 	mov	r17,r4
   4829c:	3025883a 	mov	r18,r6
   482a0:	3827883a 	mov	r19,r7
   482a4:	18000526 	beq	r3,zero,482bc <__swrite+0x48>
   482a8:	2940038f 	ldh	r5,14(r5)
   482ac:	01c00084 	movi	r7,2
   482b0:	000d883a 	mov	r6,zero
   482b4:	0049fac0 	call	49fac <_lseek_r>
   482b8:	8080030b 	ldhu	r2,12(r16)
   482bc:	8140038f 	ldh	r5,14(r16)
   482c0:	10bbffcc 	andi	r2,r2,61439
   482c4:	980f883a 	mov	r7,r19
   482c8:	900d883a 	mov	r6,r18
   482cc:	8809883a 	mov	r4,r17
   482d0:	8080030d 	sth	r2,12(r16)
   482d4:	dfc00417 	ldw	ra,16(sp)
   482d8:	dcc00317 	ldw	r19,12(sp)
   482dc:	dc800217 	ldw	r18,8(sp)
   482e0:	dc400117 	ldw	r17,4(sp)
   482e4:	dc000017 	ldw	r16,0(sp)
   482e8:	dec00504 	addi	sp,sp,20
   482ec:	0049a781 	jmpi	49a78 <_write_r>

000482f0 <__sseek>:
   482f0:	defffe04 	addi	sp,sp,-8
   482f4:	dc000015 	stw	r16,0(sp)
   482f8:	2821883a 	mov	r16,r5
   482fc:	2940038f 	ldh	r5,14(r5)
   48300:	dfc00115 	stw	ra,4(sp)
   48304:	0049fac0 	call	49fac <_lseek_r>
   48308:	00ffffc4 	movi	r3,-1
   4830c:	10c00826 	beq	r2,r3,48330 <__sseek+0x40>
   48310:	80c0030b 	ldhu	r3,12(r16)
   48314:	80801415 	stw	r2,80(r16)
   48318:	18c40014 	ori	r3,r3,4096
   4831c:	80c0030d 	sth	r3,12(r16)
   48320:	dfc00117 	ldw	ra,4(sp)
   48324:	dc000017 	ldw	r16,0(sp)
   48328:	dec00204 	addi	sp,sp,8
   4832c:	f800283a 	ret
   48330:	80c0030b 	ldhu	r3,12(r16)
   48334:	18fbffcc 	andi	r3,r3,61439
   48338:	80c0030d 	sth	r3,12(r16)
   4833c:	dfc00117 	ldw	ra,4(sp)
   48340:	dc000017 	ldw	r16,0(sp)
   48344:	dec00204 	addi	sp,sp,8
   48348:	f800283a 	ret

0004834c <__sclose>:
   4834c:	2940038f 	ldh	r5,14(r5)
   48350:	0049ad81 	jmpi	49ad8 <_close_r>

00048354 <strcmp>:
   48354:	2144b03a 	or	r2,r4,r5
   48358:	108000cc 	andi	r2,r2,3
   4835c:	1000171e 	bne	r2,zero,483bc <strcmp+0x68>
   48360:	20800017 	ldw	r2,0(r4)
   48364:	28c00017 	ldw	r3,0(r5)
   48368:	10c0141e 	bne	r2,r3,483bc <strcmp+0x68>
   4836c:	027fbff4 	movhi	r9,65279
   48370:	4a7fbfc4 	addi	r9,r9,-257
   48374:	0086303a 	nor	r3,zero,r2
   48378:	02202074 	movhi	r8,32897
   4837c:	1245883a 	add	r2,r2,r9
   48380:	42202004 	addi	r8,r8,-32640
   48384:	10c4703a 	and	r2,r2,r3
   48388:	1204703a 	and	r2,r2,r8
   4838c:	10000226 	beq	r2,zero,48398 <strcmp+0x44>
   48390:	00002306 	br	48420 <strcmp+0xcc>
   48394:	1000221e 	bne	r2,zero,48420 <strcmp+0xcc>
   48398:	21000104 	addi	r4,r4,4
   4839c:	20c00017 	ldw	r3,0(r4)
   483a0:	29400104 	addi	r5,r5,4
   483a4:	29800017 	ldw	r6,0(r5)
   483a8:	1a4f883a 	add	r7,r3,r9
   483ac:	00c4303a 	nor	r2,zero,r3
   483b0:	3884703a 	and	r2,r7,r2
   483b4:	1204703a 	and	r2,r2,r8
   483b8:	19bff626 	beq	r3,r6,48394 <__alt_data_end+0xfffd6394>
   483bc:	20800003 	ldbu	r2,0(r4)
   483c0:	10c03fcc 	andi	r3,r2,255
   483c4:	18c0201c 	xori	r3,r3,128
   483c8:	18ffe004 	addi	r3,r3,-128
   483cc:	18000c26 	beq	r3,zero,48400 <strcmp+0xac>
   483d0:	29800007 	ldb	r6,0(r5)
   483d4:	19800326 	beq	r3,r6,483e4 <strcmp+0x90>
   483d8:	00001306 	br	48428 <strcmp+0xd4>
   483dc:	29800007 	ldb	r6,0(r5)
   483e0:	11800b1e 	bne	r2,r6,48410 <strcmp+0xbc>
   483e4:	21000044 	addi	r4,r4,1
   483e8:	20c00003 	ldbu	r3,0(r4)
   483ec:	29400044 	addi	r5,r5,1
   483f0:	18803fcc 	andi	r2,r3,255
   483f4:	1080201c 	xori	r2,r2,128
   483f8:	10bfe004 	addi	r2,r2,-128
   483fc:	103ff71e 	bne	r2,zero,483dc <__alt_data_end+0xfffd63dc>
   48400:	0007883a 	mov	r3,zero
   48404:	28800003 	ldbu	r2,0(r5)
   48408:	1885c83a 	sub	r2,r3,r2
   4840c:	f800283a 	ret
   48410:	28800003 	ldbu	r2,0(r5)
   48414:	18c03fcc 	andi	r3,r3,255
   48418:	1885c83a 	sub	r2,r3,r2
   4841c:	f800283a 	ret
   48420:	0005883a 	mov	r2,zero
   48424:	f800283a 	ret
   48428:	10c03fcc 	andi	r3,r2,255
   4842c:	003ff506 	br	48404 <__alt_data_end+0xfffd6404>

00048430 <__sprint_r.part.0>:
   48430:	28801917 	ldw	r2,100(r5)
   48434:	defff604 	addi	sp,sp,-40
   48438:	dd400515 	stw	r21,20(sp)
   4843c:	dfc00915 	stw	ra,36(sp)
   48440:	df000815 	stw	fp,32(sp)
   48444:	ddc00715 	stw	r23,28(sp)
   48448:	dd800615 	stw	r22,24(sp)
   4844c:	dd000415 	stw	r20,16(sp)
   48450:	dcc00315 	stw	r19,12(sp)
   48454:	dc800215 	stw	r18,8(sp)
   48458:	dc400115 	stw	r17,4(sp)
   4845c:	dc000015 	stw	r16,0(sp)
   48460:	1088000c 	andi	r2,r2,8192
   48464:	302b883a 	mov	r21,r6
   48468:	10002e26 	beq	r2,zero,48524 <__sprint_r.part.0+0xf4>
   4846c:	30800217 	ldw	r2,8(r6)
   48470:	35800017 	ldw	r22,0(r6)
   48474:	10002926 	beq	r2,zero,4851c <__sprint_r.part.0+0xec>
   48478:	2827883a 	mov	r19,r5
   4847c:	2029883a 	mov	r20,r4
   48480:	b5c00104 	addi	r23,r22,4
   48484:	04bfffc4 	movi	r18,-1
   48488:	bc400017 	ldw	r17,0(r23)
   4848c:	b4000017 	ldw	r16,0(r22)
   48490:	0039883a 	mov	fp,zero
   48494:	8822d0ba 	srli	r17,r17,2
   48498:	8800031e 	bne	r17,zero,484a8 <__sprint_r.part.0+0x78>
   4849c:	00001806 	br	48500 <__sprint_r.part.0+0xd0>
   484a0:	84000104 	addi	r16,r16,4
   484a4:	8f001526 	beq	r17,fp,484fc <__sprint_r.part.0+0xcc>
   484a8:	81400017 	ldw	r5,0(r16)
   484ac:	980d883a 	mov	r6,r19
   484b0:	a009883a 	mov	r4,r20
   484b4:	0049e580 	call	49e58 <_fputwc_r>
   484b8:	e7000044 	addi	fp,fp,1
   484bc:	14bff81e 	bne	r2,r18,484a0 <__alt_data_end+0xfffd64a0>
   484c0:	9005883a 	mov	r2,r18
   484c4:	a8000215 	stw	zero,8(r21)
   484c8:	a8000115 	stw	zero,4(r21)
   484cc:	dfc00917 	ldw	ra,36(sp)
   484d0:	df000817 	ldw	fp,32(sp)
   484d4:	ddc00717 	ldw	r23,28(sp)
   484d8:	dd800617 	ldw	r22,24(sp)
   484dc:	dd400517 	ldw	r21,20(sp)
   484e0:	dd000417 	ldw	r20,16(sp)
   484e4:	dcc00317 	ldw	r19,12(sp)
   484e8:	dc800217 	ldw	r18,8(sp)
   484ec:	dc400117 	ldw	r17,4(sp)
   484f0:	dc000017 	ldw	r16,0(sp)
   484f4:	dec00a04 	addi	sp,sp,40
   484f8:	f800283a 	ret
   484fc:	a8800217 	ldw	r2,8(r21)
   48500:	8c63883a 	add	r17,r17,r17
   48504:	8c63883a 	add	r17,r17,r17
   48508:	1445c83a 	sub	r2,r2,r17
   4850c:	a8800215 	stw	r2,8(r21)
   48510:	b5800204 	addi	r22,r22,8
   48514:	bdc00204 	addi	r23,r23,8
   48518:	103fdb1e 	bne	r2,zero,48488 <__alt_data_end+0xfffd6488>
   4851c:	0005883a 	mov	r2,zero
   48520:	003fe806 	br	484c4 <__alt_data_end+0xfffd64c4>
   48524:	00456580 	call	45658 <__sfvwrite_r>
   48528:	003fe606 	br	484c4 <__alt_data_end+0xfffd64c4>

0004852c <__sprint_r>:
   4852c:	30c00217 	ldw	r3,8(r6)
   48530:	18000126 	beq	r3,zero,48538 <__sprint_r+0xc>
   48534:	00484301 	jmpi	48430 <__sprint_r.part.0>
   48538:	30000115 	stw	zero,4(r6)
   4853c:	0005883a 	mov	r2,zero
   48540:	f800283a 	ret

00048544 <___vfiprintf_internal_r>:
   48544:	deffc904 	addi	sp,sp,-220
   48548:	df003515 	stw	fp,212(sp)
   4854c:	dd003115 	stw	r20,196(sp)
   48550:	dfc03615 	stw	ra,216(sp)
   48554:	ddc03415 	stw	r23,208(sp)
   48558:	dd803315 	stw	r22,204(sp)
   4855c:	dd403215 	stw	r21,200(sp)
   48560:	dcc03015 	stw	r19,192(sp)
   48564:	dc802f15 	stw	r18,188(sp)
   48568:	dc402e15 	stw	r17,184(sp)
   4856c:	dc002d15 	stw	r16,180(sp)
   48570:	d9002015 	stw	r4,128(sp)
   48574:	d9c02215 	stw	r7,136(sp)
   48578:	2829883a 	mov	r20,r5
   4857c:	3039883a 	mov	fp,r6
   48580:	20000226 	beq	r4,zero,4858c <___vfiprintf_internal_r+0x48>
   48584:	20800e17 	ldw	r2,56(r4)
   48588:	1000cf26 	beq	r2,zero,488c8 <___vfiprintf_internal_r+0x384>
   4858c:	a080030b 	ldhu	r2,12(r20)
   48590:	10c8000c 	andi	r3,r2,8192
   48594:	1800061e 	bne	r3,zero,485b0 <___vfiprintf_internal_r+0x6c>
   48598:	a1001917 	ldw	r4,100(r20)
   4859c:	00f7ffc4 	movi	r3,-8193
   485a0:	10880014 	ori	r2,r2,8192
   485a4:	20c6703a 	and	r3,r4,r3
   485a8:	a080030d 	sth	r2,12(r20)
   485ac:	a0c01915 	stw	r3,100(r20)
   485b0:	10c0020c 	andi	r3,r2,8
   485b4:	1800a926 	beq	r3,zero,4885c <___vfiprintf_internal_r+0x318>
   485b8:	a0c00417 	ldw	r3,16(r20)
   485bc:	1800a726 	beq	r3,zero,4885c <___vfiprintf_internal_r+0x318>
   485c0:	1080068c 	andi	r2,r2,26
   485c4:	00c00284 	movi	r3,10
   485c8:	10c0ac26 	beq	r2,r3,4887c <___vfiprintf_internal_r+0x338>
   485cc:	da801a04 	addi	r10,sp,104
   485d0:	da801e15 	stw	r10,120(sp)
   485d4:	d8801e17 	ldw	r2,120(sp)
   485d8:	da8019c4 	addi	r10,sp,103
   485dc:	05800174 	movhi	r22,5
   485e0:	05c00174 	movhi	r23,5
   485e4:	da801f15 	stw	r10,124(sp)
   485e8:	1295c83a 	sub	r10,r2,r10
   485ec:	b5802d04 	addi	r22,r22,180
   485f0:	bdc02904 	addi	r23,r23,164
   485f4:	dec01a15 	stw	sp,104(sp)
   485f8:	d8001c15 	stw	zero,112(sp)
   485fc:	d8001b15 	stw	zero,108(sp)
   48600:	d8002615 	stw	zero,152(sp)
   48604:	d8002315 	stw	zero,140(sp)
   48608:	da802715 	stw	r10,156(sp)
   4860c:	d811883a 	mov	r8,sp
   48610:	dd002115 	stw	r20,132(sp)
   48614:	e021883a 	mov	r16,fp
   48618:	80800007 	ldb	r2,0(r16)
   4861c:	1003ea26 	beq	r2,zero,495c8 <___vfiprintf_internal_r+0x1084>
   48620:	00c00944 	movi	r3,37
   48624:	8025883a 	mov	r18,r16
   48628:	10c0021e 	bne	r2,r3,48634 <___vfiprintf_internal_r+0xf0>
   4862c:	00001606 	br	48688 <___vfiprintf_internal_r+0x144>
   48630:	10c00326 	beq	r2,r3,48640 <___vfiprintf_internal_r+0xfc>
   48634:	94800044 	addi	r18,r18,1
   48638:	90800007 	ldb	r2,0(r18)
   4863c:	103ffc1e 	bne	r2,zero,48630 <__alt_data_end+0xfffd6630>
   48640:	9423c83a 	sub	r17,r18,r16
   48644:	88001026 	beq	r17,zero,48688 <___vfiprintf_internal_r+0x144>
   48648:	d8c01c17 	ldw	r3,112(sp)
   4864c:	d8801b17 	ldw	r2,108(sp)
   48650:	44000015 	stw	r16,0(r8)
   48654:	88c7883a 	add	r3,r17,r3
   48658:	10800044 	addi	r2,r2,1
   4865c:	44400115 	stw	r17,4(r8)
   48660:	d8c01c15 	stw	r3,112(sp)
   48664:	d8801b15 	stw	r2,108(sp)
   48668:	010001c4 	movi	r4,7
   4866c:	2080760e 	bge	r4,r2,48848 <___vfiprintf_internal_r+0x304>
   48670:	1803821e 	bne	r3,zero,4947c <___vfiprintf_internal_r+0xf38>
   48674:	da802317 	ldw	r10,140(sp)
   48678:	d8001b15 	stw	zero,108(sp)
   4867c:	d811883a 	mov	r8,sp
   48680:	5455883a 	add	r10,r10,r17
   48684:	da802315 	stw	r10,140(sp)
   48688:	90800007 	ldb	r2,0(r18)
   4868c:	10044626 	beq	r2,zero,497a8 <___vfiprintf_internal_r+0x1264>
   48690:	90c00047 	ldb	r3,1(r18)
   48694:	94000044 	addi	r16,r18,1
   48698:	d8001d85 	stb	zero,118(sp)
   4869c:	0009883a 	mov	r4,zero
   486a0:	000f883a 	mov	r7,zero
   486a4:	027fffc4 	movi	r9,-1
   486a8:	0023883a 	mov	r17,zero
   486ac:	0029883a 	mov	r20,zero
   486b0:	01401604 	movi	r5,88
   486b4:	01800244 	movi	r6,9
   486b8:	03400a84 	movi	r13,42
   486bc:	03001b04 	movi	r12,108
   486c0:	84000044 	addi	r16,r16,1
   486c4:	18bff804 	addi	r2,r3,-32
   486c8:	28827336 	bltu	r5,r2,49098 <___vfiprintf_internal_r+0xb54>
   486cc:	100490ba 	slli	r2,r2,2
   486d0:	02800174 	movhi	r10,5
   486d4:	52a1b904 	addi	r10,r10,-31004
   486d8:	1285883a 	add	r2,r2,r10
   486dc:	10800017 	ldw	r2,0(r2)
   486e0:	1000683a 	jmp	r2
   486e4:	00048dcc 	andi	zero,zero,4663
   486e8:	00049098 	cmpnei	zero,zero,4674
   486ec:	00049098 	cmpnei	zero,zero,4674
   486f0:	00048dec 	andhi	zero,zero,4663
   486f4:	00049098 	cmpnei	zero,zero,4674
   486f8:	00049098 	cmpnei	zero,zero,4674
   486fc:	00049098 	cmpnei	zero,zero,4674
   48700:	00049098 	cmpnei	zero,zero,4674
   48704:	00049098 	cmpnei	zero,zero,4674
   48708:	00049098 	cmpnei	zero,zero,4674
   4870c:	00048fd4 	movui	zero,4671
   48710:	00048ff0 	cmpltui	zero,zero,4671
   48714:	00049098 	cmpnei	zero,zero,4674
   48718:	000488d8 	cmpnei	zero,zero,4643
   4871c:	00049000 	call	4900 <__alt_mem_onchip_memory2-0x3b700>
   48720:	00049098 	cmpnei	zero,zero,4674
   48724:	00048df8 	rdprs	zero,zero,4663
   48728:	00048e04 	movi	zero,4664
   4872c:	00048e04 	movi	zero,4664
   48730:	00048e04 	movi	zero,4664
   48734:	00048e04 	movi	zero,4664
   48738:	00048e04 	movi	zero,4664
   4873c:	00048e04 	movi	zero,4664
   48740:	00048e04 	movi	zero,4664
   48744:	00048e04 	movi	zero,4664
   48748:	00048e04 	movi	zero,4664
   4874c:	00049098 	cmpnei	zero,zero,4674
   48750:	00049098 	cmpnei	zero,zero,4674
   48754:	00049098 	cmpnei	zero,zero,4674
   48758:	00049098 	cmpnei	zero,zero,4674
   4875c:	00049098 	cmpnei	zero,zero,4674
   48760:	00049098 	cmpnei	zero,zero,4674
   48764:	00049098 	cmpnei	zero,zero,4674
   48768:	00049098 	cmpnei	zero,zero,4674
   4876c:	00049098 	cmpnei	zero,zero,4674
   48770:	00049098 	cmpnei	zero,zero,4674
   48774:	00048e30 	cmpltui	zero,zero,4664
   48778:	00049098 	cmpnei	zero,zero,4674
   4877c:	00049098 	cmpnei	zero,zero,4674
   48780:	00049098 	cmpnei	zero,zero,4674
   48784:	00049098 	cmpnei	zero,zero,4674
   48788:	00049098 	cmpnei	zero,zero,4674
   4878c:	00049098 	cmpnei	zero,zero,4674
   48790:	00049098 	cmpnei	zero,zero,4674
   48794:	00049098 	cmpnei	zero,zero,4674
   48798:	00049098 	cmpnei	zero,zero,4674
   4879c:	00049098 	cmpnei	zero,zero,4674
   487a0:	00048e68 	cmpgeui	zero,zero,4665
   487a4:	00049098 	cmpnei	zero,zero,4674
   487a8:	00049098 	cmpnei	zero,zero,4674
   487ac:	00049098 	cmpnei	zero,zero,4674
   487b0:	00049098 	cmpnei	zero,zero,4674
   487b4:	00049098 	cmpnei	zero,zero,4674
   487b8:	00048ec0 	call	48ec <__alt_mem_onchip_memory2-0x3b714>
   487bc:	00049098 	cmpnei	zero,zero,4674
   487c0:	00049098 	cmpnei	zero,zero,4674
   487c4:	00048f30 	cmpltui	zero,zero,4668
   487c8:	00049098 	cmpnei	zero,zero,4674
   487cc:	00049098 	cmpnei	zero,zero,4674
   487d0:	00049098 	cmpnei	zero,zero,4674
   487d4:	00049098 	cmpnei	zero,zero,4674
   487d8:	00049098 	cmpnei	zero,zero,4674
   487dc:	00049098 	cmpnei	zero,zero,4674
   487e0:	00049098 	cmpnei	zero,zero,4674
   487e4:	00049098 	cmpnei	zero,zero,4674
   487e8:	00049098 	cmpnei	zero,zero,4674
   487ec:	00049098 	cmpnei	zero,zero,4674
   487f0:	00048cdc 	xori	zero,zero,4659
   487f4:	00048d08 	cmpgei	zero,zero,4660
   487f8:	00049098 	cmpnei	zero,zero,4674
   487fc:	00049098 	cmpnei	zero,zero,4674
   48800:	00049098 	cmpnei	zero,zero,4674
   48804:	00049040 	call	4904 <__alt_mem_onchip_memory2-0x3b6fc>
   48808:	00048d08 	cmpgei	zero,zero,4660
   4880c:	00049098 	cmpnei	zero,zero,4674
   48810:	00049098 	cmpnei	zero,zero,4674
   48814:	00048b9c 	xori	zero,zero,4654
   48818:	00049098 	cmpnei	zero,zero,4674
   4881c:	00048bac 	andhi	zero,zero,4654
   48820:	00048be8 	cmpgeui	zero,zero,4655
   48824:	000488e4 	muli	zero,zero,4643
   48828:	00048b90 	cmplti	zero,zero,4654
   4882c:	00049098 	cmpnei	zero,zero,4674
   48830:	00048f6c 	andhi	zero,zero,4669
   48834:	00049098 	cmpnei	zero,zero,4674
   48838:	00048fc4 	movi	zero,4671
   4883c:	00049098 	cmpnei	zero,zero,4674
   48840:	00049098 	cmpnei	zero,zero,4674
   48844:	00048c88 	cmpgei	zero,zero,4658
   48848:	42000204 	addi	r8,r8,8
   4884c:	da802317 	ldw	r10,140(sp)
   48850:	5455883a 	add	r10,r10,r17
   48854:	da802315 	stw	r10,140(sp)
   48858:	003f8b06 	br	48688 <__alt_data_end+0xfffd6688>
   4885c:	d9002017 	ldw	r4,128(sp)
   48860:	a00b883a 	mov	r5,r20
   48864:	00430800 	call	43080 <__swsetup_r>
   48868:	1003b11e 	bne	r2,zero,49730 <___vfiprintf_internal_r+0x11ec>
   4886c:	a080030b 	ldhu	r2,12(r20)
   48870:	00c00284 	movi	r3,10
   48874:	1080068c 	andi	r2,r2,26
   48878:	10ff541e 	bne	r2,r3,485cc <__alt_data_end+0xfffd65cc>
   4887c:	a080038f 	ldh	r2,14(r20)
   48880:	103f5216 	blt	r2,zero,485cc <__alt_data_end+0xfffd65cc>
   48884:	d9c02217 	ldw	r7,136(sp)
   48888:	d9002017 	ldw	r4,128(sp)
   4888c:	e00d883a 	mov	r6,fp
   48890:	a00b883a 	mov	r5,r20
   48894:	00499bc0 	call	499bc <__sbprintf>
   48898:	dfc03617 	ldw	ra,216(sp)
   4889c:	df003517 	ldw	fp,212(sp)
   488a0:	ddc03417 	ldw	r23,208(sp)
   488a4:	dd803317 	ldw	r22,204(sp)
   488a8:	dd403217 	ldw	r21,200(sp)
   488ac:	dd003117 	ldw	r20,196(sp)
   488b0:	dcc03017 	ldw	r19,192(sp)
   488b4:	dc802f17 	ldw	r18,188(sp)
   488b8:	dc402e17 	ldw	r17,184(sp)
   488bc:	dc002d17 	ldw	r16,180(sp)
   488c0:	dec03704 	addi	sp,sp,220
   488c4:	f800283a 	ret
   488c8:	00451d40 	call	451d4 <__sinit>
   488cc:	003f2f06 	br	4858c <__alt_data_end+0xfffd658c>
   488d0:	0463c83a 	sub	r17,zero,r17
   488d4:	d8802215 	stw	r2,136(sp)
   488d8:	a5000114 	ori	r20,r20,4
   488dc:	80c00007 	ldb	r3,0(r16)
   488e0:	003f7706 	br	486c0 <__alt_data_end+0xfffd66c0>
   488e4:	00800c04 	movi	r2,48
   488e8:	da802217 	ldw	r10,136(sp)
   488ec:	d8801d05 	stb	r2,116(sp)
   488f0:	00801e04 	movi	r2,120
   488f4:	d8801d45 	stb	r2,117(sp)
   488f8:	d8001d85 	stb	zero,118(sp)
   488fc:	50c00104 	addi	r3,r10,4
   48900:	54800017 	ldw	r18,0(r10)
   48904:	0027883a 	mov	r19,zero
   48908:	a0800094 	ori	r2,r20,2
   4890c:	48030b16 	blt	r9,zero,4953c <___vfiprintf_internal_r+0xff8>
   48910:	00bfdfc4 	movi	r2,-129
   48914:	a096703a 	and	r11,r20,r2
   48918:	d8c02215 	stw	r3,136(sp)
   4891c:	5d000094 	ori	r20,r11,2
   48920:	90032b1e 	bne	r18,zero,495d0 <___vfiprintf_internal_r+0x108c>
   48924:	00800174 	movhi	r2,5
   48928:	10bfc904 	addi	r2,r2,-220
   4892c:	d8802615 	stw	r2,152(sp)
   48930:	0039883a 	mov	fp,zero
   48934:	48017b1e 	bne	r9,zero,48f24 <___vfiprintf_internal_r+0x9e0>
   48938:	0013883a 	mov	r9,zero
   4893c:	0027883a 	mov	r19,zero
   48940:	dd401a04 	addi	r21,sp,104
   48944:	4825883a 	mov	r18,r9
   48948:	4cc0010e 	bge	r9,r19,48950 <___vfiprintf_internal_r+0x40c>
   4894c:	9825883a 	mov	r18,r19
   48950:	e7003fcc 	andi	fp,fp,255
   48954:	e700201c 	xori	fp,fp,128
   48958:	e73fe004 	addi	fp,fp,-128
   4895c:	e0000126 	beq	fp,zero,48964 <___vfiprintf_internal_r+0x420>
   48960:	94800044 	addi	r18,r18,1
   48964:	a380008c 	andi	r14,r20,2
   48968:	70000126 	beq	r14,zero,48970 <___vfiprintf_internal_r+0x42c>
   4896c:	94800084 	addi	r18,r18,2
   48970:	a700210c 	andi	fp,r20,132
   48974:	e001df1e 	bne	fp,zero,490f4 <___vfiprintf_internal_r+0xbb0>
   48978:	8c87c83a 	sub	r3,r17,r18
   4897c:	00c1dd0e 	bge	zero,r3,490f4 <___vfiprintf_internal_r+0xbb0>
   48980:	01c00404 	movi	r7,16
   48984:	d8801c17 	ldw	r2,112(sp)
   48988:	38c3ad0e 	bge	r7,r3,49840 <___vfiprintf_internal_r+0x12fc>
   4898c:	02800174 	movhi	r10,5
   48990:	52802d04 	addi	r10,r10,180
   48994:	dc002915 	stw	r16,164(sp)
   48998:	d9801b17 	ldw	r6,108(sp)
   4899c:	da802415 	stw	r10,144(sp)
   489a0:	03c001c4 	movi	r15,7
   489a4:	da402515 	stw	r9,148(sp)
   489a8:	db802815 	stw	r14,160(sp)
   489ac:	1821883a 	mov	r16,r3
   489b0:	00000506 	br	489c8 <___vfiprintf_internal_r+0x484>
   489b4:	31400084 	addi	r5,r6,2
   489b8:	42000204 	addi	r8,r8,8
   489bc:	200d883a 	mov	r6,r4
   489c0:	843ffc04 	addi	r16,r16,-16
   489c4:	3c000d0e 	bge	r7,r16,489fc <___vfiprintf_internal_r+0x4b8>
   489c8:	10800404 	addi	r2,r2,16
   489cc:	31000044 	addi	r4,r6,1
   489d0:	45800015 	stw	r22,0(r8)
   489d4:	41c00115 	stw	r7,4(r8)
   489d8:	d8801c15 	stw	r2,112(sp)
   489dc:	d9001b15 	stw	r4,108(sp)
   489e0:	793ff40e 	bge	r15,r4,489b4 <__alt_data_end+0xfffd69b4>
   489e4:	1001b51e 	bne	r2,zero,490bc <___vfiprintf_internal_r+0xb78>
   489e8:	843ffc04 	addi	r16,r16,-16
   489ec:	000d883a 	mov	r6,zero
   489f0:	01400044 	movi	r5,1
   489f4:	d811883a 	mov	r8,sp
   489f8:	3c3ff316 	blt	r7,r16,489c8 <__alt_data_end+0xfffd69c8>
   489fc:	8007883a 	mov	r3,r16
   48a00:	da402517 	ldw	r9,148(sp)
   48a04:	db802817 	ldw	r14,160(sp)
   48a08:	dc002917 	ldw	r16,164(sp)
   48a0c:	da802417 	ldw	r10,144(sp)
   48a10:	1885883a 	add	r2,r3,r2
   48a14:	40c00115 	stw	r3,4(r8)
   48a18:	42800015 	stw	r10,0(r8)
   48a1c:	d8801c15 	stw	r2,112(sp)
   48a20:	d9401b15 	stw	r5,108(sp)
   48a24:	00c001c4 	movi	r3,7
   48a28:	19426016 	blt	r3,r5,493ac <___vfiprintf_internal_r+0xe68>
   48a2c:	d8c01d87 	ldb	r3,118(sp)
   48a30:	42000204 	addi	r8,r8,8
   48a34:	29000044 	addi	r4,r5,1
   48a38:	1801b31e 	bne	r3,zero,49108 <___vfiprintf_internal_r+0xbc4>
   48a3c:	7001c026 	beq	r14,zero,49140 <___vfiprintf_internal_r+0xbfc>
   48a40:	d8c01d04 	addi	r3,sp,116
   48a44:	10800084 	addi	r2,r2,2
   48a48:	40c00015 	stw	r3,0(r8)
   48a4c:	00c00084 	movi	r3,2
   48a50:	40c00115 	stw	r3,4(r8)
   48a54:	d8801c15 	stw	r2,112(sp)
   48a58:	d9001b15 	stw	r4,108(sp)
   48a5c:	00c001c4 	movi	r3,7
   48a60:	1902650e 	bge	r3,r4,493f8 <___vfiprintf_internal_r+0xeb4>
   48a64:	10029a1e 	bne	r2,zero,494d0 <___vfiprintf_internal_r+0xf8c>
   48a68:	00c02004 	movi	r3,128
   48a6c:	01000044 	movi	r4,1
   48a70:	000b883a 	mov	r5,zero
   48a74:	d811883a 	mov	r8,sp
   48a78:	e0c1b31e 	bne	fp,r3,49148 <___vfiprintf_internal_r+0xc04>
   48a7c:	8cb9c83a 	sub	fp,r17,r18
   48a80:	0701b10e 	bge	zero,fp,49148 <___vfiprintf_internal_r+0xc04>
   48a84:	01c00404 	movi	r7,16
   48a88:	3f03890e 	bge	r7,fp,498b0 <___vfiprintf_internal_r+0x136c>
   48a8c:	00c00174 	movhi	r3,5
   48a90:	18c02904 	addi	r3,r3,164
   48a94:	d8c02415 	stw	r3,144(sp)
   48a98:	8007883a 	mov	r3,r16
   48a9c:	034001c4 	movi	r13,7
   48aa0:	e021883a 	mov	r16,fp
   48aa4:	da402515 	stw	r9,148(sp)
   48aa8:	1839883a 	mov	fp,r3
   48aac:	00000506 	br	48ac4 <___vfiprintf_internal_r+0x580>
   48ab0:	29800084 	addi	r6,r5,2
   48ab4:	42000204 	addi	r8,r8,8
   48ab8:	180b883a 	mov	r5,r3
   48abc:	843ffc04 	addi	r16,r16,-16
   48ac0:	3c000d0e 	bge	r7,r16,48af8 <___vfiprintf_internal_r+0x5b4>
   48ac4:	10800404 	addi	r2,r2,16
   48ac8:	28c00044 	addi	r3,r5,1
   48acc:	45c00015 	stw	r23,0(r8)
   48ad0:	41c00115 	stw	r7,4(r8)
   48ad4:	d8801c15 	stw	r2,112(sp)
   48ad8:	d8c01b15 	stw	r3,108(sp)
   48adc:	68fff40e 	bge	r13,r3,48ab0 <__alt_data_end+0xfffd6ab0>
   48ae0:	1002241e 	bne	r2,zero,49374 <___vfiprintf_internal_r+0xe30>
   48ae4:	843ffc04 	addi	r16,r16,-16
   48ae8:	01800044 	movi	r6,1
   48aec:	000b883a 	mov	r5,zero
   48af0:	d811883a 	mov	r8,sp
   48af4:	3c3ff316 	blt	r7,r16,48ac4 <__alt_data_end+0xfffd6ac4>
   48af8:	da402517 	ldw	r9,148(sp)
   48afc:	e007883a 	mov	r3,fp
   48b00:	8039883a 	mov	fp,r16
   48b04:	1821883a 	mov	r16,r3
   48b08:	d8c02417 	ldw	r3,144(sp)
   48b0c:	1705883a 	add	r2,r2,fp
   48b10:	47000115 	stw	fp,4(r8)
   48b14:	40c00015 	stw	r3,0(r8)
   48b18:	d8801c15 	stw	r2,112(sp)
   48b1c:	d9801b15 	stw	r6,108(sp)
   48b20:	00c001c4 	movi	r3,7
   48b24:	19827616 	blt	r3,r6,49500 <___vfiprintf_internal_r+0xfbc>
   48b28:	4cf9c83a 	sub	fp,r9,r19
   48b2c:	42000204 	addi	r8,r8,8
   48b30:	31000044 	addi	r4,r6,1
   48b34:	300b883a 	mov	r5,r6
   48b38:	07018516 	blt	zero,fp,49150 <___vfiprintf_internal_r+0xc0c>
   48b3c:	9885883a 	add	r2,r19,r2
   48b40:	45400015 	stw	r21,0(r8)
   48b44:	44c00115 	stw	r19,4(r8)
   48b48:	d8801c15 	stw	r2,112(sp)
   48b4c:	d9001b15 	stw	r4,108(sp)
   48b50:	00c001c4 	movi	r3,7
   48b54:	1901dd0e 	bge	r3,r4,492cc <___vfiprintf_internal_r+0xd88>
   48b58:	1002401e 	bne	r2,zero,4945c <___vfiprintf_internal_r+0xf18>
   48b5c:	d8001b15 	stw	zero,108(sp)
   48b60:	a2c0010c 	andi	r11,r20,4
   48b64:	58000226 	beq	r11,zero,48b70 <___vfiprintf_internal_r+0x62c>
   48b68:	8ca7c83a 	sub	r19,r17,r18
   48b6c:	04c2f216 	blt	zero,r19,49738 <___vfiprintf_internal_r+0x11f4>
   48b70:	8c80010e 	bge	r17,r18,48b78 <___vfiprintf_internal_r+0x634>
   48b74:	9023883a 	mov	r17,r18
   48b78:	da802317 	ldw	r10,140(sp)
   48b7c:	5455883a 	add	r10,r10,r17
   48b80:	da802315 	stw	r10,140(sp)
   48b84:	d8001b15 	stw	zero,108(sp)
   48b88:	d811883a 	mov	r8,sp
   48b8c:	003ea206 	br	48618 <__alt_data_end+0xfffd6618>
   48b90:	a5000814 	ori	r20,r20,32
   48b94:	80c00007 	ldb	r3,0(r16)
   48b98:	003ec906 	br	486c0 <__alt_data_end+0xfffd66c0>
   48b9c:	80c00007 	ldb	r3,0(r16)
   48ba0:	1b030926 	beq	r3,r12,497c8 <___vfiprintf_internal_r+0x1284>
   48ba4:	a5000414 	ori	r20,r20,16
   48ba8:	003ec506 	br	486c0 <__alt_data_end+0xfffd66c0>
   48bac:	21003fcc 	andi	r4,r4,255
   48bb0:	20035e1e 	bne	r4,zero,4992c <___vfiprintf_internal_r+0x13e8>
   48bb4:	a080080c 	andi	r2,r20,32
   48bb8:	1002a526 	beq	r2,zero,49650 <___vfiprintf_internal_r+0x110c>
   48bbc:	da802217 	ldw	r10,136(sp)
   48bc0:	50800017 	ldw	r2,0(r10)
   48bc4:	da802317 	ldw	r10,140(sp)
   48bc8:	5007d7fa 	srai	r3,r10,31
   48bcc:	da802217 	ldw	r10,136(sp)
   48bd0:	10c00115 	stw	r3,4(r2)
   48bd4:	52800104 	addi	r10,r10,4
   48bd8:	da802215 	stw	r10,136(sp)
   48bdc:	da802317 	ldw	r10,140(sp)
   48be0:	12800015 	stw	r10,0(r2)
   48be4:	003e8c06 	br	48618 <__alt_data_end+0xfffd6618>
   48be8:	21003fcc 	andi	r4,r4,255
   48bec:	2003511e 	bne	r4,zero,49934 <___vfiprintf_internal_r+0x13f0>
   48bf0:	a080080c 	andi	r2,r20,32
   48bf4:	1000a126 	beq	r2,zero,48e7c <___vfiprintf_internal_r+0x938>
   48bf8:	da802217 	ldw	r10,136(sp)
   48bfc:	d8001d85 	stb	zero,118(sp)
   48c00:	50800204 	addi	r2,r10,8
   48c04:	54800017 	ldw	r18,0(r10)
   48c08:	54c00117 	ldw	r19,4(r10)
   48c0c:	4802b416 	blt	r9,zero,496e0 <___vfiprintf_internal_r+0x119c>
   48c10:	013fdfc4 	movi	r4,-129
   48c14:	94c6b03a 	or	r3,r18,r19
   48c18:	d8802215 	stw	r2,136(sp)
   48c1c:	a128703a 	and	r20,r20,r4
   48c20:	1800a226 	beq	r3,zero,48eac <___vfiprintf_internal_r+0x968>
   48c24:	0039883a 	mov	fp,zero
   48c28:	dd401a04 	addi	r21,sp,104
   48c2c:	9006d0fa 	srli	r3,r18,3
   48c30:	9808977a 	slli	r4,r19,29
   48c34:	9826d0fa 	srli	r19,r19,3
   48c38:	948001cc 	andi	r18,r18,7
   48c3c:	90800c04 	addi	r2,r18,48
   48c40:	ad7fffc4 	addi	r21,r21,-1
   48c44:	20e4b03a 	or	r18,r4,r3
   48c48:	a8800005 	stb	r2,0(r21)
   48c4c:	94c6b03a 	or	r3,r18,r19
   48c50:	183ff61e 	bne	r3,zero,48c2c <__alt_data_end+0xfffd6c2c>
   48c54:	a0c0004c 	andi	r3,r20,1
   48c58:	18005926 	beq	r3,zero,48dc0 <___vfiprintf_internal_r+0x87c>
   48c5c:	10803fcc 	andi	r2,r2,255
   48c60:	1080201c 	xori	r2,r2,128
   48c64:	10bfe004 	addi	r2,r2,-128
   48c68:	00c00c04 	movi	r3,48
   48c6c:	10c05426 	beq	r2,r3,48dc0 <___vfiprintf_internal_r+0x87c>
   48c70:	da801e17 	ldw	r10,120(sp)
   48c74:	a8bfffc4 	addi	r2,r21,-1
   48c78:	a8ffffc5 	stb	r3,-1(r21)
   48c7c:	50a7c83a 	sub	r19,r10,r2
   48c80:	102b883a 	mov	r21,r2
   48c84:	003f2f06 	br	48944 <__alt_data_end+0xfffd6944>
   48c88:	21003fcc 	andi	r4,r4,255
   48c8c:	2003421e 	bne	r4,zero,49998 <___vfiprintf_internal_r+0x1454>
   48c90:	00800174 	movhi	r2,5
   48c94:	10bfc904 	addi	r2,r2,-220
   48c98:	d8802615 	stw	r2,152(sp)
   48c9c:	a080080c 	andi	r2,r20,32
   48ca0:	1000aa26 	beq	r2,zero,48f4c <___vfiprintf_internal_r+0xa08>
   48ca4:	da802217 	ldw	r10,136(sp)
   48ca8:	54800017 	ldw	r18,0(r10)
   48cac:	54c00117 	ldw	r19,4(r10)
   48cb0:	52800204 	addi	r10,r10,8
   48cb4:	da802215 	stw	r10,136(sp)
   48cb8:	a080004c 	andi	r2,r20,1
   48cbc:	1001d226 	beq	r2,zero,49408 <___vfiprintf_internal_r+0xec4>
   48cc0:	94c4b03a 	or	r2,r18,r19
   48cc4:	1002351e 	bne	r2,zero,4959c <___vfiprintf_internal_r+0x1058>
   48cc8:	d8001d85 	stb	zero,118(sp)
   48ccc:	48022216 	blt	r9,zero,49558 <___vfiprintf_internal_r+0x1014>
   48cd0:	00bfdfc4 	movi	r2,-129
   48cd4:	a0a8703a 	and	r20,r20,r2
   48cd8:	003f1506 	br	48930 <__alt_data_end+0xfffd6930>
   48cdc:	da802217 	ldw	r10,136(sp)
   48ce0:	04800044 	movi	r18,1
   48ce4:	d8001d85 	stb	zero,118(sp)
   48ce8:	50800017 	ldw	r2,0(r10)
   48cec:	52800104 	addi	r10,r10,4
   48cf0:	da802215 	stw	r10,136(sp)
   48cf4:	d8801005 	stb	r2,64(sp)
   48cf8:	9027883a 	mov	r19,r18
   48cfc:	dd401004 	addi	r21,sp,64
   48d00:	0013883a 	mov	r9,zero
   48d04:	003f1706 	br	48964 <__alt_data_end+0xfffd6964>
   48d08:	21003fcc 	andi	r4,r4,255
   48d0c:	2003201e 	bne	r4,zero,49990 <___vfiprintf_internal_r+0x144c>
   48d10:	a080080c 	andi	r2,r20,32
   48d14:	10004b26 	beq	r2,zero,48e44 <___vfiprintf_internal_r+0x900>
   48d18:	da802217 	ldw	r10,136(sp)
   48d1c:	50800117 	ldw	r2,4(r10)
   48d20:	54800017 	ldw	r18,0(r10)
   48d24:	52800204 	addi	r10,r10,8
   48d28:	da802215 	stw	r10,136(sp)
   48d2c:	1027883a 	mov	r19,r2
   48d30:	10022c16 	blt	r2,zero,495e4 <___vfiprintf_internal_r+0x10a0>
   48d34:	df001d83 	ldbu	fp,118(sp)
   48d38:	48007216 	blt	r9,zero,48f04 <___vfiprintf_internal_r+0x9c0>
   48d3c:	00ffdfc4 	movi	r3,-129
   48d40:	94c4b03a 	or	r2,r18,r19
   48d44:	a0e8703a 	and	r20,r20,r3
   48d48:	1000cc26 	beq	r2,zero,4907c <___vfiprintf_internal_r+0xb38>
   48d4c:	98021026 	beq	r19,zero,49590 <___vfiprintf_internal_r+0x104c>
   48d50:	dc402415 	stw	r17,144(sp)
   48d54:	dc002515 	stw	r16,148(sp)
   48d58:	9823883a 	mov	r17,r19
   48d5c:	9021883a 	mov	r16,r18
   48d60:	dd401a04 	addi	r21,sp,104
   48d64:	4825883a 	mov	r18,r9
   48d68:	4027883a 	mov	r19,r8
   48d6c:	8009883a 	mov	r4,r16
   48d70:	880b883a 	mov	r5,r17
   48d74:	01800284 	movi	r6,10
   48d78:	000f883a 	mov	r7,zero
   48d7c:	004a9240 	call	4a924 <__umoddi3>
   48d80:	10800c04 	addi	r2,r2,48
   48d84:	ad7fffc4 	addi	r21,r21,-1
   48d88:	8009883a 	mov	r4,r16
   48d8c:	880b883a 	mov	r5,r17
   48d90:	a8800005 	stb	r2,0(r21)
   48d94:	01800284 	movi	r6,10
   48d98:	000f883a 	mov	r7,zero
   48d9c:	004a3ac0 	call	4a3ac <__udivdi3>
   48da0:	1021883a 	mov	r16,r2
   48da4:	10c4b03a 	or	r2,r2,r3
   48da8:	1823883a 	mov	r17,r3
   48dac:	103fef1e 	bne	r2,zero,48d6c <__alt_data_end+0xfffd6d6c>
   48db0:	dc402417 	ldw	r17,144(sp)
   48db4:	dc002517 	ldw	r16,148(sp)
   48db8:	9013883a 	mov	r9,r18
   48dbc:	9811883a 	mov	r8,r19
   48dc0:	da801e17 	ldw	r10,120(sp)
   48dc4:	5567c83a 	sub	r19,r10,r21
   48dc8:	003ede06 	br	48944 <__alt_data_end+0xfffd6944>
   48dcc:	38803fcc 	andi	r2,r7,255
   48dd0:	1080201c 	xori	r2,r2,128
   48dd4:	10bfe004 	addi	r2,r2,-128
   48dd8:	1002371e 	bne	r2,zero,496b8 <___vfiprintf_internal_r+0x1174>
   48ddc:	01000044 	movi	r4,1
   48de0:	01c00804 	movi	r7,32
   48de4:	80c00007 	ldb	r3,0(r16)
   48de8:	003e3506 	br	486c0 <__alt_data_end+0xfffd66c0>
   48dec:	a5000054 	ori	r20,r20,1
   48df0:	80c00007 	ldb	r3,0(r16)
   48df4:	003e3206 	br	486c0 <__alt_data_end+0xfffd66c0>
   48df8:	a5002014 	ori	r20,r20,128
   48dfc:	80c00007 	ldb	r3,0(r16)
   48e00:	003e2f06 	br	486c0 <__alt_data_end+0xfffd66c0>
   48e04:	8015883a 	mov	r10,r16
   48e08:	0023883a 	mov	r17,zero
   48e0c:	18bff404 	addi	r2,r3,-48
   48e10:	50c00007 	ldb	r3,0(r10)
   48e14:	8c4002a4 	muli	r17,r17,10
   48e18:	84000044 	addi	r16,r16,1
   48e1c:	8015883a 	mov	r10,r16
   48e20:	1463883a 	add	r17,r2,r17
   48e24:	18bff404 	addi	r2,r3,-48
   48e28:	30bff92e 	bgeu	r6,r2,48e10 <__alt_data_end+0xfffd6e10>
   48e2c:	003e2506 	br	486c4 <__alt_data_end+0xfffd66c4>
   48e30:	21003fcc 	andi	r4,r4,255
   48e34:	2002d41e 	bne	r4,zero,49988 <___vfiprintf_internal_r+0x1444>
   48e38:	a5000414 	ori	r20,r20,16
   48e3c:	a080080c 	andi	r2,r20,32
   48e40:	103fb51e 	bne	r2,zero,48d18 <__alt_data_end+0xfffd6d18>
   48e44:	a080040c 	andi	r2,r20,16
   48e48:	1001f826 	beq	r2,zero,4962c <___vfiprintf_internal_r+0x10e8>
   48e4c:	da802217 	ldw	r10,136(sp)
   48e50:	54800017 	ldw	r18,0(r10)
   48e54:	52800104 	addi	r10,r10,4
   48e58:	da802215 	stw	r10,136(sp)
   48e5c:	9027d7fa 	srai	r19,r18,31
   48e60:	9805883a 	mov	r2,r19
   48e64:	003fb206 	br	48d30 <__alt_data_end+0xfffd6d30>
   48e68:	21003fcc 	andi	r4,r4,255
   48e6c:	2002c41e 	bne	r4,zero,49980 <___vfiprintf_internal_r+0x143c>
   48e70:	a5000414 	ori	r20,r20,16
   48e74:	a080080c 	andi	r2,r20,32
   48e78:	103f5f1e 	bne	r2,zero,48bf8 <__alt_data_end+0xfffd6bf8>
   48e7c:	a080040c 	andi	r2,r20,16
   48e80:	10020f26 	beq	r2,zero,496c0 <___vfiprintf_internal_r+0x117c>
   48e84:	da802217 	ldw	r10,136(sp)
   48e88:	d8001d85 	stb	zero,118(sp)
   48e8c:	0027883a 	mov	r19,zero
   48e90:	50800104 	addi	r2,r10,4
   48e94:	54800017 	ldw	r18,0(r10)
   48e98:	48021116 	blt	r9,zero,496e0 <___vfiprintf_internal_r+0x119c>
   48e9c:	00ffdfc4 	movi	r3,-129
   48ea0:	d8802215 	stw	r2,136(sp)
   48ea4:	a0e8703a 	and	r20,r20,r3
   48ea8:	903f5e1e 	bne	r18,zero,48c24 <__alt_data_end+0xfffd6c24>
   48eac:	0039883a 	mov	fp,zero
   48eb0:	4802a626 	beq	r9,zero,4994c <___vfiprintf_internal_r+0x1408>
   48eb4:	0025883a 	mov	r18,zero
   48eb8:	0027883a 	mov	r19,zero
   48ebc:	003f5a06 	br	48c28 <__alt_data_end+0xfffd6c28>
   48ec0:	21003fcc 	andi	r4,r4,255
   48ec4:	20029f1e 	bne	r4,zero,49944 <___vfiprintf_internal_r+0x1400>
   48ec8:	a5000414 	ori	r20,r20,16
   48ecc:	a080080c 	andi	r2,r20,32
   48ed0:	10005e1e 	bne	r2,zero,4904c <___vfiprintf_internal_r+0xb08>
   48ed4:	a080040c 	andi	r2,r20,16
   48ed8:	1001a21e 	bne	r2,zero,49564 <___vfiprintf_internal_r+0x1020>
   48edc:	a080100c 	andi	r2,r20,64
   48ee0:	d8001d85 	stb	zero,118(sp)
   48ee4:	da802217 	ldw	r10,136(sp)
   48ee8:	1002231e 	bne	r2,zero,49778 <___vfiprintf_internal_r+0x1234>
   48eec:	50800104 	addi	r2,r10,4
   48ef0:	54800017 	ldw	r18,0(r10)
   48ef4:	0027883a 	mov	r19,zero
   48ef8:	4801a00e 	bge	r9,zero,4957c <___vfiprintf_internal_r+0x1038>
   48efc:	d8802215 	stw	r2,136(sp)
   48f00:	0039883a 	mov	fp,zero
   48f04:	94c4b03a 	or	r2,r18,r19
   48f08:	103f901e 	bne	r2,zero,48d4c <__alt_data_end+0xfffd6d4c>
   48f0c:	00800044 	movi	r2,1
   48f10:	10803fcc 	andi	r2,r2,255
   48f14:	00c00044 	movi	r3,1
   48f18:	10c05926 	beq	r2,r3,49080 <___vfiprintf_internal_r+0xb3c>
   48f1c:	00c00084 	movi	r3,2
   48f20:	10ffe41e 	bne	r2,r3,48eb4 <__alt_data_end+0xfffd6eb4>
   48f24:	0025883a 	mov	r18,zero
   48f28:	0027883a 	mov	r19,zero
   48f2c:	00013d06 	br	49424 <___vfiprintf_internal_r+0xee0>
   48f30:	21003fcc 	andi	r4,r4,255
   48f34:	2002811e 	bne	r4,zero,4993c <___vfiprintf_internal_r+0x13f8>
   48f38:	00800174 	movhi	r2,5
   48f3c:	10bfc404 	addi	r2,r2,-240
   48f40:	d8802615 	stw	r2,152(sp)
   48f44:	a080080c 	andi	r2,r20,32
   48f48:	103f561e 	bne	r2,zero,48ca4 <__alt_data_end+0xfffd6ca4>
   48f4c:	a080040c 	andi	r2,r20,16
   48f50:	1001d126 	beq	r2,zero,49698 <___vfiprintf_internal_r+0x1154>
   48f54:	da802217 	ldw	r10,136(sp)
   48f58:	0027883a 	mov	r19,zero
   48f5c:	54800017 	ldw	r18,0(r10)
   48f60:	52800104 	addi	r10,r10,4
   48f64:	da802215 	stw	r10,136(sp)
   48f68:	003f5306 	br	48cb8 <__alt_data_end+0xfffd6cb8>
   48f6c:	da802217 	ldw	r10,136(sp)
   48f70:	d8001d85 	stb	zero,118(sp)
   48f74:	55400017 	ldw	r21,0(r10)
   48f78:	50c00104 	addi	r3,r10,4
   48f7c:	a8024226 	beq	r21,zero,49888 <___vfiprintf_internal_r+0x1344>
   48f80:	48021816 	blt	r9,zero,497e4 <___vfiprintf_internal_r+0x12a0>
   48f84:	480d883a 	mov	r6,r9
   48f88:	000b883a 	mov	r5,zero
   48f8c:	a809883a 	mov	r4,r21
   48f90:	d8c02a15 	stw	r3,168(sp)
   48f94:	da002b15 	stw	r8,172(sp)
   48f98:	da402c15 	stw	r9,176(sp)
   48f9c:	00467400 	call	46740 <memchr>
   48fa0:	d8c02a17 	ldw	r3,168(sp)
   48fa4:	da002b17 	ldw	r8,172(sp)
   48fa8:	da402c17 	ldw	r9,176(sp)
   48fac:	10024826 	beq	r2,zero,498d0 <___vfiprintf_internal_r+0x138c>
   48fb0:	1567c83a 	sub	r19,r2,r21
   48fb4:	df001d83 	ldbu	fp,118(sp)
   48fb8:	d8c02215 	stw	r3,136(sp)
   48fbc:	0013883a 	mov	r9,zero
   48fc0:	003e6006 	br	48944 <__alt_data_end+0xfffd6944>
   48fc4:	21003fcc 	andi	r4,r4,255
   48fc8:	203fc026 	beq	r4,zero,48ecc <__alt_data_end+0xfffd6ecc>
   48fcc:	d9c01d85 	stb	r7,118(sp)
   48fd0:	003fbe06 	br	48ecc <__alt_data_end+0xfffd6ecc>
   48fd4:	da802217 	ldw	r10,136(sp)
   48fd8:	54400017 	ldw	r17,0(r10)
   48fdc:	50800104 	addi	r2,r10,4
   48fe0:	883e3b16 	blt	r17,zero,488d0 <__alt_data_end+0xfffd68d0>
   48fe4:	d8802215 	stw	r2,136(sp)
   48fe8:	80c00007 	ldb	r3,0(r16)
   48fec:	003db406 	br	486c0 <__alt_data_end+0xfffd66c0>
   48ff0:	01000044 	movi	r4,1
   48ff4:	01c00ac4 	movi	r7,43
   48ff8:	80c00007 	ldb	r3,0(r16)
   48ffc:	003db006 	br	486c0 <__alt_data_end+0xfffd66c0>
   49000:	80c00007 	ldb	r3,0(r16)
   49004:	82800044 	addi	r10,r16,1
   49008:	1b423c26 	beq	r3,r13,498fc <___vfiprintf_internal_r+0x13b8>
   4900c:	18bff404 	addi	r2,r3,-48
   49010:	0013883a 	mov	r9,zero
   49014:	30822b36 	bltu	r6,r2,498c4 <___vfiprintf_internal_r+0x1380>
   49018:	50c00007 	ldb	r3,0(r10)
   4901c:	4a4002a4 	muli	r9,r9,10
   49020:	54000044 	addi	r16,r10,1
   49024:	8015883a 	mov	r10,r16
   49028:	4893883a 	add	r9,r9,r2
   4902c:	18bff404 	addi	r2,r3,-48
   49030:	30bff92e 	bgeu	r6,r2,49018 <__alt_data_end+0xfffd7018>
   49034:	483da30e 	bge	r9,zero,486c4 <__alt_data_end+0xfffd66c4>
   49038:	027fffc4 	movi	r9,-1
   4903c:	003da106 	br	486c4 <__alt_data_end+0xfffd66c4>
   49040:	a5001014 	ori	r20,r20,64
   49044:	80c00007 	ldb	r3,0(r16)
   49048:	003d9d06 	br	486c0 <__alt_data_end+0xfffd66c0>
   4904c:	da802217 	ldw	r10,136(sp)
   49050:	d8001d85 	stb	zero,118(sp)
   49054:	50c00204 	addi	r3,r10,8
   49058:	54800017 	ldw	r18,0(r10)
   4905c:	54c00117 	ldw	r19,4(r10)
   49060:	4801ca16 	blt	r9,zero,4978c <___vfiprintf_internal_r+0x1248>
   49064:	013fdfc4 	movi	r4,-129
   49068:	94c4b03a 	or	r2,r18,r19
   4906c:	d8c02215 	stw	r3,136(sp)
   49070:	a128703a 	and	r20,r20,r4
   49074:	0039883a 	mov	fp,zero
   49078:	103f341e 	bne	r2,zero,48d4c <__alt_data_end+0xfffd6d4c>
   4907c:	483e2e26 	beq	r9,zero,48938 <__alt_data_end+0xfffd6938>
   49080:	0025883a 	mov	r18,zero
   49084:	94800c04 	addi	r18,r18,48
   49088:	dc8019c5 	stb	r18,103(sp)
   4908c:	dcc02717 	ldw	r19,156(sp)
   49090:	dd4019c4 	addi	r21,sp,103
   49094:	003e2b06 	br	48944 <__alt_data_end+0xfffd6944>
   49098:	21003fcc 	andi	r4,r4,255
   4909c:	2002361e 	bne	r4,zero,49978 <___vfiprintf_internal_r+0x1434>
   490a0:	1801c126 	beq	r3,zero,497a8 <___vfiprintf_internal_r+0x1264>
   490a4:	04800044 	movi	r18,1
   490a8:	d8c01005 	stb	r3,64(sp)
   490ac:	d8001d85 	stb	zero,118(sp)
   490b0:	9027883a 	mov	r19,r18
   490b4:	dd401004 	addi	r21,sp,64
   490b8:	003f1106 	br	48d00 <__alt_data_end+0xfffd6d00>
   490bc:	d9402117 	ldw	r5,132(sp)
   490c0:	d9002017 	ldw	r4,128(sp)
   490c4:	d9801a04 	addi	r6,sp,104
   490c8:	d9c02b15 	stw	r7,172(sp)
   490cc:	dbc02a15 	stw	r15,168(sp)
   490d0:	00484300 	call	48430 <__sprint_r.part.0>
   490d4:	d9c02b17 	ldw	r7,172(sp)
   490d8:	dbc02a17 	ldw	r15,168(sp)
   490dc:	10006d1e 	bne	r2,zero,49294 <___vfiprintf_internal_r+0xd50>
   490e0:	d9801b17 	ldw	r6,108(sp)
   490e4:	d8801c17 	ldw	r2,112(sp)
   490e8:	d811883a 	mov	r8,sp
   490ec:	31400044 	addi	r5,r6,1
   490f0:	003e3306 	br	489c0 <__alt_data_end+0xfffd69c0>
   490f4:	d9401b17 	ldw	r5,108(sp)
   490f8:	d8801c17 	ldw	r2,112(sp)
   490fc:	29000044 	addi	r4,r5,1
   49100:	d8c01d87 	ldb	r3,118(sp)
   49104:	183e4d26 	beq	r3,zero,48a3c <__alt_data_end+0xfffd6a3c>
   49108:	00c00044 	movi	r3,1
   4910c:	d9401d84 	addi	r5,sp,118
   49110:	10c5883a 	add	r2,r2,r3
   49114:	41400015 	stw	r5,0(r8)
   49118:	40c00115 	stw	r3,4(r8)
   4911c:	d8801c15 	stw	r2,112(sp)
   49120:	d9001b15 	stw	r4,108(sp)
   49124:	014001c4 	movi	r5,7
   49128:	2900a90e 	bge	r5,r4,493d0 <___vfiprintf_internal_r+0xe8c>
   4912c:	1000da1e 	bne	r2,zero,49498 <___vfiprintf_internal_r+0xf54>
   49130:	7000ab1e 	bne	r14,zero,493e0 <___vfiprintf_internal_r+0xe9c>
   49134:	000b883a 	mov	r5,zero
   49138:	1809883a 	mov	r4,r3
   4913c:	d811883a 	mov	r8,sp
   49140:	00c02004 	movi	r3,128
   49144:	e0fe4d26 	beq	fp,r3,48a7c <__alt_data_end+0xfffd6a7c>
   49148:	4cf9c83a 	sub	fp,r9,r19
   4914c:	073e7b0e 	bge	zero,fp,48b3c <__alt_data_end+0xfffd6b3c>
   49150:	01c00404 	movi	r7,16
   49154:	3f01900e 	bge	r7,fp,49798 <___vfiprintf_internal_r+0x1254>
   49158:	00c00174 	movhi	r3,5
   4915c:	18c02904 	addi	r3,r3,164
   49160:	d8c02415 	stw	r3,144(sp)
   49164:	034001c4 	movi	r13,7
   49168:	00000506 	br	49180 <___vfiprintf_internal_r+0xc3c>
   4916c:	29000084 	addi	r4,r5,2
   49170:	42000204 	addi	r8,r8,8
   49174:	180b883a 	mov	r5,r3
   49178:	e73ffc04 	addi	fp,fp,-16
   4917c:	3f000d0e 	bge	r7,fp,491b4 <___vfiprintf_internal_r+0xc70>
   49180:	10800404 	addi	r2,r2,16
   49184:	28c00044 	addi	r3,r5,1
   49188:	45c00015 	stw	r23,0(r8)
   4918c:	41c00115 	stw	r7,4(r8)
   49190:	d8801c15 	stw	r2,112(sp)
   49194:	d8c01b15 	stw	r3,108(sp)
   49198:	68fff40e 	bge	r13,r3,4916c <__alt_data_end+0xfffd716c>
   4919c:	1000101e 	bne	r2,zero,491e0 <___vfiprintf_internal_r+0xc9c>
   491a0:	e73ffc04 	addi	fp,fp,-16
   491a4:	01000044 	movi	r4,1
   491a8:	000b883a 	mov	r5,zero
   491ac:	d811883a 	mov	r8,sp
   491b0:	3f3ff316 	blt	r7,fp,49180 <__alt_data_end+0xfffd7180>
   491b4:	da802417 	ldw	r10,144(sp)
   491b8:	1705883a 	add	r2,r2,fp
   491bc:	47000115 	stw	fp,4(r8)
   491c0:	42800015 	stw	r10,0(r8)
   491c4:	d8801c15 	stw	r2,112(sp)
   491c8:	d9001b15 	stw	r4,108(sp)
   491cc:	00c001c4 	movi	r3,7
   491d0:	19003616 	blt	r3,r4,492ac <___vfiprintf_internal_r+0xd68>
   491d4:	42000204 	addi	r8,r8,8
   491d8:	21000044 	addi	r4,r4,1
   491dc:	003e5706 	br	48b3c <__alt_data_end+0xfffd6b3c>
   491e0:	d9402117 	ldw	r5,132(sp)
   491e4:	d9002017 	ldw	r4,128(sp)
   491e8:	d9801a04 	addi	r6,sp,104
   491ec:	d9c02b15 	stw	r7,172(sp)
   491f0:	db402a15 	stw	r13,168(sp)
   491f4:	00484300 	call	48430 <__sprint_r.part.0>
   491f8:	d9c02b17 	ldw	r7,172(sp)
   491fc:	db402a17 	ldw	r13,168(sp)
   49200:	1000241e 	bne	r2,zero,49294 <___vfiprintf_internal_r+0xd50>
   49204:	d9401b17 	ldw	r5,108(sp)
   49208:	d8801c17 	ldw	r2,112(sp)
   4920c:	d811883a 	mov	r8,sp
   49210:	29000044 	addi	r4,r5,1
   49214:	003fd806 	br	49178 <__alt_data_end+0xfffd7178>
   49218:	d9401b17 	ldw	r5,108(sp)
   4921c:	00c00174 	movhi	r3,5
   49220:	18c02d04 	addi	r3,r3,180
   49224:	d8c02415 	stw	r3,144(sp)
   49228:	29400044 	addi	r5,r5,1
   4922c:	d8c02417 	ldw	r3,144(sp)
   49230:	14c5883a 	add	r2,r2,r19
   49234:	44c00115 	stw	r19,4(r8)
   49238:	40c00015 	stw	r3,0(r8)
   4923c:	d8801c15 	stw	r2,112(sp)
   49240:	d9401b15 	stw	r5,108(sp)
   49244:	00c001c4 	movi	r3,7
   49248:	1940070e 	bge	r3,r5,49268 <___vfiprintf_internal_r+0xd24>
   4924c:	103e4826 	beq	r2,zero,48b70 <__alt_data_end+0xfffd6b70>
   49250:	d9402117 	ldw	r5,132(sp)
   49254:	d9002017 	ldw	r4,128(sp)
   49258:	d9801a04 	addi	r6,sp,104
   4925c:	00484300 	call	48430 <__sprint_r.part.0>
   49260:	10000c1e 	bne	r2,zero,49294 <___vfiprintf_internal_r+0xd50>
   49264:	d8801c17 	ldw	r2,112(sp)
   49268:	8c80010e 	bge	r17,r18,49270 <___vfiprintf_internal_r+0xd2c>
   4926c:	9023883a 	mov	r17,r18
   49270:	da802317 	ldw	r10,140(sp)
   49274:	5455883a 	add	r10,r10,r17
   49278:	da802315 	stw	r10,140(sp)
   4927c:	103e4126 	beq	r2,zero,48b84 <__alt_data_end+0xfffd6b84>
   49280:	d9402117 	ldw	r5,132(sp)
   49284:	d9002017 	ldw	r4,128(sp)
   49288:	d9801a04 	addi	r6,sp,104
   4928c:	00484300 	call	48430 <__sprint_r.part.0>
   49290:	103e3c26 	beq	r2,zero,48b84 <__alt_data_end+0xfffd6b84>
   49294:	dd002117 	ldw	r20,132(sp)
   49298:	a080030b 	ldhu	r2,12(r20)
   4929c:	1080100c 	andi	r2,r2,64
   492a0:	1001231e 	bne	r2,zero,49730 <___vfiprintf_internal_r+0x11ec>
   492a4:	d8802317 	ldw	r2,140(sp)
   492a8:	003d7b06 	br	48898 <__alt_data_end+0xfffd6898>
   492ac:	1000991e 	bne	r2,zero,49514 <___vfiprintf_internal_r+0xfd0>
   492b0:	00c00044 	movi	r3,1
   492b4:	9805883a 	mov	r2,r19
   492b8:	dd400015 	stw	r21,0(sp)
   492bc:	dcc00115 	stw	r19,4(sp)
   492c0:	dcc01c15 	stw	r19,112(sp)
   492c4:	d8c01b15 	stw	r3,108(sp)
   492c8:	d811883a 	mov	r8,sp
   492cc:	42000204 	addi	r8,r8,8
   492d0:	a2c0010c 	andi	r11,r20,4
   492d4:	583fe426 	beq	r11,zero,49268 <__alt_data_end+0xfffd7268>
   492d8:	8ca7c83a 	sub	r19,r17,r18
   492dc:	04ffe20e 	bge	zero,r19,49268 <__alt_data_end+0xfffd7268>
   492e0:	01c00404 	movi	r7,16
   492e4:	3cffcc0e 	bge	r7,r19,49218 <__alt_data_end+0xfffd7218>
   492e8:	02800174 	movhi	r10,5
   492ec:	52802d04 	addi	r10,r10,180
   492f0:	d9001b17 	ldw	r4,108(sp)
   492f4:	da802415 	stw	r10,144(sp)
   492f8:	382b883a 	mov	r21,r7
   492fc:	050001c4 	movi	r20,7
   49300:	df002017 	ldw	fp,128(sp)
   49304:	00000506 	br	4931c <___vfiprintf_internal_r+0xdd8>
   49308:	21400084 	addi	r5,r4,2
   4930c:	42000204 	addi	r8,r8,8
   49310:	1809883a 	mov	r4,r3
   49314:	9cfffc04 	addi	r19,r19,-16
   49318:	acffc40e 	bge	r21,r19,4922c <__alt_data_end+0xfffd722c>
   4931c:	10800404 	addi	r2,r2,16
   49320:	20c00044 	addi	r3,r4,1
   49324:	45800015 	stw	r22,0(r8)
   49328:	45400115 	stw	r21,4(r8)
   4932c:	d8801c15 	stw	r2,112(sp)
   49330:	d8c01b15 	stw	r3,108(sp)
   49334:	a0fff40e 	bge	r20,r3,49308 <__alt_data_end+0xfffd7308>
   49338:	1000041e 	bne	r2,zero,4934c <___vfiprintf_internal_r+0xe08>
   4933c:	01400044 	movi	r5,1
   49340:	0009883a 	mov	r4,zero
   49344:	d811883a 	mov	r8,sp
   49348:	003ff206 	br	49314 <__alt_data_end+0xfffd7314>
   4934c:	d9402117 	ldw	r5,132(sp)
   49350:	d9801a04 	addi	r6,sp,104
   49354:	e009883a 	mov	r4,fp
   49358:	00484300 	call	48430 <__sprint_r.part.0>
   4935c:	103fcd1e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   49360:	d9001b17 	ldw	r4,108(sp)
   49364:	d8801c17 	ldw	r2,112(sp)
   49368:	d811883a 	mov	r8,sp
   4936c:	21400044 	addi	r5,r4,1
   49370:	003fe806 	br	49314 <__alt_data_end+0xfffd7314>
   49374:	d9402117 	ldw	r5,132(sp)
   49378:	d9002017 	ldw	r4,128(sp)
   4937c:	d9801a04 	addi	r6,sp,104
   49380:	d9c02b15 	stw	r7,172(sp)
   49384:	db402a15 	stw	r13,168(sp)
   49388:	00484300 	call	48430 <__sprint_r.part.0>
   4938c:	d9c02b17 	ldw	r7,172(sp)
   49390:	db402a17 	ldw	r13,168(sp)
   49394:	103fbf1e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   49398:	d9401b17 	ldw	r5,108(sp)
   4939c:	d8801c17 	ldw	r2,112(sp)
   493a0:	d811883a 	mov	r8,sp
   493a4:	29800044 	addi	r6,r5,1
   493a8:	003dc406 	br	48abc <__alt_data_end+0xfffd6abc>
   493ac:	1000d21e 	bne	r2,zero,496f8 <___vfiprintf_internal_r+0x11b4>
   493b0:	d8c01d87 	ldb	r3,118(sp)
   493b4:	18009526 	beq	r3,zero,4960c <___vfiprintf_internal_r+0x10c8>
   493b8:	00800044 	movi	r2,1
   493bc:	d8c01d84 	addi	r3,sp,118
   493c0:	1009883a 	mov	r4,r2
   493c4:	d8c00015 	stw	r3,0(sp)
   493c8:	d8800115 	stw	r2,4(sp)
   493cc:	d811883a 	mov	r8,sp
   493d0:	200b883a 	mov	r5,r4
   493d4:	42000204 	addi	r8,r8,8
   493d8:	21000044 	addi	r4,r4,1
   493dc:	003d9706 	br	48a3c <__alt_data_end+0xfffd6a3c>
   493e0:	d9001d04 	addi	r4,sp,116
   493e4:	00800084 	movi	r2,2
   493e8:	d9000015 	stw	r4,0(sp)
   493ec:	d8800115 	stw	r2,4(sp)
   493f0:	1809883a 	mov	r4,r3
   493f4:	d811883a 	mov	r8,sp
   493f8:	200b883a 	mov	r5,r4
   493fc:	42000204 	addi	r8,r8,8
   49400:	21000044 	addi	r4,r4,1
   49404:	003f4e06 	br	49140 <__alt_data_end+0xfffd7140>
   49408:	d8001d85 	stb	zero,118(sp)
   4940c:	48005016 	blt	r9,zero,49550 <___vfiprintf_internal_r+0x100c>
   49410:	00ffdfc4 	movi	r3,-129
   49414:	94c4b03a 	or	r2,r18,r19
   49418:	a0e8703a 	and	r20,r20,r3
   4941c:	103d4426 	beq	r2,zero,48930 <__alt_data_end+0xfffd6930>
   49420:	0039883a 	mov	fp,zero
   49424:	d9002617 	ldw	r4,152(sp)
   49428:	dd401a04 	addi	r21,sp,104
   4942c:	908003cc 	andi	r2,r18,15
   49430:	9806973a 	slli	r3,r19,28
   49434:	2085883a 	add	r2,r4,r2
   49438:	9024d13a 	srli	r18,r18,4
   4943c:	10800003 	ldbu	r2,0(r2)
   49440:	9826d13a 	srli	r19,r19,4
   49444:	ad7fffc4 	addi	r21,r21,-1
   49448:	1ca4b03a 	or	r18,r3,r18
   4944c:	a8800005 	stb	r2,0(r21)
   49450:	94c4b03a 	or	r2,r18,r19
   49454:	103ff51e 	bne	r2,zero,4942c <__alt_data_end+0xfffd742c>
   49458:	003e5906 	br	48dc0 <__alt_data_end+0xfffd6dc0>
   4945c:	d9402117 	ldw	r5,132(sp)
   49460:	d9002017 	ldw	r4,128(sp)
   49464:	d9801a04 	addi	r6,sp,104
   49468:	00484300 	call	48430 <__sprint_r.part.0>
   4946c:	103f891e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   49470:	d8801c17 	ldw	r2,112(sp)
   49474:	d811883a 	mov	r8,sp
   49478:	003f9506 	br	492d0 <__alt_data_end+0xfffd72d0>
   4947c:	d9402117 	ldw	r5,132(sp)
   49480:	d9002017 	ldw	r4,128(sp)
   49484:	d9801a04 	addi	r6,sp,104
   49488:	00484300 	call	48430 <__sprint_r.part.0>
   4948c:	103f811e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   49490:	d811883a 	mov	r8,sp
   49494:	003ced06 	br	4884c <__alt_data_end+0xfffd684c>
   49498:	d9402117 	ldw	r5,132(sp)
   4949c:	d9002017 	ldw	r4,128(sp)
   494a0:	d9801a04 	addi	r6,sp,104
   494a4:	da402c15 	stw	r9,176(sp)
   494a8:	db802a15 	stw	r14,168(sp)
   494ac:	00484300 	call	48430 <__sprint_r.part.0>
   494b0:	da402c17 	ldw	r9,176(sp)
   494b4:	db802a17 	ldw	r14,168(sp)
   494b8:	103f761e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   494bc:	d9401b17 	ldw	r5,108(sp)
   494c0:	d8801c17 	ldw	r2,112(sp)
   494c4:	d811883a 	mov	r8,sp
   494c8:	29000044 	addi	r4,r5,1
   494cc:	003d5b06 	br	48a3c <__alt_data_end+0xfffd6a3c>
   494d0:	d9402117 	ldw	r5,132(sp)
   494d4:	d9002017 	ldw	r4,128(sp)
   494d8:	d9801a04 	addi	r6,sp,104
   494dc:	da402c15 	stw	r9,176(sp)
   494e0:	00484300 	call	48430 <__sprint_r.part.0>
   494e4:	da402c17 	ldw	r9,176(sp)
   494e8:	103f6a1e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   494ec:	d9401b17 	ldw	r5,108(sp)
   494f0:	d8801c17 	ldw	r2,112(sp)
   494f4:	d811883a 	mov	r8,sp
   494f8:	29000044 	addi	r4,r5,1
   494fc:	003f1006 	br	49140 <__alt_data_end+0xfffd7140>
   49500:	1000c31e 	bne	r2,zero,49810 <___vfiprintf_internal_r+0x12cc>
   49504:	01000044 	movi	r4,1
   49508:	000b883a 	mov	r5,zero
   4950c:	d811883a 	mov	r8,sp
   49510:	003f0d06 	br	49148 <__alt_data_end+0xfffd7148>
   49514:	d9402117 	ldw	r5,132(sp)
   49518:	d9002017 	ldw	r4,128(sp)
   4951c:	d9801a04 	addi	r6,sp,104
   49520:	00484300 	call	48430 <__sprint_r.part.0>
   49524:	103f5b1e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   49528:	d9001b17 	ldw	r4,108(sp)
   4952c:	d8801c17 	ldw	r2,112(sp)
   49530:	d811883a 	mov	r8,sp
   49534:	21000044 	addi	r4,r4,1
   49538:	003d8006 	br	48b3c <__alt_data_end+0xfffd6b3c>
   4953c:	01000174 	movhi	r4,5
   49540:	213fc904 	addi	r4,r4,-220
   49544:	d9002615 	stw	r4,152(sp)
   49548:	d8c02215 	stw	r3,136(sp)
   4954c:	1029883a 	mov	r20,r2
   49550:	94c4b03a 	or	r2,r18,r19
   49554:	103fb21e 	bne	r2,zero,49420 <__alt_data_end+0xfffd7420>
   49558:	0039883a 	mov	fp,zero
   4955c:	00800084 	movi	r2,2
   49560:	003e6b06 	br	48f10 <__alt_data_end+0xfffd6f10>
   49564:	da802217 	ldw	r10,136(sp)
   49568:	d8001d85 	stb	zero,118(sp)
   4956c:	0027883a 	mov	r19,zero
   49570:	50800104 	addi	r2,r10,4
   49574:	54800017 	ldw	r18,0(r10)
   49578:	483e6016 	blt	r9,zero,48efc <__alt_data_end+0xfffd6efc>
   4957c:	00ffdfc4 	movi	r3,-129
   49580:	d8802215 	stw	r2,136(sp)
   49584:	a0e8703a 	and	r20,r20,r3
   49588:	0039883a 	mov	fp,zero
   4958c:	903ebb26 	beq	r18,zero,4907c <__alt_data_end+0xfffd707c>
   49590:	00800244 	movi	r2,9
   49594:	14bdee36 	bltu	r2,r18,48d50 <__alt_data_end+0xfffd6d50>
   49598:	003eba06 	br	49084 <__alt_data_end+0xfffd7084>
   4959c:	00800c04 	movi	r2,48
   495a0:	d8c01d45 	stb	r3,117(sp)
   495a4:	d8801d05 	stb	r2,116(sp)
   495a8:	d8001d85 	stb	zero,118(sp)
   495ac:	a0c00094 	ori	r3,r20,2
   495b0:	4800a916 	blt	r9,zero,49858 <___vfiprintf_internal_r+0x1314>
   495b4:	00bfdfc4 	movi	r2,-129
   495b8:	a096703a 	and	r11,r20,r2
   495bc:	5d000094 	ori	r20,r11,2
   495c0:	0039883a 	mov	fp,zero
   495c4:	003f9706 	br	49424 <__alt_data_end+0xfffd7424>
   495c8:	8025883a 	mov	r18,r16
   495cc:	003c2e06 	br	48688 <__alt_data_end+0xfffd6688>
   495d0:	00800174 	movhi	r2,5
   495d4:	10bfc904 	addi	r2,r2,-220
   495d8:	0039883a 	mov	fp,zero
   495dc:	d8802615 	stw	r2,152(sp)
   495e0:	003f9006 	br	49424 <__alt_data_end+0xfffd7424>
   495e4:	04a5c83a 	sub	r18,zero,r18
   495e8:	07000b44 	movi	fp,45
   495ec:	9004c03a 	cmpne	r2,r18,zero
   495f0:	04e7c83a 	sub	r19,zero,r19
   495f4:	df001d85 	stb	fp,118(sp)
   495f8:	98a7c83a 	sub	r19,r19,r2
   495fc:	48009f16 	blt	r9,zero,4987c <___vfiprintf_internal_r+0x1338>
   49600:	00bfdfc4 	movi	r2,-129
   49604:	a0a8703a 	and	r20,r20,r2
   49608:	003dd006 	br	48d4c <__alt_data_end+0xfffd6d4c>
   4960c:	70004c26 	beq	r14,zero,49740 <___vfiprintf_internal_r+0x11fc>
   49610:	00800084 	movi	r2,2
   49614:	d8c01d04 	addi	r3,sp,116
   49618:	d8c00015 	stw	r3,0(sp)
   4961c:	d8800115 	stw	r2,4(sp)
   49620:	01000044 	movi	r4,1
   49624:	d811883a 	mov	r8,sp
   49628:	003f7306 	br	493f8 <__alt_data_end+0xfffd73f8>
   4962c:	a080100c 	andi	r2,r20,64
   49630:	da802217 	ldw	r10,136(sp)
   49634:	103e0626 	beq	r2,zero,48e50 <__alt_data_end+0xfffd6e50>
   49638:	5480000f 	ldh	r18,0(r10)
   4963c:	52800104 	addi	r10,r10,4
   49640:	da802215 	stw	r10,136(sp)
   49644:	9027d7fa 	srai	r19,r18,31
   49648:	9805883a 	mov	r2,r19
   4964c:	003db806 	br	48d30 <__alt_data_end+0xfffd6d30>
   49650:	a080040c 	andi	r2,r20,16
   49654:	1000091e 	bne	r2,zero,4967c <___vfiprintf_internal_r+0x1138>
   49658:	a2c0100c 	andi	r11,r20,64
   4965c:	58000726 	beq	r11,zero,4967c <___vfiprintf_internal_r+0x1138>
   49660:	da802217 	ldw	r10,136(sp)
   49664:	50800017 	ldw	r2,0(r10)
   49668:	52800104 	addi	r10,r10,4
   4966c:	da802215 	stw	r10,136(sp)
   49670:	da802317 	ldw	r10,140(sp)
   49674:	1280000d 	sth	r10,0(r2)
   49678:	003be706 	br	48618 <__alt_data_end+0xfffd6618>
   4967c:	da802217 	ldw	r10,136(sp)
   49680:	50800017 	ldw	r2,0(r10)
   49684:	52800104 	addi	r10,r10,4
   49688:	da802215 	stw	r10,136(sp)
   4968c:	da802317 	ldw	r10,140(sp)
   49690:	12800015 	stw	r10,0(r2)
   49694:	003be006 	br	48618 <__alt_data_end+0xfffd6618>
   49698:	a080100c 	andi	r2,r20,64
   4969c:	da802217 	ldw	r10,136(sp)
   496a0:	10003026 	beq	r2,zero,49764 <___vfiprintf_internal_r+0x1220>
   496a4:	5480000b 	ldhu	r18,0(r10)
   496a8:	52800104 	addi	r10,r10,4
   496ac:	0027883a 	mov	r19,zero
   496b0:	da802215 	stw	r10,136(sp)
   496b4:	003d8006 	br	48cb8 <__alt_data_end+0xfffd6cb8>
   496b8:	80c00007 	ldb	r3,0(r16)
   496bc:	003c0006 	br	486c0 <__alt_data_end+0xfffd66c0>
   496c0:	a080100c 	andi	r2,r20,64
   496c4:	d8001d85 	stb	zero,118(sp)
   496c8:	da802217 	ldw	r10,136(sp)
   496cc:	1000201e 	bne	r2,zero,49750 <___vfiprintf_internal_r+0x120c>
   496d0:	50800104 	addi	r2,r10,4
   496d4:	54800017 	ldw	r18,0(r10)
   496d8:	0027883a 	mov	r19,zero
   496dc:	483def0e 	bge	r9,zero,48e9c <__alt_data_end+0xfffd6e9c>
   496e0:	94c6b03a 	or	r3,r18,r19
   496e4:	d8802215 	stw	r2,136(sp)
   496e8:	183d4e1e 	bne	r3,zero,48c24 <__alt_data_end+0xfffd6c24>
   496ec:	0039883a 	mov	fp,zero
   496f0:	0005883a 	mov	r2,zero
   496f4:	003e0606 	br	48f10 <__alt_data_end+0xfffd6f10>
   496f8:	d9402117 	ldw	r5,132(sp)
   496fc:	d9002017 	ldw	r4,128(sp)
   49700:	d9801a04 	addi	r6,sp,104
   49704:	da402c15 	stw	r9,176(sp)
   49708:	db802a15 	stw	r14,168(sp)
   4970c:	00484300 	call	48430 <__sprint_r.part.0>
   49710:	da402c17 	ldw	r9,176(sp)
   49714:	db802a17 	ldw	r14,168(sp)
   49718:	103ede1e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   4971c:	d9401b17 	ldw	r5,108(sp)
   49720:	d8801c17 	ldw	r2,112(sp)
   49724:	d811883a 	mov	r8,sp
   49728:	29000044 	addi	r4,r5,1
   4972c:	003e7406 	br	49100 <__alt_data_end+0xfffd7100>
   49730:	00bfffc4 	movi	r2,-1
   49734:	003c5806 	br	48898 <__alt_data_end+0xfffd6898>
   49738:	d811883a 	mov	r8,sp
   4973c:	003ee806 	br	492e0 <__alt_data_end+0xfffd72e0>
   49740:	000b883a 	mov	r5,zero
   49744:	01000044 	movi	r4,1
   49748:	d811883a 	mov	r8,sp
   4974c:	003e7c06 	br	49140 <__alt_data_end+0xfffd7140>
   49750:	50800104 	addi	r2,r10,4
   49754:	5480000b 	ldhu	r18,0(r10)
   49758:	0027883a 	mov	r19,zero
   4975c:	483dcf0e 	bge	r9,zero,48e9c <__alt_data_end+0xfffd6e9c>
   49760:	003fdf06 	br	496e0 <__alt_data_end+0xfffd76e0>
   49764:	54800017 	ldw	r18,0(r10)
   49768:	52800104 	addi	r10,r10,4
   4976c:	0027883a 	mov	r19,zero
   49770:	da802215 	stw	r10,136(sp)
   49774:	003d5006 	br	48cb8 <__alt_data_end+0xfffd6cb8>
   49778:	50800104 	addi	r2,r10,4
   4977c:	5480000b 	ldhu	r18,0(r10)
   49780:	0027883a 	mov	r19,zero
   49784:	483f7d0e 	bge	r9,zero,4957c <__alt_data_end+0xfffd757c>
   49788:	003ddc06 	br	48efc <__alt_data_end+0xfffd6efc>
   4978c:	d8c02215 	stw	r3,136(sp)
   49790:	0039883a 	mov	fp,zero
   49794:	003ddb06 	br	48f04 <__alt_data_end+0xfffd6f04>
   49798:	02800174 	movhi	r10,5
   4979c:	52802904 	addi	r10,r10,164
   497a0:	da802415 	stw	r10,144(sp)
   497a4:	003e8306 	br	491b4 <__alt_data_end+0xfffd71b4>
   497a8:	d8801c17 	ldw	r2,112(sp)
   497ac:	dd002117 	ldw	r20,132(sp)
   497b0:	103eb926 	beq	r2,zero,49298 <__alt_data_end+0xfffd7298>
   497b4:	d9002017 	ldw	r4,128(sp)
   497b8:	d9801a04 	addi	r6,sp,104
   497bc:	a00b883a 	mov	r5,r20
   497c0:	00484300 	call	48430 <__sprint_r.part.0>
   497c4:	003eb406 	br	49298 <__alt_data_end+0xfffd7298>
   497c8:	80c00043 	ldbu	r3,1(r16)
   497cc:	a5000814 	ori	r20,r20,32
   497d0:	84000044 	addi	r16,r16,1
   497d4:	18c03fcc 	andi	r3,r3,255
   497d8:	18c0201c 	xori	r3,r3,128
   497dc:	18ffe004 	addi	r3,r3,-128
   497e0:	003bb706 	br	486c0 <__alt_data_end+0xfffd66c0>
   497e4:	a809883a 	mov	r4,r21
   497e8:	d8c02a15 	stw	r3,168(sp)
   497ec:	da002b15 	stw	r8,172(sp)
   497f0:	0040d180 	call	40d18 <strlen>
   497f4:	d8c02a17 	ldw	r3,168(sp)
   497f8:	1027883a 	mov	r19,r2
   497fc:	df001d83 	ldbu	fp,118(sp)
   49800:	d8c02215 	stw	r3,136(sp)
   49804:	0013883a 	mov	r9,zero
   49808:	da002b17 	ldw	r8,172(sp)
   4980c:	003c4d06 	br	48944 <__alt_data_end+0xfffd6944>
   49810:	d9402117 	ldw	r5,132(sp)
   49814:	d9002017 	ldw	r4,128(sp)
   49818:	d9801a04 	addi	r6,sp,104
   4981c:	da402c15 	stw	r9,176(sp)
   49820:	00484300 	call	48430 <__sprint_r.part.0>
   49824:	da402c17 	ldw	r9,176(sp)
   49828:	103e9a1e 	bne	r2,zero,49294 <__alt_data_end+0xfffd7294>
   4982c:	d9401b17 	ldw	r5,108(sp)
   49830:	d8801c17 	ldw	r2,112(sp)
   49834:	d811883a 	mov	r8,sp
   49838:	29000044 	addi	r4,r5,1
   4983c:	003e4206 	br	49148 <__alt_data_end+0xfffd7148>
   49840:	d9401b17 	ldw	r5,108(sp)
   49844:	01000174 	movhi	r4,5
   49848:	21002d04 	addi	r4,r4,180
   4984c:	d9002415 	stw	r4,144(sp)
   49850:	29400044 	addi	r5,r5,1
   49854:	003c6d06 	br	48a0c <__alt_data_end+0xfffd6a0c>
   49858:	0039883a 	mov	fp,zero
   4985c:	00800084 	movi	r2,2
   49860:	10803fcc 	andi	r2,r2,255
   49864:	01000044 	movi	r4,1
   49868:	11001e26 	beq	r2,r4,498e4 <___vfiprintf_internal_r+0x13a0>
   4986c:	01000084 	movi	r4,2
   49870:	11001e1e 	bne	r2,r4,498ec <___vfiprintf_internal_r+0x13a8>
   49874:	1829883a 	mov	r20,r3
   49878:	003eea06 	br	49424 <__alt_data_end+0xfffd7424>
   4987c:	a007883a 	mov	r3,r20
   49880:	00800044 	movi	r2,1
   49884:	003ff606 	br	49860 <__alt_data_end+0xfffd7860>
   49888:	00800184 	movi	r2,6
   4988c:	1240012e 	bgeu	r2,r9,49894 <___vfiprintf_internal_r+0x1350>
   49890:	1013883a 	mov	r9,r2
   49894:	4827883a 	mov	r19,r9
   49898:	4825883a 	mov	r18,r9
   4989c:	48001516 	blt	r9,zero,498f4 <___vfiprintf_internal_r+0x13b0>
   498a0:	05400174 	movhi	r21,5
   498a4:	d8c02215 	stw	r3,136(sp)
   498a8:	ad7fce04 	addi	r21,r21,-200
   498ac:	003d1406 	br	48d00 <__alt_data_end+0xfffd6d00>
   498b0:	02800174 	movhi	r10,5
   498b4:	52802904 	addi	r10,r10,164
   498b8:	da802415 	stw	r10,144(sp)
   498bc:	200d883a 	mov	r6,r4
   498c0:	003c9106 	br	48b08 <__alt_data_end+0xfffd6b08>
   498c4:	5021883a 	mov	r16,r10
   498c8:	0013883a 	mov	r9,zero
   498cc:	003b7d06 	br	486c4 <__alt_data_end+0xfffd66c4>
   498d0:	4827883a 	mov	r19,r9
   498d4:	df001d83 	ldbu	fp,118(sp)
   498d8:	d8c02215 	stw	r3,136(sp)
   498dc:	0013883a 	mov	r9,zero
   498e0:	003c1806 	br	48944 <__alt_data_end+0xfffd6944>
   498e4:	1829883a 	mov	r20,r3
   498e8:	003d1806 	br	48d4c <__alt_data_end+0xfffd6d4c>
   498ec:	1829883a 	mov	r20,r3
   498f0:	003ccd06 	br	48c28 <__alt_data_end+0xfffd6c28>
   498f4:	0025883a 	mov	r18,zero
   498f8:	003fe906 	br	498a0 <__alt_data_end+0xfffd78a0>
   498fc:	d8802217 	ldw	r2,136(sp)
   49900:	80c00043 	ldbu	r3,1(r16)
   49904:	5021883a 	mov	r16,r10
   49908:	12400017 	ldw	r9,0(r2)
   4990c:	10800104 	addi	r2,r2,4
   49910:	d8802215 	stw	r2,136(sp)
   49914:	483faf0e 	bge	r9,zero,497d4 <__alt_data_end+0xfffd77d4>
   49918:	18c03fcc 	andi	r3,r3,255
   4991c:	18c0201c 	xori	r3,r3,128
   49920:	027fffc4 	movi	r9,-1
   49924:	18ffe004 	addi	r3,r3,-128
   49928:	003b6506 	br	486c0 <__alt_data_end+0xfffd66c0>
   4992c:	d9c01d85 	stb	r7,118(sp)
   49930:	003ca006 	br	48bb4 <__alt_data_end+0xfffd6bb4>
   49934:	d9c01d85 	stb	r7,118(sp)
   49938:	003cad06 	br	48bf0 <__alt_data_end+0xfffd6bf0>
   4993c:	d9c01d85 	stb	r7,118(sp)
   49940:	003d7d06 	br	48f38 <__alt_data_end+0xfffd6f38>
   49944:	d9c01d85 	stb	r7,118(sp)
   49948:	003d5f06 	br	48ec8 <__alt_data_end+0xfffd6ec8>
   4994c:	a080004c 	andi	r2,r20,1
   49950:	0039883a 	mov	fp,zero
   49954:	10000526 	beq	r2,zero,4996c <___vfiprintf_internal_r+0x1428>
   49958:	00800c04 	movi	r2,48
   4995c:	d88019c5 	stb	r2,103(sp)
   49960:	dcc02717 	ldw	r19,156(sp)
   49964:	dd4019c4 	addi	r21,sp,103
   49968:	003bf606 	br	48944 <__alt_data_end+0xfffd6944>
   4996c:	0027883a 	mov	r19,zero
   49970:	dd401a04 	addi	r21,sp,104
   49974:	003bf306 	br	48944 <__alt_data_end+0xfffd6944>
   49978:	d9c01d85 	stb	r7,118(sp)
   4997c:	003dc806 	br	490a0 <__alt_data_end+0xfffd70a0>
   49980:	d9c01d85 	stb	r7,118(sp)
   49984:	003d3a06 	br	48e70 <__alt_data_end+0xfffd6e70>
   49988:	d9c01d85 	stb	r7,118(sp)
   4998c:	003d2a06 	br	48e38 <__alt_data_end+0xfffd6e38>
   49990:	d9c01d85 	stb	r7,118(sp)
   49994:	003cde06 	br	48d10 <__alt_data_end+0xfffd6d10>
   49998:	d9c01d85 	stb	r7,118(sp)
   4999c:	003cbc06 	br	48c90 <__alt_data_end+0xfffd6c90>

000499a0 <__vfiprintf_internal>:
   499a0:	00800174 	movhi	r2,5
   499a4:	10872804 	addi	r2,r2,7328
   499a8:	300f883a 	mov	r7,r6
   499ac:	280d883a 	mov	r6,r5
   499b0:	200b883a 	mov	r5,r4
   499b4:	11000017 	ldw	r4,0(r2)
   499b8:	00485441 	jmpi	48544 <___vfiprintf_internal_r>

000499bc <__sbprintf>:
   499bc:	2880030b 	ldhu	r2,12(r5)
   499c0:	2ac01917 	ldw	r11,100(r5)
   499c4:	2a80038b 	ldhu	r10,14(r5)
   499c8:	2a400717 	ldw	r9,28(r5)
   499cc:	2a000917 	ldw	r8,36(r5)
   499d0:	defee204 	addi	sp,sp,-1144
   499d4:	00c10004 	movi	r3,1024
   499d8:	dc011a15 	stw	r16,1128(sp)
   499dc:	10bfff4c 	andi	r2,r2,65533
   499e0:	2821883a 	mov	r16,r5
   499e4:	d8cb883a 	add	r5,sp,r3
   499e8:	dc811c15 	stw	r18,1136(sp)
   499ec:	dc411b15 	stw	r17,1132(sp)
   499f0:	dfc11d15 	stw	ra,1140(sp)
   499f4:	2025883a 	mov	r18,r4
   499f8:	d881030d 	sth	r2,1036(sp)
   499fc:	dac11915 	stw	r11,1124(sp)
   49a00:	da81038d 	sth	r10,1038(sp)
   49a04:	da410715 	stw	r9,1052(sp)
   49a08:	da010915 	stw	r8,1060(sp)
   49a0c:	dec10015 	stw	sp,1024(sp)
   49a10:	dec10415 	stw	sp,1040(sp)
   49a14:	d8c10215 	stw	r3,1032(sp)
   49a18:	d8c10515 	stw	r3,1044(sp)
   49a1c:	d8010615 	stw	zero,1048(sp)
   49a20:	00485440 	call	48544 <___vfiprintf_internal_r>
   49a24:	1023883a 	mov	r17,r2
   49a28:	10000416 	blt	r2,zero,49a3c <__sbprintf+0x80>
   49a2c:	d9410004 	addi	r5,sp,1024
   49a30:	9009883a 	mov	r4,r18
   49a34:	0044df80 	call	44df8 <_fflush_r>
   49a38:	10000d1e 	bne	r2,zero,49a70 <__sbprintf+0xb4>
   49a3c:	d881030b 	ldhu	r2,1036(sp)
   49a40:	1080100c 	andi	r2,r2,64
   49a44:	10000326 	beq	r2,zero,49a54 <__sbprintf+0x98>
   49a48:	8080030b 	ldhu	r2,12(r16)
   49a4c:	10801014 	ori	r2,r2,64
   49a50:	8080030d 	sth	r2,12(r16)
   49a54:	8805883a 	mov	r2,r17
   49a58:	dfc11d17 	ldw	ra,1140(sp)
   49a5c:	dc811c17 	ldw	r18,1136(sp)
   49a60:	dc411b17 	ldw	r17,1132(sp)
   49a64:	dc011a17 	ldw	r16,1128(sp)
   49a68:	dec11e04 	addi	sp,sp,1144
   49a6c:	f800283a 	ret
   49a70:	047fffc4 	movi	r17,-1
   49a74:	003ff106 	br	49a3c <__alt_data_end+0xfffd7a3c>

00049a78 <_write_r>:
   49a78:	defffd04 	addi	sp,sp,-12
   49a7c:	2805883a 	mov	r2,r5
   49a80:	dc000015 	stw	r16,0(sp)
   49a84:	04000174 	movhi	r16,5
   49a88:	dc400115 	stw	r17,4(sp)
   49a8c:	300b883a 	mov	r5,r6
   49a90:	840df804 	addi	r16,r16,14304
   49a94:	2023883a 	mov	r17,r4
   49a98:	380d883a 	mov	r6,r7
   49a9c:	1009883a 	mov	r4,r2
   49aa0:	dfc00215 	stw	ra,8(sp)
   49aa4:	80000015 	stw	zero,0(r16)
   49aa8:	004def80 	call	4def8 <write>
   49aac:	00ffffc4 	movi	r3,-1
   49ab0:	10c00526 	beq	r2,r3,49ac8 <_write_r+0x50>
   49ab4:	dfc00217 	ldw	ra,8(sp)
   49ab8:	dc400117 	ldw	r17,4(sp)
   49abc:	dc000017 	ldw	r16,0(sp)
   49ac0:	dec00304 	addi	sp,sp,12
   49ac4:	f800283a 	ret
   49ac8:	80c00017 	ldw	r3,0(r16)
   49acc:	183ff926 	beq	r3,zero,49ab4 <__alt_data_end+0xfffd7ab4>
   49ad0:	88c00015 	stw	r3,0(r17)
   49ad4:	003ff706 	br	49ab4 <__alt_data_end+0xfffd7ab4>

00049ad8 <_close_r>:
   49ad8:	defffd04 	addi	sp,sp,-12
   49adc:	dc000015 	stw	r16,0(sp)
   49ae0:	04000174 	movhi	r16,5
   49ae4:	dc400115 	stw	r17,4(sp)
   49ae8:	840df804 	addi	r16,r16,14304
   49aec:	2023883a 	mov	r17,r4
   49af0:	2809883a 	mov	r4,r5
   49af4:	dfc00215 	stw	ra,8(sp)
   49af8:	80000015 	stw	zero,0(r16)
   49afc:	004d6b40 	call	4d6b4 <close>
   49b00:	00ffffc4 	movi	r3,-1
   49b04:	10c00526 	beq	r2,r3,49b1c <_close_r+0x44>
   49b08:	dfc00217 	ldw	ra,8(sp)
   49b0c:	dc400117 	ldw	r17,4(sp)
   49b10:	dc000017 	ldw	r16,0(sp)
   49b14:	dec00304 	addi	sp,sp,12
   49b18:	f800283a 	ret
   49b1c:	80c00017 	ldw	r3,0(r16)
   49b20:	183ff926 	beq	r3,zero,49b08 <__alt_data_end+0xfffd7b08>
   49b24:	88c00015 	stw	r3,0(r17)
   49b28:	003ff706 	br	49b08 <__alt_data_end+0xfffd7b08>

00049b2c <_calloc_r>:
   49b2c:	298b383a 	mul	r5,r5,r6
   49b30:	defffe04 	addi	sp,sp,-8
   49b34:	dfc00115 	stw	ra,4(sp)
   49b38:	dc000015 	stw	r16,0(sp)
   49b3c:	0045f340 	call	45f34 <_malloc_r>
   49b40:	10002926 	beq	r2,zero,49be8 <_calloc_r+0xbc>
   49b44:	11bfff17 	ldw	r6,-4(r2)
   49b48:	1021883a 	mov	r16,r2
   49b4c:	00bfff04 	movi	r2,-4
   49b50:	308c703a 	and	r6,r6,r2
   49b54:	00c00904 	movi	r3,36
   49b58:	308d883a 	add	r6,r6,r2
   49b5c:	19801636 	bltu	r3,r6,49bb8 <_calloc_r+0x8c>
   49b60:	008004c4 	movi	r2,19
   49b64:	11800b2e 	bgeu	r2,r6,49b94 <_calloc_r+0x68>
   49b68:	80000015 	stw	zero,0(r16)
   49b6c:	80000115 	stw	zero,4(r16)
   49b70:	008006c4 	movi	r2,27
   49b74:	11801a2e 	bgeu	r2,r6,49be0 <_calloc_r+0xb4>
   49b78:	80000215 	stw	zero,8(r16)
   49b7c:	80000315 	stw	zero,12(r16)
   49b80:	30c0151e 	bne	r6,r3,49bd8 <_calloc_r+0xac>
   49b84:	80000415 	stw	zero,16(r16)
   49b88:	80800604 	addi	r2,r16,24
   49b8c:	80000515 	stw	zero,20(r16)
   49b90:	00000106 	br	49b98 <_calloc_r+0x6c>
   49b94:	8005883a 	mov	r2,r16
   49b98:	10000015 	stw	zero,0(r2)
   49b9c:	10000115 	stw	zero,4(r2)
   49ba0:	10000215 	stw	zero,8(r2)
   49ba4:	8005883a 	mov	r2,r16
   49ba8:	dfc00117 	ldw	ra,4(sp)
   49bac:	dc000017 	ldw	r16,0(sp)
   49bb0:	dec00204 	addi	sp,sp,8
   49bb4:	f800283a 	ret
   49bb8:	000b883a 	mov	r5,zero
   49bbc:	8009883a 	mov	r4,r16
   49bc0:	0046ac80 	call	46ac8 <memset>
   49bc4:	8005883a 	mov	r2,r16
   49bc8:	dfc00117 	ldw	ra,4(sp)
   49bcc:	dc000017 	ldw	r16,0(sp)
   49bd0:	dec00204 	addi	sp,sp,8
   49bd4:	f800283a 	ret
   49bd8:	80800404 	addi	r2,r16,16
   49bdc:	003fee06 	br	49b98 <__alt_data_end+0xfffd7b98>
   49be0:	80800204 	addi	r2,r16,8
   49be4:	003fec06 	br	49b98 <__alt_data_end+0xfffd7b98>
   49be8:	0005883a 	mov	r2,zero
   49bec:	003fee06 	br	49ba8 <__alt_data_end+0xfffd7ba8>

00049bf0 <_fclose_r>:
   49bf0:	28003926 	beq	r5,zero,49cd8 <_fclose_r+0xe8>
   49bf4:	defffc04 	addi	sp,sp,-16
   49bf8:	dc400115 	stw	r17,4(sp)
   49bfc:	dc000015 	stw	r16,0(sp)
   49c00:	dfc00315 	stw	ra,12(sp)
   49c04:	dc800215 	stw	r18,8(sp)
   49c08:	2023883a 	mov	r17,r4
   49c0c:	2821883a 	mov	r16,r5
   49c10:	20000226 	beq	r4,zero,49c1c <_fclose_r+0x2c>
   49c14:	20800e17 	ldw	r2,56(r4)
   49c18:	10002726 	beq	r2,zero,49cb8 <_fclose_r+0xc8>
   49c1c:	8080030f 	ldh	r2,12(r16)
   49c20:	1000071e 	bne	r2,zero,49c40 <_fclose_r+0x50>
   49c24:	0005883a 	mov	r2,zero
   49c28:	dfc00317 	ldw	ra,12(sp)
   49c2c:	dc800217 	ldw	r18,8(sp)
   49c30:	dc400117 	ldw	r17,4(sp)
   49c34:	dc000017 	ldw	r16,0(sp)
   49c38:	dec00404 	addi	sp,sp,16
   49c3c:	f800283a 	ret
   49c40:	800b883a 	mov	r5,r16
   49c44:	8809883a 	mov	r4,r17
   49c48:	0044bdc0 	call	44bdc <__sflush_r>
   49c4c:	1025883a 	mov	r18,r2
   49c50:	80800b17 	ldw	r2,44(r16)
   49c54:	10000426 	beq	r2,zero,49c68 <_fclose_r+0x78>
   49c58:	81400717 	ldw	r5,28(r16)
   49c5c:	8809883a 	mov	r4,r17
   49c60:	103ee83a 	callr	r2
   49c64:	10001616 	blt	r2,zero,49cc0 <_fclose_r+0xd0>
   49c68:	8080030b 	ldhu	r2,12(r16)
   49c6c:	1080200c 	andi	r2,r2,128
   49c70:	1000151e 	bne	r2,zero,49cc8 <_fclose_r+0xd8>
   49c74:	81400c17 	ldw	r5,48(r16)
   49c78:	28000526 	beq	r5,zero,49c90 <_fclose_r+0xa0>
   49c7c:	80801004 	addi	r2,r16,64
   49c80:	28800226 	beq	r5,r2,49c8c <_fclose_r+0x9c>
   49c84:	8809883a 	mov	r4,r17
   49c88:	00453480 	call	45348 <_free_r>
   49c8c:	80000c15 	stw	zero,48(r16)
   49c90:	81401117 	ldw	r5,68(r16)
   49c94:	28000326 	beq	r5,zero,49ca4 <_fclose_r+0xb4>
   49c98:	8809883a 	mov	r4,r17
   49c9c:	00453480 	call	45348 <_free_r>
   49ca0:	80001115 	stw	zero,68(r16)
   49ca4:	00451e40 	call	451e4 <__sfp_lock_acquire>
   49ca8:	8000030d 	sth	zero,12(r16)
   49cac:	00451e80 	call	451e8 <__sfp_lock_release>
   49cb0:	9005883a 	mov	r2,r18
   49cb4:	003fdc06 	br	49c28 <__alt_data_end+0xfffd7c28>
   49cb8:	00451d40 	call	451d4 <__sinit>
   49cbc:	003fd706 	br	49c1c <__alt_data_end+0xfffd7c1c>
   49cc0:	04bfffc4 	movi	r18,-1
   49cc4:	003fe806 	br	49c68 <__alt_data_end+0xfffd7c68>
   49cc8:	81400417 	ldw	r5,16(r16)
   49ccc:	8809883a 	mov	r4,r17
   49cd0:	00453480 	call	45348 <_free_r>
   49cd4:	003fe706 	br	49c74 <__alt_data_end+0xfffd7c74>
   49cd8:	0005883a 	mov	r2,zero
   49cdc:	f800283a 	ret

00049ce0 <fclose>:
   49ce0:	00800174 	movhi	r2,5
   49ce4:	10872804 	addi	r2,r2,7328
   49ce8:	200b883a 	mov	r5,r4
   49cec:	11000017 	ldw	r4,0(r2)
   49cf0:	0049bf01 	jmpi	49bf0 <_fclose_r>

00049cf4 <__fputwc>:
   49cf4:	defff804 	addi	sp,sp,-32
   49cf8:	dcc00415 	stw	r19,16(sp)
   49cfc:	dc800315 	stw	r18,12(sp)
   49d00:	dc000115 	stw	r16,4(sp)
   49d04:	dfc00715 	stw	ra,28(sp)
   49d08:	dd400615 	stw	r21,24(sp)
   49d0c:	dd000515 	stw	r20,20(sp)
   49d10:	dc400215 	stw	r17,8(sp)
   49d14:	2027883a 	mov	r19,r4
   49d18:	2825883a 	mov	r18,r5
   49d1c:	3021883a 	mov	r16,r6
   49d20:	0045d240 	call	45d24 <__locale_mb_cur_max>
   49d24:	00c00044 	movi	r3,1
   49d28:	10c03e26 	beq	r2,r3,49e24 <__fputwc+0x130>
   49d2c:	81c01704 	addi	r7,r16,92
   49d30:	900d883a 	mov	r6,r18
   49d34:	d80b883a 	mov	r5,sp
   49d38:	9809883a 	mov	r4,r19
   49d3c:	004a1c40 	call	4a1c4 <_wcrtomb_r>
   49d40:	1029883a 	mov	r20,r2
   49d44:	00bfffc4 	movi	r2,-1
   49d48:	a0802026 	beq	r20,r2,49dcc <__fputwc+0xd8>
   49d4c:	d9400003 	ldbu	r5,0(sp)
   49d50:	a0001c26 	beq	r20,zero,49dc4 <__fputwc+0xd0>
   49d54:	0023883a 	mov	r17,zero
   49d58:	05400284 	movi	r21,10
   49d5c:	00000906 	br	49d84 <__fputwc+0x90>
   49d60:	80800017 	ldw	r2,0(r16)
   49d64:	11400005 	stb	r5,0(r2)
   49d68:	80c00017 	ldw	r3,0(r16)
   49d6c:	18c00044 	addi	r3,r3,1
   49d70:	80c00015 	stw	r3,0(r16)
   49d74:	8c400044 	addi	r17,r17,1
   49d78:	dc45883a 	add	r2,sp,r17
   49d7c:	8d00112e 	bgeu	r17,r20,49dc4 <__fputwc+0xd0>
   49d80:	11400003 	ldbu	r5,0(r2)
   49d84:	80c00217 	ldw	r3,8(r16)
   49d88:	18ffffc4 	addi	r3,r3,-1
   49d8c:	80c00215 	stw	r3,8(r16)
   49d90:	183ff30e 	bge	r3,zero,49d60 <__alt_data_end+0xfffd7d60>
   49d94:	80800617 	ldw	r2,24(r16)
   49d98:	18801916 	blt	r3,r2,49e00 <__fputwc+0x10c>
   49d9c:	80800017 	ldw	r2,0(r16)
   49da0:	11400005 	stb	r5,0(r2)
   49da4:	80800017 	ldw	r2,0(r16)
   49da8:	10c00003 	ldbu	r3,0(r2)
   49dac:	10800044 	addi	r2,r2,1
   49db0:	1d402326 	beq	r3,r21,49e40 <__fputwc+0x14c>
   49db4:	80800015 	stw	r2,0(r16)
   49db8:	8c400044 	addi	r17,r17,1
   49dbc:	dc45883a 	add	r2,sp,r17
   49dc0:	8d3fef36 	bltu	r17,r20,49d80 <__alt_data_end+0xfffd7d80>
   49dc4:	9005883a 	mov	r2,r18
   49dc8:	00000406 	br	49ddc <__fputwc+0xe8>
   49dcc:	80c0030b 	ldhu	r3,12(r16)
   49dd0:	a005883a 	mov	r2,r20
   49dd4:	18c01014 	ori	r3,r3,64
   49dd8:	80c0030d 	sth	r3,12(r16)
   49ddc:	dfc00717 	ldw	ra,28(sp)
   49de0:	dd400617 	ldw	r21,24(sp)
   49de4:	dd000517 	ldw	r20,20(sp)
   49de8:	dcc00417 	ldw	r19,16(sp)
   49dec:	dc800317 	ldw	r18,12(sp)
   49df0:	dc400217 	ldw	r17,8(sp)
   49df4:	dc000117 	ldw	r16,4(sp)
   49df8:	dec00804 	addi	sp,sp,32
   49dfc:	f800283a 	ret
   49e00:	800d883a 	mov	r6,r16
   49e04:	29403fcc 	andi	r5,r5,255
   49e08:	9809883a 	mov	r4,r19
   49e0c:	004a06c0 	call	4a06c <__swbuf_r>
   49e10:	10bfffe0 	cmpeqi	r2,r2,-1
   49e14:	10803fcc 	andi	r2,r2,255
   49e18:	103fd626 	beq	r2,zero,49d74 <__alt_data_end+0xfffd7d74>
   49e1c:	00bfffc4 	movi	r2,-1
   49e20:	003fee06 	br	49ddc <__alt_data_end+0xfffd7ddc>
   49e24:	90ffffc4 	addi	r3,r18,-1
   49e28:	01003f84 	movi	r4,254
   49e2c:	20ffbf36 	bltu	r4,r3,49d2c <__alt_data_end+0xfffd7d2c>
   49e30:	900b883a 	mov	r5,r18
   49e34:	dc800005 	stb	r18,0(sp)
   49e38:	1029883a 	mov	r20,r2
   49e3c:	003fc506 	br	49d54 <__alt_data_end+0xfffd7d54>
   49e40:	800d883a 	mov	r6,r16
   49e44:	a80b883a 	mov	r5,r21
   49e48:	9809883a 	mov	r4,r19
   49e4c:	004a06c0 	call	4a06c <__swbuf_r>
   49e50:	10bfffe0 	cmpeqi	r2,r2,-1
   49e54:	003fef06 	br	49e14 <__alt_data_end+0xfffd7e14>

00049e58 <_fputwc_r>:
   49e58:	3080030b 	ldhu	r2,12(r6)
   49e5c:	10c8000c 	andi	r3,r2,8192
   49e60:	1800051e 	bne	r3,zero,49e78 <_fputwc_r+0x20>
   49e64:	30c01917 	ldw	r3,100(r6)
   49e68:	10880014 	ori	r2,r2,8192
   49e6c:	3080030d 	sth	r2,12(r6)
   49e70:	18880014 	ori	r2,r3,8192
   49e74:	30801915 	stw	r2,100(r6)
   49e78:	0049cf41 	jmpi	49cf4 <__fputwc>

00049e7c <fputwc>:
   49e7c:	00800174 	movhi	r2,5
   49e80:	defffc04 	addi	sp,sp,-16
   49e84:	10872804 	addi	r2,r2,7328
   49e88:	dc000115 	stw	r16,4(sp)
   49e8c:	14000017 	ldw	r16,0(r2)
   49e90:	dc400215 	stw	r17,8(sp)
   49e94:	dfc00315 	stw	ra,12(sp)
   49e98:	2023883a 	mov	r17,r4
   49e9c:	80000226 	beq	r16,zero,49ea8 <fputwc+0x2c>
   49ea0:	80800e17 	ldw	r2,56(r16)
   49ea4:	10001026 	beq	r2,zero,49ee8 <fputwc+0x6c>
   49ea8:	2880030b 	ldhu	r2,12(r5)
   49eac:	10c8000c 	andi	r3,r2,8192
   49eb0:	1800051e 	bne	r3,zero,49ec8 <fputwc+0x4c>
   49eb4:	28c01917 	ldw	r3,100(r5)
   49eb8:	10880014 	ori	r2,r2,8192
   49ebc:	2880030d 	sth	r2,12(r5)
   49ec0:	18880014 	ori	r2,r3,8192
   49ec4:	28801915 	stw	r2,100(r5)
   49ec8:	280d883a 	mov	r6,r5
   49ecc:	8009883a 	mov	r4,r16
   49ed0:	880b883a 	mov	r5,r17
   49ed4:	dfc00317 	ldw	ra,12(sp)
   49ed8:	dc400217 	ldw	r17,8(sp)
   49edc:	dc000117 	ldw	r16,4(sp)
   49ee0:	dec00404 	addi	sp,sp,16
   49ee4:	0049cf41 	jmpi	49cf4 <__fputwc>
   49ee8:	8009883a 	mov	r4,r16
   49eec:	d9400015 	stw	r5,0(sp)
   49ef0:	00451d40 	call	451d4 <__sinit>
   49ef4:	d9400017 	ldw	r5,0(sp)
   49ef8:	003feb06 	br	49ea8 <__alt_data_end+0xfffd7ea8>

00049efc <_fstat_r>:
   49efc:	defffd04 	addi	sp,sp,-12
   49f00:	2805883a 	mov	r2,r5
   49f04:	dc000015 	stw	r16,0(sp)
   49f08:	04000174 	movhi	r16,5
   49f0c:	dc400115 	stw	r17,4(sp)
   49f10:	840df804 	addi	r16,r16,14304
   49f14:	2023883a 	mov	r17,r4
   49f18:	300b883a 	mov	r5,r6
   49f1c:	1009883a 	mov	r4,r2
   49f20:	dfc00215 	stw	ra,8(sp)
   49f24:	80000015 	stw	zero,0(r16)
   49f28:	004d8200 	call	4d820 <fstat>
   49f2c:	00ffffc4 	movi	r3,-1
   49f30:	10c00526 	beq	r2,r3,49f48 <_fstat_r+0x4c>
   49f34:	dfc00217 	ldw	ra,8(sp)
   49f38:	dc400117 	ldw	r17,4(sp)
   49f3c:	dc000017 	ldw	r16,0(sp)
   49f40:	dec00304 	addi	sp,sp,12
   49f44:	f800283a 	ret
   49f48:	80c00017 	ldw	r3,0(r16)
   49f4c:	183ff926 	beq	r3,zero,49f34 <__alt_data_end+0xfffd7f34>
   49f50:	88c00015 	stw	r3,0(r17)
   49f54:	003ff706 	br	49f34 <__alt_data_end+0xfffd7f34>

00049f58 <_isatty_r>:
   49f58:	defffd04 	addi	sp,sp,-12
   49f5c:	dc000015 	stw	r16,0(sp)
   49f60:	04000174 	movhi	r16,5
   49f64:	dc400115 	stw	r17,4(sp)
   49f68:	840df804 	addi	r16,r16,14304
   49f6c:	2023883a 	mov	r17,r4
   49f70:	2809883a 	mov	r4,r5
   49f74:	dfc00215 	stw	ra,8(sp)
   49f78:	80000015 	stw	zero,0(r16)
   49f7c:	004d90c0 	call	4d90c <isatty>
   49f80:	00ffffc4 	movi	r3,-1
   49f84:	10c00526 	beq	r2,r3,49f9c <_isatty_r+0x44>
   49f88:	dfc00217 	ldw	ra,8(sp)
   49f8c:	dc400117 	ldw	r17,4(sp)
   49f90:	dc000017 	ldw	r16,0(sp)
   49f94:	dec00304 	addi	sp,sp,12
   49f98:	f800283a 	ret
   49f9c:	80c00017 	ldw	r3,0(r16)
   49fa0:	183ff926 	beq	r3,zero,49f88 <__alt_data_end+0xfffd7f88>
   49fa4:	88c00015 	stw	r3,0(r17)
   49fa8:	003ff706 	br	49f88 <__alt_data_end+0xfffd7f88>

00049fac <_lseek_r>:
   49fac:	defffd04 	addi	sp,sp,-12
   49fb0:	2805883a 	mov	r2,r5
   49fb4:	dc000015 	stw	r16,0(sp)
   49fb8:	04000174 	movhi	r16,5
   49fbc:	dc400115 	stw	r17,4(sp)
   49fc0:	300b883a 	mov	r5,r6
   49fc4:	840df804 	addi	r16,r16,14304
   49fc8:	2023883a 	mov	r17,r4
   49fcc:	380d883a 	mov	r6,r7
   49fd0:	1009883a 	mov	r4,r2
   49fd4:	dfc00215 	stw	ra,8(sp)
   49fd8:	80000015 	stw	zero,0(r16)
   49fdc:	004dad80 	call	4dad8 <lseek>
   49fe0:	00ffffc4 	movi	r3,-1
   49fe4:	10c00526 	beq	r2,r3,49ffc <_lseek_r+0x50>
   49fe8:	dfc00217 	ldw	ra,8(sp)
   49fec:	dc400117 	ldw	r17,4(sp)
   49ff0:	dc000017 	ldw	r16,0(sp)
   49ff4:	dec00304 	addi	sp,sp,12
   49ff8:	f800283a 	ret
   49ffc:	80c00017 	ldw	r3,0(r16)
   4a000:	183ff926 	beq	r3,zero,49fe8 <__alt_data_end+0xfffd7fe8>
   4a004:	88c00015 	stw	r3,0(r17)
   4a008:	003ff706 	br	49fe8 <__alt_data_end+0xfffd7fe8>

0004a00c <_read_r>:
   4a00c:	defffd04 	addi	sp,sp,-12
   4a010:	2805883a 	mov	r2,r5
   4a014:	dc000015 	stw	r16,0(sp)
   4a018:	04000174 	movhi	r16,5
   4a01c:	dc400115 	stw	r17,4(sp)
   4a020:	300b883a 	mov	r5,r6
   4a024:	840df804 	addi	r16,r16,14304
   4a028:	2023883a 	mov	r17,r4
   4a02c:	380d883a 	mov	r6,r7
   4a030:	1009883a 	mov	r4,r2
   4a034:	dfc00215 	stw	ra,8(sp)
   4a038:	80000015 	stw	zero,0(r16)
   4a03c:	004dcac0 	call	4dcac <read>
   4a040:	00ffffc4 	movi	r3,-1
   4a044:	10c00526 	beq	r2,r3,4a05c <_read_r+0x50>
   4a048:	dfc00217 	ldw	ra,8(sp)
   4a04c:	dc400117 	ldw	r17,4(sp)
   4a050:	dc000017 	ldw	r16,0(sp)
   4a054:	dec00304 	addi	sp,sp,12
   4a058:	f800283a 	ret
   4a05c:	80c00017 	ldw	r3,0(r16)
   4a060:	183ff926 	beq	r3,zero,4a048 <__alt_data_end+0xfffd8048>
   4a064:	88c00015 	stw	r3,0(r17)
   4a068:	003ff706 	br	4a048 <__alt_data_end+0xfffd8048>

0004a06c <__swbuf_r>:
   4a06c:	defffb04 	addi	sp,sp,-20
   4a070:	dcc00315 	stw	r19,12(sp)
   4a074:	dc800215 	stw	r18,8(sp)
   4a078:	dc000015 	stw	r16,0(sp)
   4a07c:	dfc00415 	stw	ra,16(sp)
   4a080:	dc400115 	stw	r17,4(sp)
   4a084:	2025883a 	mov	r18,r4
   4a088:	2827883a 	mov	r19,r5
   4a08c:	3021883a 	mov	r16,r6
   4a090:	20000226 	beq	r4,zero,4a09c <__swbuf_r+0x30>
   4a094:	20800e17 	ldw	r2,56(r4)
   4a098:	10004226 	beq	r2,zero,4a1a4 <__swbuf_r+0x138>
   4a09c:	80800617 	ldw	r2,24(r16)
   4a0a0:	8100030b 	ldhu	r4,12(r16)
   4a0a4:	80800215 	stw	r2,8(r16)
   4a0a8:	2080020c 	andi	r2,r4,8
   4a0ac:	10003626 	beq	r2,zero,4a188 <__swbuf_r+0x11c>
   4a0b0:	80c00417 	ldw	r3,16(r16)
   4a0b4:	18003426 	beq	r3,zero,4a188 <__swbuf_r+0x11c>
   4a0b8:	2088000c 	andi	r2,r4,8192
   4a0bc:	9c403fcc 	andi	r17,r19,255
   4a0c0:	10001a26 	beq	r2,zero,4a12c <__swbuf_r+0xc0>
   4a0c4:	80800017 	ldw	r2,0(r16)
   4a0c8:	81000517 	ldw	r4,20(r16)
   4a0cc:	10c7c83a 	sub	r3,r2,r3
   4a0d0:	1900200e 	bge	r3,r4,4a154 <__swbuf_r+0xe8>
   4a0d4:	18c00044 	addi	r3,r3,1
   4a0d8:	81000217 	ldw	r4,8(r16)
   4a0dc:	11400044 	addi	r5,r2,1
   4a0e0:	81400015 	stw	r5,0(r16)
   4a0e4:	213fffc4 	addi	r4,r4,-1
   4a0e8:	81000215 	stw	r4,8(r16)
   4a0ec:	14c00005 	stb	r19,0(r2)
   4a0f0:	80800517 	ldw	r2,20(r16)
   4a0f4:	10c01e26 	beq	r2,r3,4a170 <__swbuf_r+0x104>
   4a0f8:	8080030b 	ldhu	r2,12(r16)
   4a0fc:	1080004c 	andi	r2,r2,1
   4a100:	10000226 	beq	r2,zero,4a10c <__swbuf_r+0xa0>
   4a104:	00800284 	movi	r2,10
   4a108:	88801926 	beq	r17,r2,4a170 <__swbuf_r+0x104>
   4a10c:	8805883a 	mov	r2,r17
   4a110:	dfc00417 	ldw	ra,16(sp)
   4a114:	dcc00317 	ldw	r19,12(sp)
   4a118:	dc800217 	ldw	r18,8(sp)
   4a11c:	dc400117 	ldw	r17,4(sp)
   4a120:	dc000017 	ldw	r16,0(sp)
   4a124:	dec00504 	addi	sp,sp,20
   4a128:	f800283a 	ret
   4a12c:	81401917 	ldw	r5,100(r16)
   4a130:	00b7ffc4 	movi	r2,-8193
   4a134:	21080014 	ori	r4,r4,8192
   4a138:	2884703a 	and	r2,r5,r2
   4a13c:	80801915 	stw	r2,100(r16)
   4a140:	80800017 	ldw	r2,0(r16)
   4a144:	8100030d 	sth	r4,12(r16)
   4a148:	81000517 	ldw	r4,20(r16)
   4a14c:	10c7c83a 	sub	r3,r2,r3
   4a150:	193fe016 	blt	r3,r4,4a0d4 <__alt_data_end+0xfffd80d4>
   4a154:	800b883a 	mov	r5,r16
   4a158:	9009883a 	mov	r4,r18
   4a15c:	0044df80 	call	44df8 <_fflush_r>
   4a160:	1000071e 	bne	r2,zero,4a180 <__swbuf_r+0x114>
   4a164:	80800017 	ldw	r2,0(r16)
   4a168:	00c00044 	movi	r3,1
   4a16c:	003fda06 	br	4a0d8 <__alt_data_end+0xfffd80d8>
   4a170:	800b883a 	mov	r5,r16
   4a174:	9009883a 	mov	r4,r18
   4a178:	0044df80 	call	44df8 <_fflush_r>
   4a17c:	103fe326 	beq	r2,zero,4a10c <__alt_data_end+0xfffd810c>
   4a180:	00bfffc4 	movi	r2,-1
   4a184:	003fe206 	br	4a110 <__alt_data_end+0xfffd8110>
   4a188:	800b883a 	mov	r5,r16
   4a18c:	9009883a 	mov	r4,r18
   4a190:	00430800 	call	43080 <__swsetup_r>
   4a194:	103ffa1e 	bne	r2,zero,4a180 <__alt_data_end+0xfffd8180>
   4a198:	8100030b 	ldhu	r4,12(r16)
   4a19c:	80c00417 	ldw	r3,16(r16)
   4a1a0:	003fc506 	br	4a0b8 <__alt_data_end+0xfffd80b8>
   4a1a4:	00451d40 	call	451d4 <__sinit>
   4a1a8:	003fbc06 	br	4a09c <__alt_data_end+0xfffd809c>

0004a1ac <__swbuf>:
   4a1ac:	00800174 	movhi	r2,5
   4a1b0:	10872804 	addi	r2,r2,7328
   4a1b4:	280d883a 	mov	r6,r5
   4a1b8:	200b883a 	mov	r5,r4
   4a1bc:	11000017 	ldw	r4,0(r2)
   4a1c0:	004a06c1 	jmpi	4a06c <__swbuf_r>

0004a1c4 <_wcrtomb_r>:
   4a1c4:	defff604 	addi	sp,sp,-40
   4a1c8:	00800174 	movhi	r2,5
   4a1cc:	dc800815 	stw	r18,32(sp)
   4a1d0:	dc400715 	stw	r17,28(sp)
   4a1d4:	dc000615 	stw	r16,24(sp)
   4a1d8:	10872c04 	addi	r2,r2,7344
   4a1dc:	dfc00915 	stw	ra,36(sp)
   4a1e0:	2021883a 	mov	r16,r4
   4a1e4:	3823883a 	mov	r17,r7
   4a1e8:	14800017 	ldw	r18,0(r2)
   4a1ec:	28001426 	beq	r5,zero,4a240 <_wcrtomb_r+0x7c>
   4a1f0:	d9400415 	stw	r5,16(sp)
   4a1f4:	d9800515 	stw	r6,20(sp)
   4a1f8:	0045d180 	call	45d18 <__locale_charset>
   4a1fc:	d9800517 	ldw	r6,20(sp)
   4a200:	d9400417 	ldw	r5,16(sp)
   4a204:	100f883a 	mov	r7,r2
   4a208:	dc400015 	stw	r17,0(sp)
   4a20c:	8009883a 	mov	r4,r16
   4a210:	903ee83a 	callr	r18
   4a214:	00ffffc4 	movi	r3,-1
   4a218:	10c0031e 	bne	r2,r3,4a228 <_wcrtomb_r+0x64>
   4a21c:	88000015 	stw	zero,0(r17)
   4a220:	00c02284 	movi	r3,138
   4a224:	80c00015 	stw	r3,0(r16)
   4a228:	dfc00917 	ldw	ra,36(sp)
   4a22c:	dc800817 	ldw	r18,32(sp)
   4a230:	dc400717 	ldw	r17,28(sp)
   4a234:	dc000617 	ldw	r16,24(sp)
   4a238:	dec00a04 	addi	sp,sp,40
   4a23c:	f800283a 	ret
   4a240:	0045d180 	call	45d18 <__locale_charset>
   4a244:	100f883a 	mov	r7,r2
   4a248:	dc400015 	stw	r17,0(sp)
   4a24c:	000d883a 	mov	r6,zero
   4a250:	d9400104 	addi	r5,sp,4
   4a254:	8009883a 	mov	r4,r16
   4a258:	903ee83a 	callr	r18
   4a25c:	003fed06 	br	4a214 <__alt_data_end+0xfffd8214>

0004a260 <wcrtomb>:
   4a260:	defff604 	addi	sp,sp,-40
   4a264:	00800174 	movhi	r2,5
   4a268:	dc800615 	stw	r18,24(sp)
   4a26c:	dc400515 	stw	r17,20(sp)
   4a270:	10872804 	addi	r2,r2,7328
   4a274:	dfc00915 	stw	ra,36(sp)
   4a278:	dd000815 	stw	r20,32(sp)
   4a27c:	dcc00715 	stw	r19,28(sp)
   4a280:	dc000415 	stw	r16,16(sp)
   4a284:	3025883a 	mov	r18,r6
   4a288:	14400017 	ldw	r17,0(r2)
   4a28c:	20001926 	beq	r4,zero,4a2f4 <wcrtomb+0x94>
   4a290:	00800174 	movhi	r2,5
   4a294:	10872c04 	addi	r2,r2,7344
   4a298:	15000017 	ldw	r20,0(r2)
   4a29c:	2021883a 	mov	r16,r4
   4a2a0:	2827883a 	mov	r19,r5
   4a2a4:	0045d180 	call	45d18 <__locale_charset>
   4a2a8:	100f883a 	mov	r7,r2
   4a2ac:	dc800015 	stw	r18,0(sp)
   4a2b0:	980d883a 	mov	r6,r19
   4a2b4:	800b883a 	mov	r5,r16
   4a2b8:	8809883a 	mov	r4,r17
   4a2bc:	a03ee83a 	callr	r20
   4a2c0:	00ffffc4 	movi	r3,-1
   4a2c4:	10c0031e 	bne	r2,r3,4a2d4 <wcrtomb+0x74>
   4a2c8:	90000015 	stw	zero,0(r18)
   4a2cc:	00c02284 	movi	r3,138
   4a2d0:	88c00015 	stw	r3,0(r17)
   4a2d4:	dfc00917 	ldw	ra,36(sp)
   4a2d8:	dd000817 	ldw	r20,32(sp)
   4a2dc:	dcc00717 	ldw	r19,28(sp)
   4a2e0:	dc800617 	ldw	r18,24(sp)
   4a2e4:	dc400517 	ldw	r17,20(sp)
   4a2e8:	dc000417 	ldw	r16,16(sp)
   4a2ec:	dec00a04 	addi	sp,sp,40
   4a2f0:	f800283a 	ret
   4a2f4:	00800174 	movhi	r2,5
   4a2f8:	10872c04 	addi	r2,r2,7344
   4a2fc:	14000017 	ldw	r16,0(r2)
   4a300:	0045d180 	call	45d18 <__locale_charset>
   4a304:	100f883a 	mov	r7,r2
   4a308:	dc800015 	stw	r18,0(sp)
   4a30c:	000d883a 	mov	r6,zero
   4a310:	d9400104 	addi	r5,sp,4
   4a314:	8809883a 	mov	r4,r17
   4a318:	803ee83a 	callr	r16
   4a31c:	003fe806 	br	4a2c0 <__alt_data_end+0xfffd82c0>

0004a320 <__ascii_wctomb>:
   4a320:	28000526 	beq	r5,zero,4a338 <__ascii_wctomb+0x18>
   4a324:	00803fc4 	movi	r2,255
   4a328:	11800536 	bltu	r2,r6,4a340 <__ascii_wctomb+0x20>
   4a32c:	29800005 	stb	r6,0(r5)
   4a330:	00800044 	movi	r2,1
   4a334:	f800283a 	ret
   4a338:	0005883a 	mov	r2,zero
   4a33c:	f800283a 	ret
   4a340:	00802284 	movi	r2,138
   4a344:	20800015 	stw	r2,0(r4)
   4a348:	00bfffc4 	movi	r2,-1
   4a34c:	f800283a 	ret

0004a350 <_wctomb_r>:
   4a350:	00800174 	movhi	r2,5
   4a354:	defff904 	addi	sp,sp,-28
   4a358:	10872c04 	addi	r2,r2,7344
   4a35c:	dfc00615 	stw	ra,24(sp)
   4a360:	dc400515 	stw	r17,20(sp)
   4a364:	dc000415 	stw	r16,16(sp)
   4a368:	3823883a 	mov	r17,r7
   4a36c:	14000017 	ldw	r16,0(r2)
   4a370:	d9000115 	stw	r4,4(sp)
   4a374:	d9400215 	stw	r5,8(sp)
   4a378:	d9800315 	stw	r6,12(sp)
   4a37c:	0045d180 	call	45d18 <__locale_charset>
   4a380:	d9800317 	ldw	r6,12(sp)
   4a384:	d9400217 	ldw	r5,8(sp)
   4a388:	d9000117 	ldw	r4,4(sp)
   4a38c:	100f883a 	mov	r7,r2
   4a390:	dc400015 	stw	r17,0(sp)
   4a394:	803ee83a 	callr	r16
   4a398:	dfc00617 	ldw	ra,24(sp)
   4a39c:	dc400517 	ldw	r17,20(sp)
   4a3a0:	dc000417 	ldw	r16,16(sp)
   4a3a4:	dec00704 	addi	sp,sp,28
   4a3a8:	f800283a 	ret

0004a3ac <__udivdi3>:
   4a3ac:	defff504 	addi	sp,sp,-44
   4a3b0:	dcc00415 	stw	r19,16(sp)
   4a3b4:	dc000115 	stw	r16,4(sp)
   4a3b8:	dfc00a15 	stw	ra,40(sp)
   4a3bc:	df000915 	stw	fp,36(sp)
   4a3c0:	ddc00815 	stw	r23,32(sp)
   4a3c4:	dd800715 	stw	r22,28(sp)
   4a3c8:	dd400615 	stw	r21,24(sp)
   4a3cc:	dd000515 	stw	r20,20(sp)
   4a3d0:	dc800315 	stw	r18,12(sp)
   4a3d4:	dc400215 	stw	r17,8(sp)
   4a3d8:	2027883a 	mov	r19,r4
   4a3dc:	2821883a 	mov	r16,r5
   4a3e0:	3800411e 	bne	r7,zero,4a4e8 <__udivdi3+0x13c>
   4a3e4:	3023883a 	mov	r17,r6
   4a3e8:	2025883a 	mov	r18,r4
   4a3ec:	2980522e 	bgeu	r5,r6,4a538 <__udivdi3+0x18c>
   4a3f0:	00bfffd4 	movui	r2,65535
   4a3f4:	282d883a 	mov	r22,r5
   4a3f8:	1180a836 	bltu	r2,r6,4a69c <__udivdi3+0x2f0>
   4a3fc:	00803fc4 	movi	r2,255
   4a400:	1185803a 	cmpltu	r2,r2,r6
   4a404:	100490fa 	slli	r2,r2,3
   4a408:	3086d83a 	srl	r3,r6,r2
   4a40c:	01000174 	movhi	r4,5
   4a410:	21003104 	addi	r4,r4,196
   4a414:	20c7883a 	add	r3,r4,r3
   4a418:	18c00003 	ldbu	r3,0(r3)
   4a41c:	1885883a 	add	r2,r3,r2
   4a420:	00c00804 	movi	r3,32
   4a424:	1887c83a 	sub	r3,r3,r2
   4a428:	18000526 	beq	r3,zero,4a440 <__udivdi3+0x94>
   4a42c:	80e0983a 	sll	r16,r16,r3
   4a430:	9884d83a 	srl	r2,r19,r2
   4a434:	30e2983a 	sll	r17,r6,r3
   4a438:	98e4983a 	sll	r18,r19,r3
   4a43c:	142cb03a 	or	r22,r2,r16
   4a440:	882ad43a 	srli	r21,r17,16
   4a444:	b009883a 	mov	r4,r22
   4a448:	8d3fffcc 	andi	r20,r17,65535
   4a44c:	a80b883a 	mov	r5,r21
   4a450:	004afb80 	call	4afb8 <__umodsi3>
   4a454:	b009883a 	mov	r4,r22
   4a458:	a80b883a 	mov	r5,r21
   4a45c:	1027883a 	mov	r19,r2
   4a460:	004af540 	call	4af54 <__udivsi3>
   4a464:	102d883a 	mov	r22,r2
   4a468:	9826943a 	slli	r19,r19,16
   4a46c:	9004d43a 	srli	r2,r18,16
   4a470:	a5a1383a 	mul	r16,r20,r22
   4a474:	14c4b03a 	or	r2,r2,r19
   4a478:	1400052e 	bgeu	r2,r16,4a490 <__udivdi3+0xe4>
   4a47c:	1445883a 	add	r2,r2,r17
   4a480:	b0ffffc4 	addi	r3,r22,-1
   4a484:	14400136 	bltu	r2,r17,4a48c <__udivdi3+0xe0>
   4a488:	14012336 	bltu	r2,r16,4a918 <__udivdi3+0x56c>
   4a48c:	182d883a 	mov	r22,r3
   4a490:	1421c83a 	sub	r16,r2,r16
   4a494:	a80b883a 	mov	r5,r21
   4a498:	8009883a 	mov	r4,r16
   4a49c:	004afb80 	call	4afb8 <__umodsi3>
   4a4a0:	1027883a 	mov	r19,r2
   4a4a4:	a80b883a 	mov	r5,r21
   4a4a8:	8009883a 	mov	r4,r16
   4a4ac:	004af540 	call	4af54 <__udivsi3>
   4a4b0:	9826943a 	slli	r19,r19,16
   4a4b4:	a0a9383a 	mul	r20,r20,r2
   4a4b8:	94bfffcc 	andi	r18,r18,65535
   4a4bc:	94e4b03a 	or	r18,r18,r19
   4a4c0:	9500052e 	bgeu	r18,r20,4a4d8 <__udivdi3+0x12c>
   4a4c4:	8ca5883a 	add	r18,r17,r18
   4a4c8:	10ffffc4 	addi	r3,r2,-1
   4a4cc:	9440f136 	bltu	r18,r17,4a894 <__udivdi3+0x4e8>
   4a4d0:	9500f02e 	bgeu	r18,r20,4a894 <__udivdi3+0x4e8>
   4a4d4:	10bfff84 	addi	r2,r2,-2
   4a4d8:	b00c943a 	slli	r6,r22,16
   4a4dc:	0007883a 	mov	r3,zero
   4a4e0:	3084b03a 	or	r2,r6,r2
   4a4e4:	00005906 	br	4a64c <__udivdi3+0x2a0>
   4a4e8:	29c05636 	bltu	r5,r7,4a644 <__udivdi3+0x298>
   4a4ec:	00bfffd4 	movui	r2,65535
   4a4f0:	11c0622e 	bgeu	r2,r7,4a67c <__udivdi3+0x2d0>
   4a4f4:	00804034 	movhi	r2,256
   4a4f8:	10bfffc4 	addi	r2,r2,-1
   4a4fc:	11c0ee36 	bltu	r2,r7,4a8b8 <__udivdi3+0x50c>
   4a500:	00800404 	movi	r2,16
   4a504:	3886d83a 	srl	r3,r7,r2
   4a508:	01000174 	movhi	r4,5
   4a50c:	21003104 	addi	r4,r4,196
   4a510:	20c7883a 	add	r3,r4,r3
   4a514:	18c00003 	ldbu	r3,0(r3)
   4a518:	05400804 	movi	r21,32
   4a51c:	1885883a 	add	r2,r3,r2
   4a520:	a8abc83a 	sub	r21,r21,r2
   4a524:	a800621e 	bne	r21,zero,4a6b0 <__udivdi3+0x304>
   4a528:	3c00e936 	bltu	r7,r16,4a8d0 <__udivdi3+0x524>
   4a52c:	9985403a 	cmpgeu	r2,r19,r6
   4a530:	0007883a 	mov	r3,zero
   4a534:	00004506 	br	4a64c <__udivdi3+0x2a0>
   4a538:	3000041e 	bne	r6,zero,4a54c <__udivdi3+0x1a0>
   4a53c:	000b883a 	mov	r5,zero
   4a540:	01000044 	movi	r4,1
   4a544:	004af540 	call	4af54 <__udivsi3>
   4a548:	1023883a 	mov	r17,r2
   4a54c:	00bfffd4 	movui	r2,65535
   4a550:	14404e2e 	bgeu	r2,r17,4a68c <__udivdi3+0x2e0>
   4a554:	00804034 	movhi	r2,256
   4a558:	10bfffc4 	addi	r2,r2,-1
   4a55c:	1440d836 	bltu	r2,r17,4a8c0 <__udivdi3+0x514>
   4a560:	00800404 	movi	r2,16
   4a564:	8886d83a 	srl	r3,r17,r2
   4a568:	01000174 	movhi	r4,5
   4a56c:	21003104 	addi	r4,r4,196
   4a570:	20c7883a 	add	r3,r4,r3
   4a574:	18c00003 	ldbu	r3,0(r3)
   4a578:	1885883a 	add	r2,r3,r2
   4a57c:	00c00804 	movi	r3,32
   4a580:	1887c83a 	sub	r3,r3,r2
   4a584:	18008f1e 	bne	r3,zero,4a7c4 <__udivdi3+0x418>
   4a588:	882ad43a 	srli	r21,r17,16
   4a58c:	8461c83a 	sub	r16,r16,r17
   4a590:	8d3fffcc 	andi	r20,r17,65535
   4a594:	00c00044 	movi	r3,1
   4a598:	8009883a 	mov	r4,r16
   4a59c:	a80b883a 	mov	r5,r21
   4a5a0:	d8c00015 	stw	r3,0(sp)
   4a5a4:	004afb80 	call	4afb8 <__umodsi3>
   4a5a8:	8009883a 	mov	r4,r16
   4a5ac:	a80b883a 	mov	r5,r21
   4a5b0:	1027883a 	mov	r19,r2
   4a5b4:	004af540 	call	4af54 <__udivsi3>
   4a5b8:	9826943a 	slli	r19,r19,16
   4a5bc:	9008d43a 	srli	r4,r18,16
   4a5c0:	1521383a 	mul	r16,r2,r20
   4a5c4:	102d883a 	mov	r22,r2
   4a5c8:	24c8b03a 	or	r4,r4,r19
   4a5cc:	d8c00017 	ldw	r3,0(sp)
   4a5d0:	2400052e 	bgeu	r4,r16,4a5e8 <__udivdi3+0x23c>
   4a5d4:	2449883a 	add	r4,r4,r17
   4a5d8:	b0bfffc4 	addi	r2,r22,-1
   4a5dc:	24400136 	bltu	r4,r17,4a5e4 <__udivdi3+0x238>
   4a5e0:	2400ca36 	bltu	r4,r16,4a90c <__udivdi3+0x560>
   4a5e4:	102d883a 	mov	r22,r2
   4a5e8:	2421c83a 	sub	r16,r4,r16
   4a5ec:	a80b883a 	mov	r5,r21
   4a5f0:	8009883a 	mov	r4,r16
   4a5f4:	d8c00015 	stw	r3,0(sp)
   4a5f8:	004afb80 	call	4afb8 <__umodsi3>
   4a5fc:	1027883a 	mov	r19,r2
   4a600:	a80b883a 	mov	r5,r21
   4a604:	8009883a 	mov	r4,r16
   4a608:	004af540 	call	4af54 <__udivsi3>
   4a60c:	9826943a 	slli	r19,r19,16
   4a610:	1529383a 	mul	r20,r2,r20
   4a614:	94bfffcc 	andi	r18,r18,65535
   4a618:	94e4b03a 	or	r18,r18,r19
   4a61c:	d8c00017 	ldw	r3,0(sp)
   4a620:	9500052e 	bgeu	r18,r20,4a638 <__udivdi3+0x28c>
   4a624:	8ca5883a 	add	r18,r17,r18
   4a628:	113fffc4 	addi	r4,r2,-1
   4a62c:	94409736 	bltu	r18,r17,4a88c <__udivdi3+0x4e0>
   4a630:	9500962e 	bgeu	r18,r20,4a88c <__udivdi3+0x4e0>
   4a634:	10bfff84 	addi	r2,r2,-2
   4a638:	b00c943a 	slli	r6,r22,16
   4a63c:	3084b03a 	or	r2,r6,r2
   4a640:	00000206 	br	4a64c <__udivdi3+0x2a0>
   4a644:	0007883a 	mov	r3,zero
   4a648:	0005883a 	mov	r2,zero
   4a64c:	dfc00a17 	ldw	ra,40(sp)
   4a650:	df000917 	ldw	fp,36(sp)
   4a654:	ddc00817 	ldw	r23,32(sp)
   4a658:	dd800717 	ldw	r22,28(sp)
   4a65c:	dd400617 	ldw	r21,24(sp)
   4a660:	dd000517 	ldw	r20,20(sp)
   4a664:	dcc00417 	ldw	r19,16(sp)
   4a668:	dc800317 	ldw	r18,12(sp)
   4a66c:	dc400217 	ldw	r17,8(sp)
   4a670:	dc000117 	ldw	r16,4(sp)
   4a674:	dec00b04 	addi	sp,sp,44
   4a678:	f800283a 	ret
   4a67c:	00803fc4 	movi	r2,255
   4a680:	11c5803a 	cmpltu	r2,r2,r7
   4a684:	100490fa 	slli	r2,r2,3
   4a688:	003f9e06 	br	4a504 <__alt_data_end+0xfffd8504>
   4a68c:	00803fc4 	movi	r2,255
   4a690:	1445803a 	cmpltu	r2,r2,r17
   4a694:	100490fa 	slli	r2,r2,3
   4a698:	003fb206 	br	4a564 <__alt_data_end+0xfffd8564>
   4a69c:	00804034 	movhi	r2,256
   4a6a0:	10bfffc4 	addi	r2,r2,-1
   4a6a4:	11808836 	bltu	r2,r6,4a8c8 <__udivdi3+0x51c>
   4a6a8:	00800404 	movi	r2,16
   4a6ac:	003f5606 	br	4a408 <__alt_data_end+0xfffd8408>
   4a6b0:	30aed83a 	srl	r23,r6,r2
   4a6b4:	3d4e983a 	sll	r7,r7,r21
   4a6b8:	80acd83a 	srl	r22,r16,r2
   4a6bc:	9884d83a 	srl	r2,r19,r2
   4a6c0:	3deeb03a 	or	r23,r7,r23
   4a6c4:	b824d43a 	srli	r18,r23,16
   4a6c8:	8560983a 	sll	r16,r16,r21
   4a6cc:	b009883a 	mov	r4,r22
   4a6d0:	900b883a 	mov	r5,r18
   4a6d4:	3568983a 	sll	r20,r6,r21
   4a6d8:	1420b03a 	or	r16,r2,r16
   4a6dc:	004afb80 	call	4afb8 <__umodsi3>
   4a6e0:	b009883a 	mov	r4,r22
   4a6e4:	900b883a 	mov	r5,r18
   4a6e8:	1023883a 	mov	r17,r2
   4a6ec:	004af540 	call	4af54 <__udivsi3>
   4a6f0:	8808943a 	slli	r4,r17,16
   4a6f4:	bf3fffcc 	andi	fp,r23,65535
   4a6f8:	8006d43a 	srli	r3,r16,16
   4a6fc:	e0a3383a 	mul	r17,fp,r2
   4a700:	100d883a 	mov	r6,r2
   4a704:	1906b03a 	or	r3,r3,r4
   4a708:	1c40042e 	bgeu	r3,r17,4a71c <__udivdi3+0x370>
   4a70c:	1dc7883a 	add	r3,r3,r23
   4a710:	10bfffc4 	addi	r2,r2,-1
   4a714:	1dc0752e 	bgeu	r3,r23,4a8ec <__udivdi3+0x540>
   4a718:	100d883a 	mov	r6,r2
   4a71c:	1c63c83a 	sub	r17,r3,r17
   4a720:	900b883a 	mov	r5,r18
   4a724:	8809883a 	mov	r4,r17
   4a728:	d9800015 	stw	r6,0(sp)
   4a72c:	004afb80 	call	4afb8 <__umodsi3>
   4a730:	102d883a 	mov	r22,r2
   4a734:	8809883a 	mov	r4,r17
   4a738:	900b883a 	mov	r5,r18
   4a73c:	004af540 	call	4af54 <__udivsi3>
   4a740:	b02c943a 	slli	r22,r22,16
   4a744:	e089383a 	mul	r4,fp,r2
   4a748:	843fffcc 	andi	r16,r16,65535
   4a74c:	85a0b03a 	or	r16,r16,r22
   4a750:	d9800017 	ldw	r6,0(sp)
   4a754:	8100042e 	bgeu	r16,r4,4a768 <__udivdi3+0x3bc>
   4a758:	85e1883a 	add	r16,r16,r23
   4a75c:	10ffffc4 	addi	r3,r2,-1
   4a760:	85c05e2e 	bgeu	r16,r23,4a8dc <__udivdi3+0x530>
   4a764:	1805883a 	mov	r2,r3
   4a768:	300c943a 	slli	r6,r6,16
   4a76c:	a17fffcc 	andi	r5,r20,65535
   4a770:	a028d43a 	srli	r20,r20,16
   4a774:	3084b03a 	or	r2,r6,r2
   4a778:	10ffffcc 	andi	r3,r2,65535
   4a77c:	100cd43a 	srli	r6,r2,16
   4a780:	194f383a 	mul	r7,r3,r5
   4a784:	1d07383a 	mul	r3,r3,r20
   4a788:	314b383a 	mul	r5,r6,r5
   4a78c:	3810d43a 	srli	r8,r7,16
   4a790:	8121c83a 	sub	r16,r16,r4
   4a794:	1947883a 	add	r3,r3,r5
   4a798:	40c7883a 	add	r3,r8,r3
   4a79c:	350d383a 	mul	r6,r6,r20
   4a7a0:	1940022e 	bgeu	r3,r5,4a7ac <__udivdi3+0x400>
   4a7a4:	01000074 	movhi	r4,1
   4a7a8:	310d883a 	add	r6,r6,r4
   4a7ac:	1828d43a 	srli	r20,r3,16
   4a7b0:	a18d883a 	add	r6,r20,r6
   4a7b4:	81803e36 	bltu	r16,r6,4a8b0 <__udivdi3+0x504>
   4a7b8:	81803826 	beq	r16,r6,4a89c <__udivdi3+0x4f0>
   4a7bc:	0007883a 	mov	r3,zero
   4a7c0:	003fa206 	br	4a64c <__alt_data_end+0xfffd864c>
   4a7c4:	88e2983a 	sll	r17,r17,r3
   4a7c8:	80a8d83a 	srl	r20,r16,r2
   4a7cc:	80e0983a 	sll	r16,r16,r3
   4a7d0:	882ad43a 	srli	r21,r17,16
   4a7d4:	9884d83a 	srl	r2,r19,r2
   4a7d8:	a009883a 	mov	r4,r20
   4a7dc:	a80b883a 	mov	r5,r21
   4a7e0:	142eb03a 	or	r23,r2,r16
   4a7e4:	98e4983a 	sll	r18,r19,r3
   4a7e8:	004afb80 	call	4afb8 <__umodsi3>
   4a7ec:	a009883a 	mov	r4,r20
   4a7f0:	a80b883a 	mov	r5,r21
   4a7f4:	1021883a 	mov	r16,r2
   4a7f8:	004af540 	call	4af54 <__udivsi3>
   4a7fc:	1039883a 	mov	fp,r2
   4a800:	8d3fffcc 	andi	r20,r17,65535
   4a804:	8020943a 	slli	r16,r16,16
   4a808:	b804d43a 	srli	r2,r23,16
   4a80c:	a72d383a 	mul	r22,r20,fp
   4a810:	1404b03a 	or	r2,r2,r16
   4a814:	1580062e 	bgeu	r2,r22,4a830 <__udivdi3+0x484>
   4a818:	1445883a 	add	r2,r2,r17
   4a81c:	e0ffffc4 	addi	r3,fp,-1
   4a820:	14403836 	bltu	r2,r17,4a904 <__udivdi3+0x558>
   4a824:	1580372e 	bgeu	r2,r22,4a904 <__udivdi3+0x558>
   4a828:	e73fff84 	addi	fp,fp,-2
   4a82c:	1445883a 	add	r2,r2,r17
   4a830:	15adc83a 	sub	r22,r2,r22
   4a834:	a80b883a 	mov	r5,r21
   4a838:	b009883a 	mov	r4,r22
   4a83c:	004afb80 	call	4afb8 <__umodsi3>
   4a840:	1027883a 	mov	r19,r2
   4a844:	b009883a 	mov	r4,r22
   4a848:	a80b883a 	mov	r5,r21
   4a84c:	004af540 	call	4af54 <__udivsi3>
   4a850:	9826943a 	slli	r19,r19,16
   4a854:	a0a1383a 	mul	r16,r20,r2
   4a858:	b93fffcc 	andi	r4,r23,65535
   4a85c:	24c8b03a 	or	r4,r4,r19
   4a860:	2400062e 	bgeu	r4,r16,4a87c <__udivdi3+0x4d0>
   4a864:	2449883a 	add	r4,r4,r17
   4a868:	10ffffc4 	addi	r3,r2,-1
   4a86c:	24402336 	bltu	r4,r17,4a8fc <__udivdi3+0x550>
   4a870:	2400222e 	bgeu	r4,r16,4a8fc <__udivdi3+0x550>
   4a874:	10bfff84 	addi	r2,r2,-2
   4a878:	2449883a 	add	r4,r4,r17
   4a87c:	e038943a 	slli	fp,fp,16
   4a880:	2421c83a 	sub	r16,r4,r16
   4a884:	e086b03a 	or	r3,fp,r2
   4a888:	003f4306 	br	4a598 <__alt_data_end+0xfffd8598>
   4a88c:	2005883a 	mov	r2,r4
   4a890:	003f6906 	br	4a638 <__alt_data_end+0xfffd8638>
   4a894:	1805883a 	mov	r2,r3
   4a898:	003f0f06 	br	4a4d8 <__alt_data_end+0xfffd84d8>
   4a89c:	1806943a 	slli	r3,r3,16
   4a8a0:	9d66983a 	sll	r19,r19,r21
   4a8a4:	39ffffcc 	andi	r7,r7,65535
   4a8a8:	19c7883a 	add	r3,r3,r7
   4a8ac:	98ffc32e 	bgeu	r19,r3,4a7bc <__alt_data_end+0xfffd87bc>
   4a8b0:	10bfffc4 	addi	r2,r2,-1
   4a8b4:	003fc106 	br	4a7bc <__alt_data_end+0xfffd87bc>
   4a8b8:	00800604 	movi	r2,24
   4a8bc:	003f1106 	br	4a504 <__alt_data_end+0xfffd8504>
   4a8c0:	00800604 	movi	r2,24
   4a8c4:	003f2706 	br	4a564 <__alt_data_end+0xfffd8564>
   4a8c8:	00800604 	movi	r2,24
   4a8cc:	003ece06 	br	4a408 <__alt_data_end+0xfffd8408>
   4a8d0:	0007883a 	mov	r3,zero
   4a8d4:	00800044 	movi	r2,1
   4a8d8:	003f5c06 	br	4a64c <__alt_data_end+0xfffd864c>
   4a8dc:	813fa12e 	bgeu	r16,r4,4a764 <__alt_data_end+0xfffd8764>
   4a8e0:	10bfff84 	addi	r2,r2,-2
   4a8e4:	85e1883a 	add	r16,r16,r23
   4a8e8:	003f9f06 	br	4a768 <__alt_data_end+0xfffd8768>
   4a8ec:	1c7f8a2e 	bgeu	r3,r17,4a718 <__alt_data_end+0xfffd8718>
   4a8f0:	31bfff84 	addi	r6,r6,-2
   4a8f4:	1dc7883a 	add	r3,r3,r23
   4a8f8:	003f8806 	br	4a71c <__alt_data_end+0xfffd871c>
   4a8fc:	1805883a 	mov	r2,r3
   4a900:	003fde06 	br	4a87c <__alt_data_end+0xfffd887c>
   4a904:	1839883a 	mov	fp,r3
   4a908:	003fc906 	br	4a830 <__alt_data_end+0xfffd8830>
   4a90c:	b5bfff84 	addi	r22,r22,-2
   4a910:	2449883a 	add	r4,r4,r17
   4a914:	003f3406 	br	4a5e8 <__alt_data_end+0xfffd85e8>
   4a918:	b5bfff84 	addi	r22,r22,-2
   4a91c:	1445883a 	add	r2,r2,r17
   4a920:	003edb06 	br	4a490 <__alt_data_end+0xfffd8490>

0004a924 <__umoddi3>:
   4a924:	defff404 	addi	sp,sp,-48
   4a928:	df000a15 	stw	fp,40(sp)
   4a92c:	dc400315 	stw	r17,12(sp)
   4a930:	dc000215 	stw	r16,8(sp)
   4a934:	dfc00b15 	stw	ra,44(sp)
   4a938:	ddc00915 	stw	r23,36(sp)
   4a93c:	dd800815 	stw	r22,32(sp)
   4a940:	dd400715 	stw	r21,28(sp)
   4a944:	dd000615 	stw	r20,24(sp)
   4a948:	dcc00515 	stw	r19,20(sp)
   4a94c:	dc800415 	stw	r18,16(sp)
   4a950:	2021883a 	mov	r16,r4
   4a954:	2823883a 	mov	r17,r5
   4a958:	2839883a 	mov	fp,r5
   4a95c:	38003c1e 	bne	r7,zero,4aa50 <__umoddi3+0x12c>
   4a960:	3027883a 	mov	r19,r6
   4a964:	2029883a 	mov	r20,r4
   4a968:	2980512e 	bgeu	r5,r6,4aab0 <__umoddi3+0x18c>
   4a96c:	00bfffd4 	movui	r2,65535
   4a970:	11809a36 	bltu	r2,r6,4abdc <__umoddi3+0x2b8>
   4a974:	01003fc4 	movi	r4,255
   4a978:	2189803a 	cmpltu	r4,r4,r6
   4a97c:	200890fa 	slli	r4,r4,3
   4a980:	3104d83a 	srl	r2,r6,r4
   4a984:	00c00174 	movhi	r3,5
   4a988:	18c03104 	addi	r3,r3,196
   4a98c:	1885883a 	add	r2,r3,r2
   4a990:	10c00003 	ldbu	r3,0(r2)
   4a994:	00800804 	movi	r2,32
   4a998:	1909883a 	add	r4,r3,r4
   4a99c:	1125c83a 	sub	r18,r2,r4
   4a9a0:	90000526 	beq	r18,zero,4a9b8 <__umoddi3+0x94>
   4a9a4:	8ca2983a 	sll	r17,r17,r18
   4a9a8:	8108d83a 	srl	r4,r16,r4
   4a9ac:	34a6983a 	sll	r19,r6,r18
   4a9b0:	84a8983a 	sll	r20,r16,r18
   4a9b4:	2478b03a 	or	fp,r4,r17
   4a9b8:	982ed43a 	srli	r23,r19,16
   4a9bc:	e009883a 	mov	r4,fp
   4a9c0:	9dbfffcc 	andi	r22,r19,65535
   4a9c4:	b80b883a 	mov	r5,r23
   4a9c8:	004afb80 	call	4afb8 <__umodsi3>
   4a9cc:	e009883a 	mov	r4,fp
   4a9d0:	b80b883a 	mov	r5,r23
   4a9d4:	102b883a 	mov	r21,r2
   4a9d8:	004af540 	call	4af54 <__udivsi3>
   4a9dc:	a806943a 	slli	r3,r21,16
   4a9e0:	a008d43a 	srli	r4,r20,16
   4a9e4:	b085383a 	mul	r2,r22,r2
   4a9e8:	20c8b03a 	or	r4,r4,r3
   4a9ec:	2080032e 	bgeu	r4,r2,4a9fc <__umoddi3+0xd8>
   4a9f0:	24c9883a 	add	r4,r4,r19
   4a9f4:	24c00136 	bltu	r4,r19,4a9fc <__umoddi3+0xd8>
   4a9f8:	20811036 	bltu	r4,r2,4ae3c <__umoddi3+0x518>
   4a9fc:	20abc83a 	sub	r21,r4,r2
   4aa00:	b80b883a 	mov	r5,r23
   4aa04:	a809883a 	mov	r4,r21
   4aa08:	004afb80 	call	4afb8 <__umodsi3>
   4aa0c:	1023883a 	mov	r17,r2
   4aa10:	b80b883a 	mov	r5,r23
   4aa14:	a809883a 	mov	r4,r21
   4aa18:	004af540 	call	4af54 <__udivsi3>
   4aa1c:	8822943a 	slli	r17,r17,16
   4aa20:	b085383a 	mul	r2,r22,r2
   4aa24:	a0ffffcc 	andi	r3,r20,65535
   4aa28:	1c46b03a 	or	r3,r3,r17
   4aa2c:	1880042e 	bgeu	r3,r2,4aa40 <__umoddi3+0x11c>
   4aa30:	1cc7883a 	add	r3,r3,r19
   4aa34:	1cc00236 	bltu	r3,r19,4aa40 <__umoddi3+0x11c>
   4aa38:	1880012e 	bgeu	r3,r2,4aa40 <__umoddi3+0x11c>
   4aa3c:	1cc7883a 	add	r3,r3,r19
   4aa40:	1885c83a 	sub	r2,r3,r2
   4aa44:	1484d83a 	srl	r2,r2,r18
   4aa48:	0007883a 	mov	r3,zero
   4aa4c:	00004f06 	br	4ab8c <__umoddi3+0x268>
   4aa50:	29c04c36 	bltu	r5,r7,4ab84 <__umoddi3+0x260>
   4aa54:	00bfffd4 	movui	r2,65535
   4aa58:	11c0582e 	bgeu	r2,r7,4abbc <__umoddi3+0x298>
   4aa5c:	00804034 	movhi	r2,256
   4aa60:	10bfffc4 	addi	r2,r2,-1
   4aa64:	11c0e736 	bltu	r2,r7,4ae04 <__umoddi3+0x4e0>
   4aa68:	01000404 	movi	r4,16
   4aa6c:	3904d83a 	srl	r2,r7,r4
   4aa70:	00c00174 	movhi	r3,5
   4aa74:	18c03104 	addi	r3,r3,196
   4aa78:	1885883a 	add	r2,r3,r2
   4aa7c:	14c00003 	ldbu	r19,0(r2)
   4aa80:	00c00804 	movi	r3,32
   4aa84:	9927883a 	add	r19,r19,r4
   4aa88:	1ce9c83a 	sub	r20,r3,r19
   4aa8c:	a000581e 	bne	r20,zero,4abf0 <__umoddi3+0x2cc>
   4aa90:	3c400136 	bltu	r7,r17,4aa98 <__umoddi3+0x174>
   4aa94:	8180eb36 	bltu	r16,r6,4ae44 <__umoddi3+0x520>
   4aa98:	8185c83a 	sub	r2,r16,r6
   4aa9c:	89e3c83a 	sub	r17,r17,r7
   4aaa0:	8089803a 	cmpltu	r4,r16,r2
   4aaa4:	8939c83a 	sub	fp,r17,r4
   4aaa8:	e007883a 	mov	r3,fp
   4aaac:	00003706 	br	4ab8c <__umoddi3+0x268>
   4aab0:	3000041e 	bne	r6,zero,4aac4 <__umoddi3+0x1a0>
   4aab4:	000b883a 	mov	r5,zero
   4aab8:	01000044 	movi	r4,1
   4aabc:	004af540 	call	4af54 <__udivsi3>
   4aac0:	1027883a 	mov	r19,r2
   4aac4:	00bfffd4 	movui	r2,65535
   4aac8:	14c0402e 	bgeu	r2,r19,4abcc <__umoddi3+0x2a8>
   4aacc:	00804034 	movhi	r2,256
   4aad0:	10bfffc4 	addi	r2,r2,-1
   4aad4:	14c0cd36 	bltu	r2,r19,4ae0c <__umoddi3+0x4e8>
   4aad8:	00800404 	movi	r2,16
   4aadc:	9886d83a 	srl	r3,r19,r2
   4aae0:	01000174 	movhi	r4,5
   4aae4:	21003104 	addi	r4,r4,196
   4aae8:	20c7883a 	add	r3,r4,r3
   4aaec:	18c00003 	ldbu	r3,0(r3)
   4aaf0:	1887883a 	add	r3,r3,r2
   4aaf4:	00800804 	movi	r2,32
   4aaf8:	10e5c83a 	sub	r18,r2,r3
   4aafc:	9000901e 	bne	r18,zero,4ad40 <__umoddi3+0x41c>
   4ab00:	982cd43a 	srli	r22,r19,16
   4ab04:	8ce3c83a 	sub	r17,r17,r19
   4ab08:	9d7fffcc 	andi	r21,r19,65535
   4ab0c:	b00b883a 	mov	r5,r22
   4ab10:	8809883a 	mov	r4,r17
   4ab14:	004afb80 	call	4afb8 <__umodsi3>
   4ab18:	8809883a 	mov	r4,r17
   4ab1c:	b00b883a 	mov	r5,r22
   4ab20:	1021883a 	mov	r16,r2
   4ab24:	004af540 	call	4af54 <__udivsi3>
   4ab28:	8006943a 	slli	r3,r16,16
   4ab2c:	a008d43a 	srli	r4,r20,16
   4ab30:	1545383a 	mul	r2,r2,r21
   4ab34:	20c8b03a 	or	r4,r4,r3
   4ab38:	2080042e 	bgeu	r4,r2,4ab4c <__umoddi3+0x228>
   4ab3c:	24c9883a 	add	r4,r4,r19
   4ab40:	24c00236 	bltu	r4,r19,4ab4c <__umoddi3+0x228>
   4ab44:	2080012e 	bgeu	r4,r2,4ab4c <__umoddi3+0x228>
   4ab48:	24c9883a 	add	r4,r4,r19
   4ab4c:	20a1c83a 	sub	r16,r4,r2
   4ab50:	b00b883a 	mov	r5,r22
   4ab54:	8009883a 	mov	r4,r16
   4ab58:	004afb80 	call	4afb8 <__umodsi3>
   4ab5c:	1023883a 	mov	r17,r2
   4ab60:	b00b883a 	mov	r5,r22
   4ab64:	8009883a 	mov	r4,r16
   4ab68:	004af540 	call	4af54 <__udivsi3>
   4ab6c:	8822943a 	slli	r17,r17,16
   4ab70:	1545383a 	mul	r2,r2,r21
   4ab74:	a53fffcc 	andi	r20,r20,65535
   4ab78:	a446b03a 	or	r3,r20,r17
   4ab7c:	18bfb02e 	bgeu	r3,r2,4aa40 <__alt_data_end+0xfffd8a40>
   4ab80:	003fab06 	br	4aa30 <__alt_data_end+0xfffd8a30>
   4ab84:	2005883a 	mov	r2,r4
   4ab88:	2807883a 	mov	r3,r5
   4ab8c:	dfc00b17 	ldw	ra,44(sp)
   4ab90:	df000a17 	ldw	fp,40(sp)
   4ab94:	ddc00917 	ldw	r23,36(sp)
   4ab98:	dd800817 	ldw	r22,32(sp)
   4ab9c:	dd400717 	ldw	r21,28(sp)
   4aba0:	dd000617 	ldw	r20,24(sp)
   4aba4:	dcc00517 	ldw	r19,20(sp)
   4aba8:	dc800417 	ldw	r18,16(sp)
   4abac:	dc400317 	ldw	r17,12(sp)
   4abb0:	dc000217 	ldw	r16,8(sp)
   4abb4:	dec00c04 	addi	sp,sp,48
   4abb8:	f800283a 	ret
   4abbc:	04c03fc4 	movi	r19,255
   4abc0:	99c9803a 	cmpltu	r4,r19,r7
   4abc4:	200890fa 	slli	r4,r4,3
   4abc8:	003fa806 	br	4aa6c <__alt_data_end+0xfffd8a6c>
   4abcc:	00803fc4 	movi	r2,255
   4abd0:	14c5803a 	cmpltu	r2,r2,r19
   4abd4:	100490fa 	slli	r2,r2,3
   4abd8:	003fc006 	br	4aadc <__alt_data_end+0xfffd8adc>
   4abdc:	00804034 	movhi	r2,256
   4abe0:	10bfffc4 	addi	r2,r2,-1
   4abe4:	11808b36 	bltu	r2,r6,4ae14 <__umoddi3+0x4f0>
   4abe8:	01000404 	movi	r4,16
   4abec:	003f6406 	br	4a980 <__alt_data_end+0xfffd8980>
   4abf0:	34c4d83a 	srl	r2,r6,r19
   4abf4:	3d0e983a 	sll	r7,r7,r20
   4abf8:	8cf8d83a 	srl	fp,r17,r19
   4abfc:	8d10983a 	sll	r8,r17,r20
   4ac00:	38aab03a 	or	r21,r7,r2
   4ac04:	a82cd43a 	srli	r22,r21,16
   4ac08:	84e2d83a 	srl	r17,r16,r19
   4ac0c:	e009883a 	mov	r4,fp
   4ac10:	b00b883a 	mov	r5,r22
   4ac14:	8a22b03a 	or	r17,r17,r8
   4ac18:	3524983a 	sll	r18,r6,r20
   4ac1c:	004afb80 	call	4afb8 <__umodsi3>
   4ac20:	e009883a 	mov	r4,fp
   4ac24:	b00b883a 	mov	r5,r22
   4ac28:	102f883a 	mov	r23,r2
   4ac2c:	004af540 	call	4af54 <__udivsi3>
   4ac30:	100d883a 	mov	r6,r2
   4ac34:	b808943a 	slli	r4,r23,16
   4ac38:	aa3fffcc 	andi	r8,r21,65535
   4ac3c:	8804d43a 	srli	r2,r17,16
   4ac40:	41af383a 	mul	r23,r8,r6
   4ac44:	8520983a 	sll	r16,r16,r20
   4ac48:	1104b03a 	or	r2,r2,r4
   4ac4c:	15c0042e 	bgeu	r2,r23,4ac60 <__umoddi3+0x33c>
   4ac50:	1545883a 	add	r2,r2,r21
   4ac54:	30ffffc4 	addi	r3,r6,-1
   4ac58:	1540742e 	bgeu	r2,r21,4ae2c <__umoddi3+0x508>
   4ac5c:	180d883a 	mov	r6,r3
   4ac60:	15efc83a 	sub	r23,r2,r23
   4ac64:	b00b883a 	mov	r5,r22
   4ac68:	b809883a 	mov	r4,r23
   4ac6c:	d9800115 	stw	r6,4(sp)
   4ac70:	da000015 	stw	r8,0(sp)
   4ac74:	004afb80 	call	4afb8 <__umodsi3>
   4ac78:	b00b883a 	mov	r5,r22
   4ac7c:	b809883a 	mov	r4,r23
   4ac80:	1039883a 	mov	fp,r2
   4ac84:	004af540 	call	4af54 <__udivsi3>
   4ac88:	da000017 	ldw	r8,0(sp)
   4ac8c:	e038943a 	slli	fp,fp,16
   4ac90:	100b883a 	mov	r5,r2
   4ac94:	4089383a 	mul	r4,r8,r2
   4ac98:	8a3fffcc 	andi	r8,r17,65535
   4ac9c:	4710b03a 	or	r8,r8,fp
   4aca0:	d9800117 	ldw	r6,4(sp)
   4aca4:	4100042e 	bgeu	r8,r4,4acb8 <__umoddi3+0x394>
   4aca8:	4551883a 	add	r8,r8,r21
   4acac:	10bfffc4 	addi	r2,r2,-1
   4acb0:	45405a2e 	bgeu	r8,r21,4ae1c <__umoddi3+0x4f8>
   4acb4:	100b883a 	mov	r5,r2
   4acb8:	300c943a 	slli	r6,r6,16
   4acbc:	91ffffcc 	andi	r7,r18,65535
   4acc0:	9004d43a 	srli	r2,r18,16
   4acc4:	314cb03a 	or	r6,r6,r5
   4acc8:	317fffcc 	andi	r5,r6,65535
   4accc:	300cd43a 	srli	r6,r6,16
   4acd0:	29d3383a 	mul	r9,r5,r7
   4acd4:	288b383a 	mul	r5,r5,r2
   4acd8:	31cf383a 	mul	r7,r6,r7
   4acdc:	4806d43a 	srli	r3,r9,16
   4ace0:	4111c83a 	sub	r8,r8,r4
   4ace4:	29cb883a 	add	r5,r5,r7
   4ace8:	194b883a 	add	r5,r3,r5
   4acec:	3085383a 	mul	r2,r6,r2
   4acf0:	29c0022e 	bgeu	r5,r7,4acfc <__umoddi3+0x3d8>
   4acf4:	00c00074 	movhi	r3,1
   4acf8:	10c5883a 	add	r2,r2,r3
   4acfc:	2808d43a 	srli	r4,r5,16
   4ad00:	280a943a 	slli	r5,r5,16
   4ad04:	4a7fffcc 	andi	r9,r9,65535
   4ad08:	2085883a 	add	r2,r4,r2
   4ad0c:	2a4b883a 	add	r5,r5,r9
   4ad10:	40803636 	bltu	r8,r2,4adec <__umoddi3+0x4c8>
   4ad14:	40804d26 	beq	r8,r2,4ae4c <__umoddi3+0x528>
   4ad18:	4089c83a 	sub	r4,r8,r2
   4ad1c:	280f883a 	mov	r7,r5
   4ad20:	81cfc83a 	sub	r7,r16,r7
   4ad24:	81c7803a 	cmpltu	r3,r16,r7
   4ad28:	20c7c83a 	sub	r3,r4,r3
   4ad2c:	1cc4983a 	sll	r2,r3,r19
   4ad30:	3d0ed83a 	srl	r7,r7,r20
   4ad34:	1d06d83a 	srl	r3,r3,r20
   4ad38:	11c4b03a 	or	r2,r2,r7
   4ad3c:	003f9306 	br	4ab8c <__alt_data_end+0xfffd8b8c>
   4ad40:	9ca6983a 	sll	r19,r19,r18
   4ad44:	88e8d83a 	srl	r20,r17,r3
   4ad48:	80c4d83a 	srl	r2,r16,r3
   4ad4c:	982cd43a 	srli	r22,r19,16
   4ad50:	8ca2983a 	sll	r17,r17,r18
   4ad54:	a009883a 	mov	r4,r20
   4ad58:	b00b883a 	mov	r5,r22
   4ad5c:	1478b03a 	or	fp,r2,r17
   4ad60:	004afb80 	call	4afb8 <__umodsi3>
   4ad64:	a009883a 	mov	r4,r20
   4ad68:	b00b883a 	mov	r5,r22
   4ad6c:	1023883a 	mov	r17,r2
   4ad70:	004af540 	call	4af54 <__udivsi3>
   4ad74:	9d7fffcc 	andi	r21,r19,65535
   4ad78:	880a943a 	slli	r5,r17,16
   4ad7c:	e008d43a 	srli	r4,fp,16
   4ad80:	a885383a 	mul	r2,r21,r2
   4ad84:	84a8983a 	sll	r20,r16,r18
   4ad88:	2148b03a 	or	r4,r4,r5
   4ad8c:	2080042e 	bgeu	r4,r2,4ada0 <__umoddi3+0x47c>
   4ad90:	24c9883a 	add	r4,r4,r19
   4ad94:	24c00236 	bltu	r4,r19,4ada0 <__umoddi3+0x47c>
   4ad98:	2080012e 	bgeu	r4,r2,4ada0 <__umoddi3+0x47c>
   4ad9c:	24c9883a 	add	r4,r4,r19
   4ada0:	20a3c83a 	sub	r17,r4,r2
   4ada4:	b00b883a 	mov	r5,r22
   4ada8:	8809883a 	mov	r4,r17
   4adac:	004afb80 	call	4afb8 <__umodsi3>
   4adb0:	102f883a 	mov	r23,r2
   4adb4:	8809883a 	mov	r4,r17
   4adb8:	b00b883a 	mov	r5,r22
   4adbc:	004af540 	call	4af54 <__udivsi3>
   4adc0:	b82e943a 	slli	r23,r23,16
   4adc4:	a885383a 	mul	r2,r21,r2
   4adc8:	e13fffcc 	andi	r4,fp,65535
   4adcc:	25c8b03a 	or	r4,r4,r23
   4add0:	2080042e 	bgeu	r4,r2,4ade4 <__umoddi3+0x4c0>
   4add4:	24c9883a 	add	r4,r4,r19
   4add8:	24c00236 	bltu	r4,r19,4ade4 <__umoddi3+0x4c0>
   4addc:	2080012e 	bgeu	r4,r2,4ade4 <__umoddi3+0x4c0>
   4ade0:	24c9883a 	add	r4,r4,r19
   4ade4:	20a3c83a 	sub	r17,r4,r2
   4ade8:	003f4806 	br	4ab0c <__alt_data_end+0xfffd8b0c>
   4adec:	2c8fc83a 	sub	r7,r5,r18
   4adf0:	1545c83a 	sub	r2,r2,r21
   4adf4:	29cb803a 	cmpltu	r5,r5,r7
   4adf8:	1145c83a 	sub	r2,r2,r5
   4adfc:	4089c83a 	sub	r4,r8,r2
   4ae00:	003fc706 	br	4ad20 <__alt_data_end+0xfffd8d20>
   4ae04:	01000604 	movi	r4,24
   4ae08:	003f1806 	br	4aa6c <__alt_data_end+0xfffd8a6c>
   4ae0c:	00800604 	movi	r2,24
   4ae10:	003f3206 	br	4aadc <__alt_data_end+0xfffd8adc>
   4ae14:	01000604 	movi	r4,24
   4ae18:	003ed906 	br	4a980 <__alt_data_end+0xfffd8980>
   4ae1c:	413fa52e 	bgeu	r8,r4,4acb4 <__alt_data_end+0xfffd8cb4>
   4ae20:	297fff84 	addi	r5,r5,-2
   4ae24:	4551883a 	add	r8,r8,r21
   4ae28:	003fa306 	br	4acb8 <__alt_data_end+0xfffd8cb8>
   4ae2c:	15ff8b2e 	bgeu	r2,r23,4ac5c <__alt_data_end+0xfffd8c5c>
   4ae30:	31bfff84 	addi	r6,r6,-2
   4ae34:	1545883a 	add	r2,r2,r21
   4ae38:	003f8906 	br	4ac60 <__alt_data_end+0xfffd8c60>
   4ae3c:	24c9883a 	add	r4,r4,r19
   4ae40:	003eee06 	br	4a9fc <__alt_data_end+0xfffd89fc>
   4ae44:	8005883a 	mov	r2,r16
   4ae48:	003f1706 	br	4aaa8 <__alt_data_end+0xfffd8aa8>
   4ae4c:	817fe736 	bltu	r16,r5,4adec <__alt_data_end+0xfffd8dec>
   4ae50:	280f883a 	mov	r7,r5
   4ae54:	0009883a 	mov	r4,zero
   4ae58:	003fb106 	br	4ad20 <__alt_data_end+0xfffd8d20>

0004ae5c <__divsi3>:
   4ae5c:	20001b16 	blt	r4,zero,4aecc <__divsi3+0x70>
   4ae60:	000f883a 	mov	r7,zero
   4ae64:	28001616 	blt	r5,zero,4aec0 <__divsi3+0x64>
   4ae68:	200d883a 	mov	r6,r4
   4ae6c:	29001a2e 	bgeu	r5,r4,4aed8 <__divsi3+0x7c>
   4ae70:	00800804 	movi	r2,32
   4ae74:	00c00044 	movi	r3,1
   4ae78:	00000106 	br	4ae80 <__divsi3+0x24>
   4ae7c:	10000d26 	beq	r2,zero,4aeb4 <__divsi3+0x58>
   4ae80:	294b883a 	add	r5,r5,r5
   4ae84:	10bfffc4 	addi	r2,r2,-1
   4ae88:	18c7883a 	add	r3,r3,r3
   4ae8c:	293ffb36 	bltu	r5,r4,4ae7c <__alt_data_end+0xfffd8e7c>
   4ae90:	0005883a 	mov	r2,zero
   4ae94:	18000726 	beq	r3,zero,4aeb4 <__divsi3+0x58>
   4ae98:	0005883a 	mov	r2,zero
   4ae9c:	31400236 	bltu	r6,r5,4aea8 <__divsi3+0x4c>
   4aea0:	314dc83a 	sub	r6,r6,r5
   4aea4:	10c4b03a 	or	r2,r2,r3
   4aea8:	1806d07a 	srli	r3,r3,1
   4aeac:	280ad07a 	srli	r5,r5,1
   4aeb0:	183ffa1e 	bne	r3,zero,4ae9c <__alt_data_end+0xfffd8e9c>
   4aeb4:	38000126 	beq	r7,zero,4aebc <__divsi3+0x60>
   4aeb8:	0085c83a 	sub	r2,zero,r2
   4aebc:	f800283a 	ret
   4aec0:	014bc83a 	sub	r5,zero,r5
   4aec4:	39c0005c 	xori	r7,r7,1
   4aec8:	003fe706 	br	4ae68 <__alt_data_end+0xfffd8e68>
   4aecc:	0109c83a 	sub	r4,zero,r4
   4aed0:	01c00044 	movi	r7,1
   4aed4:	003fe306 	br	4ae64 <__alt_data_end+0xfffd8e64>
   4aed8:	00c00044 	movi	r3,1
   4aedc:	003fee06 	br	4ae98 <__alt_data_end+0xfffd8e98>

0004aee0 <__modsi3>:
   4aee0:	20001716 	blt	r4,zero,4af40 <__modsi3+0x60>
   4aee4:	000f883a 	mov	r7,zero
   4aee8:	2005883a 	mov	r2,r4
   4aeec:	28001216 	blt	r5,zero,4af38 <__modsi3+0x58>
   4aef0:	2900162e 	bgeu	r5,r4,4af4c <__modsi3+0x6c>
   4aef4:	01800804 	movi	r6,32
   4aef8:	00c00044 	movi	r3,1
   4aefc:	00000106 	br	4af04 <__modsi3+0x24>
   4af00:	30000a26 	beq	r6,zero,4af2c <__modsi3+0x4c>
   4af04:	294b883a 	add	r5,r5,r5
   4af08:	31bfffc4 	addi	r6,r6,-1
   4af0c:	18c7883a 	add	r3,r3,r3
   4af10:	293ffb36 	bltu	r5,r4,4af00 <__alt_data_end+0xfffd8f00>
   4af14:	18000526 	beq	r3,zero,4af2c <__modsi3+0x4c>
   4af18:	1806d07a 	srli	r3,r3,1
   4af1c:	11400136 	bltu	r2,r5,4af24 <__modsi3+0x44>
   4af20:	1145c83a 	sub	r2,r2,r5
   4af24:	280ad07a 	srli	r5,r5,1
   4af28:	183ffb1e 	bne	r3,zero,4af18 <__alt_data_end+0xfffd8f18>
   4af2c:	38000126 	beq	r7,zero,4af34 <__modsi3+0x54>
   4af30:	0085c83a 	sub	r2,zero,r2
   4af34:	f800283a 	ret
   4af38:	014bc83a 	sub	r5,zero,r5
   4af3c:	003fec06 	br	4aef0 <__alt_data_end+0xfffd8ef0>
   4af40:	0109c83a 	sub	r4,zero,r4
   4af44:	01c00044 	movi	r7,1
   4af48:	003fe706 	br	4aee8 <__alt_data_end+0xfffd8ee8>
   4af4c:	00c00044 	movi	r3,1
   4af50:	003ff106 	br	4af18 <__alt_data_end+0xfffd8f18>

0004af54 <__udivsi3>:
   4af54:	200d883a 	mov	r6,r4
   4af58:	2900152e 	bgeu	r5,r4,4afb0 <__udivsi3+0x5c>
   4af5c:	28001416 	blt	r5,zero,4afb0 <__udivsi3+0x5c>
   4af60:	00800804 	movi	r2,32
   4af64:	00c00044 	movi	r3,1
   4af68:	00000206 	br	4af74 <__udivsi3+0x20>
   4af6c:	10000e26 	beq	r2,zero,4afa8 <__udivsi3+0x54>
   4af70:	28000516 	blt	r5,zero,4af88 <__udivsi3+0x34>
   4af74:	294b883a 	add	r5,r5,r5
   4af78:	10bfffc4 	addi	r2,r2,-1
   4af7c:	18c7883a 	add	r3,r3,r3
   4af80:	293ffa36 	bltu	r5,r4,4af6c <__alt_data_end+0xfffd8f6c>
   4af84:	18000826 	beq	r3,zero,4afa8 <__udivsi3+0x54>
   4af88:	0005883a 	mov	r2,zero
   4af8c:	31400236 	bltu	r6,r5,4af98 <__udivsi3+0x44>
   4af90:	314dc83a 	sub	r6,r6,r5
   4af94:	10c4b03a 	or	r2,r2,r3
   4af98:	1806d07a 	srli	r3,r3,1
   4af9c:	280ad07a 	srli	r5,r5,1
   4afa0:	183ffa1e 	bne	r3,zero,4af8c <__alt_data_end+0xfffd8f8c>
   4afa4:	f800283a 	ret
   4afa8:	0005883a 	mov	r2,zero
   4afac:	f800283a 	ret
   4afb0:	00c00044 	movi	r3,1
   4afb4:	003ff406 	br	4af88 <__alt_data_end+0xfffd8f88>

0004afb8 <__umodsi3>:
   4afb8:	2005883a 	mov	r2,r4
   4afbc:	2900122e 	bgeu	r5,r4,4b008 <__umodsi3+0x50>
   4afc0:	28001116 	blt	r5,zero,4b008 <__umodsi3+0x50>
   4afc4:	01800804 	movi	r6,32
   4afc8:	00c00044 	movi	r3,1
   4afcc:	00000206 	br	4afd8 <__umodsi3+0x20>
   4afd0:	30000c26 	beq	r6,zero,4b004 <__umodsi3+0x4c>
   4afd4:	28000516 	blt	r5,zero,4afec <__umodsi3+0x34>
   4afd8:	294b883a 	add	r5,r5,r5
   4afdc:	31bfffc4 	addi	r6,r6,-1
   4afe0:	18c7883a 	add	r3,r3,r3
   4afe4:	293ffa36 	bltu	r5,r4,4afd0 <__alt_data_end+0xfffd8fd0>
   4afe8:	18000626 	beq	r3,zero,4b004 <__umodsi3+0x4c>
   4afec:	1806d07a 	srli	r3,r3,1
   4aff0:	11400136 	bltu	r2,r5,4aff8 <__umodsi3+0x40>
   4aff4:	1145c83a 	sub	r2,r2,r5
   4aff8:	280ad07a 	srli	r5,r5,1
   4affc:	183ffb1e 	bne	r3,zero,4afec <__alt_data_end+0xfffd8fec>
   4b000:	f800283a 	ret
   4b004:	f800283a 	ret
   4b008:	00c00044 	movi	r3,1
   4b00c:	003ff706 	br	4afec <__alt_data_end+0xfffd8fec>

0004b010 <__adddf3>:
   4b010:	02c00434 	movhi	r11,16
   4b014:	5affffc4 	addi	r11,r11,-1
   4b018:	2806d7fa 	srli	r3,r5,31
   4b01c:	2ad4703a 	and	r10,r5,r11
   4b020:	3ad2703a 	and	r9,r7,r11
   4b024:	3804d53a 	srli	r2,r7,20
   4b028:	3018d77a 	srli	r12,r6,29
   4b02c:	280ad53a 	srli	r5,r5,20
   4b030:	501490fa 	slli	r10,r10,3
   4b034:	2010d77a 	srli	r8,r4,29
   4b038:	481290fa 	slli	r9,r9,3
   4b03c:	380ed7fa 	srli	r7,r7,31
   4b040:	defffb04 	addi	sp,sp,-20
   4b044:	dc800215 	stw	r18,8(sp)
   4b048:	dc400115 	stw	r17,4(sp)
   4b04c:	dc000015 	stw	r16,0(sp)
   4b050:	dfc00415 	stw	ra,16(sp)
   4b054:	dcc00315 	stw	r19,12(sp)
   4b058:	1c803fcc 	andi	r18,r3,255
   4b05c:	2c01ffcc 	andi	r16,r5,2047
   4b060:	5210b03a 	or	r8,r10,r8
   4b064:	202290fa 	slli	r17,r4,3
   4b068:	1081ffcc 	andi	r2,r2,2047
   4b06c:	4b12b03a 	or	r9,r9,r12
   4b070:	300c90fa 	slli	r6,r6,3
   4b074:	91c07526 	beq	r18,r7,4b24c <__adddf3+0x23c>
   4b078:	8087c83a 	sub	r3,r16,r2
   4b07c:	00c0ab0e 	bge	zero,r3,4b32c <__adddf3+0x31c>
   4b080:	10002a1e 	bne	r2,zero,4b12c <__adddf3+0x11c>
   4b084:	4984b03a 	or	r2,r9,r6
   4b088:	1000961e 	bne	r2,zero,4b2e4 <__adddf3+0x2d4>
   4b08c:	888001cc 	andi	r2,r17,7
   4b090:	10000726 	beq	r2,zero,4b0b0 <__adddf3+0xa0>
   4b094:	888003cc 	andi	r2,r17,15
   4b098:	00c00104 	movi	r3,4
   4b09c:	10c00426 	beq	r2,r3,4b0b0 <__adddf3+0xa0>
   4b0a0:	88c7883a 	add	r3,r17,r3
   4b0a4:	1c63803a 	cmpltu	r17,r3,r17
   4b0a8:	4451883a 	add	r8,r8,r17
   4b0ac:	1823883a 	mov	r17,r3
   4b0b0:	4080202c 	andhi	r2,r8,128
   4b0b4:	10005926 	beq	r2,zero,4b21c <__adddf3+0x20c>
   4b0b8:	84000044 	addi	r16,r16,1
   4b0bc:	0081ffc4 	movi	r2,2047
   4b0c0:	8080ba26 	beq	r16,r2,4b3ac <__adddf3+0x39c>
   4b0c4:	00bfe034 	movhi	r2,65408
   4b0c8:	10bfffc4 	addi	r2,r2,-1
   4b0cc:	4090703a 	and	r8,r8,r2
   4b0d0:	4004977a 	slli	r2,r8,29
   4b0d4:	4010927a 	slli	r8,r8,9
   4b0d8:	8822d0fa 	srli	r17,r17,3
   4b0dc:	8401ffcc 	andi	r16,r16,2047
   4b0e0:	4010d33a 	srli	r8,r8,12
   4b0e4:	9007883a 	mov	r3,r18
   4b0e8:	1444b03a 	or	r2,r2,r17
   4b0ec:	8401ffcc 	andi	r16,r16,2047
   4b0f0:	8020953a 	slli	r16,r16,20
   4b0f4:	18c03fcc 	andi	r3,r3,255
   4b0f8:	01000434 	movhi	r4,16
   4b0fc:	213fffc4 	addi	r4,r4,-1
   4b100:	180697fa 	slli	r3,r3,31
   4b104:	4110703a 	and	r8,r8,r4
   4b108:	4410b03a 	or	r8,r8,r16
   4b10c:	40c6b03a 	or	r3,r8,r3
   4b110:	dfc00417 	ldw	ra,16(sp)
   4b114:	dcc00317 	ldw	r19,12(sp)
   4b118:	dc800217 	ldw	r18,8(sp)
   4b11c:	dc400117 	ldw	r17,4(sp)
   4b120:	dc000017 	ldw	r16,0(sp)
   4b124:	dec00504 	addi	sp,sp,20
   4b128:	f800283a 	ret
   4b12c:	0081ffc4 	movi	r2,2047
   4b130:	80bfd626 	beq	r16,r2,4b08c <__alt_data_end+0xfffd908c>
   4b134:	4a402034 	orhi	r9,r9,128
   4b138:	00800e04 	movi	r2,56
   4b13c:	10c09f16 	blt	r2,r3,4b3bc <__adddf3+0x3ac>
   4b140:	008007c4 	movi	r2,31
   4b144:	10c0c216 	blt	r2,r3,4b450 <__adddf3+0x440>
   4b148:	00800804 	movi	r2,32
   4b14c:	10c5c83a 	sub	r2,r2,r3
   4b150:	488a983a 	sll	r5,r9,r2
   4b154:	30c8d83a 	srl	r4,r6,r3
   4b158:	3084983a 	sll	r2,r6,r2
   4b15c:	48c6d83a 	srl	r3,r9,r3
   4b160:	290cb03a 	or	r6,r5,r4
   4b164:	1004c03a 	cmpne	r2,r2,zero
   4b168:	308cb03a 	or	r6,r6,r2
   4b16c:	898dc83a 	sub	r6,r17,r6
   4b170:	89a3803a 	cmpltu	r17,r17,r6
   4b174:	40d1c83a 	sub	r8,r8,r3
   4b178:	4451c83a 	sub	r8,r8,r17
   4b17c:	3023883a 	mov	r17,r6
   4b180:	4080202c 	andhi	r2,r8,128
   4b184:	10002326 	beq	r2,zero,4b214 <__adddf3+0x204>
   4b188:	04c02034 	movhi	r19,128
   4b18c:	9cffffc4 	addi	r19,r19,-1
   4b190:	44e6703a 	and	r19,r8,r19
   4b194:	98007626 	beq	r19,zero,4b370 <__adddf3+0x360>
   4b198:	9809883a 	mov	r4,r19
   4b19c:	004d6140 	call	4d614 <__clzsi2>
   4b1a0:	10fffe04 	addi	r3,r2,-8
   4b1a4:	010007c4 	movi	r4,31
   4b1a8:	20c07716 	blt	r4,r3,4b388 <__adddf3+0x378>
   4b1ac:	00800804 	movi	r2,32
   4b1b0:	10c5c83a 	sub	r2,r2,r3
   4b1b4:	8884d83a 	srl	r2,r17,r2
   4b1b8:	98d0983a 	sll	r8,r19,r3
   4b1bc:	88e2983a 	sll	r17,r17,r3
   4b1c0:	1204b03a 	or	r2,r2,r8
   4b1c4:	1c007416 	blt	r3,r16,4b398 <__adddf3+0x388>
   4b1c8:	1c21c83a 	sub	r16,r3,r16
   4b1cc:	82000044 	addi	r8,r16,1
   4b1d0:	00c007c4 	movi	r3,31
   4b1d4:	1a009116 	blt	r3,r8,4b41c <__adddf3+0x40c>
   4b1d8:	00c00804 	movi	r3,32
   4b1dc:	1a07c83a 	sub	r3,r3,r8
   4b1e0:	8a08d83a 	srl	r4,r17,r8
   4b1e4:	88e2983a 	sll	r17,r17,r3
   4b1e8:	10c6983a 	sll	r3,r2,r3
   4b1ec:	1210d83a 	srl	r8,r2,r8
   4b1f0:	8804c03a 	cmpne	r2,r17,zero
   4b1f4:	1906b03a 	or	r3,r3,r4
   4b1f8:	18a2b03a 	or	r17,r3,r2
   4b1fc:	0021883a 	mov	r16,zero
   4b200:	003fa206 	br	4b08c <__alt_data_end+0xfffd908c>
   4b204:	1890b03a 	or	r8,r3,r2
   4b208:	40017d26 	beq	r8,zero,4b800 <__adddf3+0x7f0>
   4b20c:	1011883a 	mov	r8,r2
   4b210:	1823883a 	mov	r17,r3
   4b214:	888001cc 	andi	r2,r17,7
   4b218:	103f9e1e 	bne	r2,zero,4b094 <__alt_data_end+0xfffd9094>
   4b21c:	4004977a 	slli	r2,r8,29
   4b220:	8822d0fa 	srli	r17,r17,3
   4b224:	4010d0fa 	srli	r8,r8,3
   4b228:	9007883a 	mov	r3,r18
   4b22c:	1444b03a 	or	r2,r2,r17
   4b230:	0101ffc4 	movi	r4,2047
   4b234:	81002426 	beq	r16,r4,4b2c8 <__adddf3+0x2b8>
   4b238:	8120703a 	and	r16,r16,r4
   4b23c:	01000434 	movhi	r4,16
   4b240:	213fffc4 	addi	r4,r4,-1
   4b244:	4110703a 	and	r8,r8,r4
   4b248:	003fa806 	br	4b0ec <__alt_data_end+0xfffd90ec>
   4b24c:	8089c83a 	sub	r4,r16,r2
   4b250:	01005e0e 	bge	zero,r4,4b3cc <__adddf3+0x3bc>
   4b254:	10002b26 	beq	r2,zero,4b304 <__adddf3+0x2f4>
   4b258:	0081ffc4 	movi	r2,2047
   4b25c:	80bf8b26 	beq	r16,r2,4b08c <__alt_data_end+0xfffd908c>
   4b260:	4a402034 	orhi	r9,r9,128
   4b264:	00800e04 	movi	r2,56
   4b268:	1100a40e 	bge	r2,r4,4b4fc <__adddf3+0x4ec>
   4b26c:	498cb03a 	or	r6,r9,r6
   4b270:	300ac03a 	cmpne	r5,r6,zero
   4b274:	0013883a 	mov	r9,zero
   4b278:	2c4b883a 	add	r5,r5,r17
   4b27c:	2c63803a 	cmpltu	r17,r5,r17
   4b280:	4a11883a 	add	r8,r9,r8
   4b284:	8a11883a 	add	r8,r17,r8
   4b288:	2823883a 	mov	r17,r5
   4b28c:	4080202c 	andhi	r2,r8,128
   4b290:	103fe026 	beq	r2,zero,4b214 <__alt_data_end+0xfffd9214>
   4b294:	84000044 	addi	r16,r16,1
   4b298:	0081ffc4 	movi	r2,2047
   4b29c:	8080d226 	beq	r16,r2,4b5e8 <__adddf3+0x5d8>
   4b2a0:	00bfe034 	movhi	r2,65408
   4b2a4:	10bfffc4 	addi	r2,r2,-1
   4b2a8:	4090703a 	and	r8,r8,r2
   4b2ac:	880ad07a 	srli	r5,r17,1
   4b2b0:	400897fa 	slli	r4,r8,31
   4b2b4:	88c0004c 	andi	r3,r17,1
   4b2b8:	28e2b03a 	or	r17,r5,r3
   4b2bc:	4010d07a 	srli	r8,r8,1
   4b2c0:	2462b03a 	or	r17,r4,r17
   4b2c4:	003f7106 	br	4b08c <__alt_data_end+0xfffd908c>
   4b2c8:	4088b03a 	or	r4,r8,r2
   4b2cc:	20014526 	beq	r4,zero,4b7e4 <__adddf3+0x7d4>
   4b2d0:	01000434 	movhi	r4,16
   4b2d4:	42000234 	orhi	r8,r8,8
   4b2d8:	213fffc4 	addi	r4,r4,-1
   4b2dc:	4110703a 	and	r8,r8,r4
   4b2e0:	003f8206 	br	4b0ec <__alt_data_end+0xfffd90ec>
   4b2e4:	18ffffc4 	addi	r3,r3,-1
   4b2e8:	1800491e 	bne	r3,zero,4b410 <__adddf3+0x400>
   4b2ec:	898bc83a 	sub	r5,r17,r6
   4b2f0:	8963803a 	cmpltu	r17,r17,r5
   4b2f4:	4251c83a 	sub	r8,r8,r9
   4b2f8:	4451c83a 	sub	r8,r8,r17
   4b2fc:	2823883a 	mov	r17,r5
   4b300:	003f9f06 	br	4b180 <__alt_data_end+0xfffd9180>
   4b304:	4984b03a 	or	r2,r9,r6
   4b308:	103f6026 	beq	r2,zero,4b08c <__alt_data_end+0xfffd908c>
   4b30c:	213fffc4 	addi	r4,r4,-1
   4b310:	2000931e 	bne	r4,zero,4b560 <__adddf3+0x550>
   4b314:	898d883a 	add	r6,r17,r6
   4b318:	3463803a 	cmpltu	r17,r6,r17
   4b31c:	4251883a 	add	r8,r8,r9
   4b320:	8a11883a 	add	r8,r17,r8
   4b324:	3023883a 	mov	r17,r6
   4b328:	003fd806 	br	4b28c <__alt_data_end+0xfffd928c>
   4b32c:	1800541e 	bne	r3,zero,4b480 <__adddf3+0x470>
   4b330:	80800044 	addi	r2,r16,1
   4b334:	1081ffcc 	andi	r2,r2,2047
   4b338:	00c00044 	movi	r3,1
   4b33c:	1880a00e 	bge	r3,r2,4b5c0 <__adddf3+0x5b0>
   4b340:	8989c83a 	sub	r4,r17,r6
   4b344:	8905803a 	cmpltu	r2,r17,r4
   4b348:	4267c83a 	sub	r19,r8,r9
   4b34c:	98a7c83a 	sub	r19,r19,r2
   4b350:	9880202c 	andhi	r2,r19,128
   4b354:	10006326 	beq	r2,zero,4b4e4 <__adddf3+0x4d4>
   4b358:	3463c83a 	sub	r17,r6,r17
   4b35c:	4a07c83a 	sub	r3,r9,r8
   4b360:	344d803a 	cmpltu	r6,r6,r17
   4b364:	19a7c83a 	sub	r19,r3,r6
   4b368:	3825883a 	mov	r18,r7
   4b36c:	983f8a1e 	bne	r19,zero,4b198 <__alt_data_end+0xfffd9198>
   4b370:	8809883a 	mov	r4,r17
   4b374:	004d6140 	call	4d614 <__clzsi2>
   4b378:	10800804 	addi	r2,r2,32
   4b37c:	10fffe04 	addi	r3,r2,-8
   4b380:	010007c4 	movi	r4,31
   4b384:	20ff890e 	bge	r4,r3,4b1ac <__alt_data_end+0xfffd91ac>
   4b388:	10bff604 	addi	r2,r2,-40
   4b38c:	8884983a 	sll	r2,r17,r2
   4b390:	0023883a 	mov	r17,zero
   4b394:	1c3f8c0e 	bge	r3,r16,4b1c8 <__alt_data_end+0xfffd91c8>
   4b398:	023fe034 	movhi	r8,65408
   4b39c:	423fffc4 	addi	r8,r8,-1
   4b3a0:	80e1c83a 	sub	r16,r16,r3
   4b3a4:	1210703a 	and	r8,r2,r8
   4b3a8:	003f3806 	br	4b08c <__alt_data_end+0xfffd908c>
   4b3ac:	9007883a 	mov	r3,r18
   4b3b0:	0011883a 	mov	r8,zero
   4b3b4:	0005883a 	mov	r2,zero
   4b3b8:	003f4c06 	br	4b0ec <__alt_data_end+0xfffd90ec>
   4b3bc:	498cb03a 	or	r6,r9,r6
   4b3c0:	300cc03a 	cmpne	r6,r6,zero
   4b3c4:	0007883a 	mov	r3,zero
   4b3c8:	003f6806 	br	4b16c <__alt_data_end+0xfffd916c>
   4b3cc:	20009c1e 	bne	r4,zero,4b640 <__adddf3+0x630>
   4b3d0:	80800044 	addi	r2,r16,1
   4b3d4:	1141ffcc 	andi	r5,r2,2047
   4b3d8:	01000044 	movi	r4,1
   4b3dc:	2140670e 	bge	r4,r5,4b57c <__adddf3+0x56c>
   4b3e0:	0101ffc4 	movi	r4,2047
   4b3e4:	11007f26 	beq	r2,r4,4b5e4 <__adddf3+0x5d4>
   4b3e8:	898d883a 	add	r6,r17,r6
   4b3ec:	4247883a 	add	r3,r8,r9
   4b3f0:	3451803a 	cmpltu	r8,r6,r17
   4b3f4:	40d1883a 	add	r8,r8,r3
   4b3f8:	402297fa 	slli	r17,r8,31
   4b3fc:	300cd07a 	srli	r6,r6,1
   4b400:	4010d07a 	srli	r8,r8,1
   4b404:	1021883a 	mov	r16,r2
   4b408:	89a2b03a 	or	r17,r17,r6
   4b40c:	003f1f06 	br	4b08c <__alt_data_end+0xfffd908c>
   4b410:	0081ffc4 	movi	r2,2047
   4b414:	80bf481e 	bne	r16,r2,4b138 <__alt_data_end+0xfffd9138>
   4b418:	003f1c06 	br	4b08c <__alt_data_end+0xfffd908c>
   4b41c:	843ff844 	addi	r16,r16,-31
   4b420:	01000804 	movi	r4,32
   4b424:	1406d83a 	srl	r3,r2,r16
   4b428:	41005026 	beq	r8,r4,4b56c <__adddf3+0x55c>
   4b42c:	01001004 	movi	r4,64
   4b430:	2211c83a 	sub	r8,r4,r8
   4b434:	1204983a 	sll	r2,r2,r8
   4b438:	88a2b03a 	or	r17,r17,r2
   4b43c:	8822c03a 	cmpne	r17,r17,zero
   4b440:	1c62b03a 	or	r17,r3,r17
   4b444:	0011883a 	mov	r8,zero
   4b448:	0021883a 	mov	r16,zero
   4b44c:	003f7106 	br	4b214 <__alt_data_end+0xfffd9214>
   4b450:	193ff804 	addi	r4,r3,-32
   4b454:	00800804 	movi	r2,32
   4b458:	4908d83a 	srl	r4,r9,r4
   4b45c:	18804526 	beq	r3,r2,4b574 <__adddf3+0x564>
   4b460:	00801004 	movi	r2,64
   4b464:	10c5c83a 	sub	r2,r2,r3
   4b468:	4886983a 	sll	r3,r9,r2
   4b46c:	198cb03a 	or	r6,r3,r6
   4b470:	300cc03a 	cmpne	r6,r6,zero
   4b474:	218cb03a 	or	r6,r4,r6
   4b478:	0007883a 	mov	r3,zero
   4b47c:	003f3b06 	br	4b16c <__alt_data_end+0xfffd916c>
   4b480:	80002a26 	beq	r16,zero,4b52c <__adddf3+0x51c>
   4b484:	0101ffc4 	movi	r4,2047
   4b488:	11006826 	beq	r2,r4,4b62c <__adddf3+0x61c>
   4b48c:	00c7c83a 	sub	r3,zero,r3
   4b490:	42002034 	orhi	r8,r8,128
   4b494:	01000e04 	movi	r4,56
   4b498:	20c07c16 	blt	r4,r3,4b68c <__adddf3+0x67c>
   4b49c:	010007c4 	movi	r4,31
   4b4a0:	20c0da16 	blt	r4,r3,4b80c <__adddf3+0x7fc>
   4b4a4:	01000804 	movi	r4,32
   4b4a8:	20c9c83a 	sub	r4,r4,r3
   4b4ac:	4114983a 	sll	r10,r8,r4
   4b4b0:	88cad83a 	srl	r5,r17,r3
   4b4b4:	8908983a 	sll	r4,r17,r4
   4b4b8:	40c6d83a 	srl	r3,r8,r3
   4b4bc:	5162b03a 	or	r17,r10,r5
   4b4c0:	2008c03a 	cmpne	r4,r4,zero
   4b4c4:	8922b03a 	or	r17,r17,r4
   4b4c8:	3463c83a 	sub	r17,r6,r17
   4b4cc:	48c7c83a 	sub	r3,r9,r3
   4b4d0:	344d803a 	cmpltu	r6,r6,r17
   4b4d4:	1991c83a 	sub	r8,r3,r6
   4b4d8:	1021883a 	mov	r16,r2
   4b4dc:	3825883a 	mov	r18,r7
   4b4e0:	003f2706 	br	4b180 <__alt_data_end+0xfffd9180>
   4b4e4:	24d0b03a 	or	r8,r4,r19
   4b4e8:	40001b1e 	bne	r8,zero,4b558 <__adddf3+0x548>
   4b4ec:	0005883a 	mov	r2,zero
   4b4f0:	0007883a 	mov	r3,zero
   4b4f4:	0021883a 	mov	r16,zero
   4b4f8:	003f4d06 	br	4b230 <__alt_data_end+0xfffd9230>
   4b4fc:	008007c4 	movi	r2,31
   4b500:	11003c16 	blt	r2,r4,4b5f4 <__adddf3+0x5e4>
   4b504:	00800804 	movi	r2,32
   4b508:	1105c83a 	sub	r2,r2,r4
   4b50c:	488e983a 	sll	r7,r9,r2
   4b510:	310ad83a 	srl	r5,r6,r4
   4b514:	3084983a 	sll	r2,r6,r2
   4b518:	4912d83a 	srl	r9,r9,r4
   4b51c:	394ab03a 	or	r5,r7,r5
   4b520:	1004c03a 	cmpne	r2,r2,zero
   4b524:	288ab03a 	or	r5,r5,r2
   4b528:	003f5306 	br	4b278 <__alt_data_end+0xfffd9278>
   4b52c:	4448b03a 	or	r4,r8,r17
   4b530:	20003e26 	beq	r4,zero,4b62c <__adddf3+0x61c>
   4b534:	00c6303a 	nor	r3,zero,r3
   4b538:	18003a1e 	bne	r3,zero,4b624 <__adddf3+0x614>
   4b53c:	3463c83a 	sub	r17,r6,r17
   4b540:	4a07c83a 	sub	r3,r9,r8
   4b544:	344d803a 	cmpltu	r6,r6,r17
   4b548:	1991c83a 	sub	r8,r3,r6
   4b54c:	1021883a 	mov	r16,r2
   4b550:	3825883a 	mov	r18,r7
   4b554:	003f0a06 	br	4b180 <__alt_data_end+0xfffd9180>
   4b558:	2023883a 	mov	r17,r4
   4b55c:	003f0d06 	br	4b194 <__alt_data_end+0xfffd9194>
   4b560:	0081ffc4 	movi	r2,2047
   4b564:	80bf3f1e 	bne	r16,r2,4b264 <__alt_data_end+0xfffd9264>
   4b568:	003ec806 	br	4b08c <__alt_data_end+0xfffd908c>
   4b56c:	0005883a 	mov	r2,zero
   4b570:	003fb106 	br	4b438 <__alt_data_end+0xfffd9438>
   4b574:	0007883a 	mov	r3,zero
   4b578:	003fbc06 	br	4b46c <__alt_data_end+0xfffd946c>
   4b57c:	4444b03a 	or	r2,r8,r17
   4b580:	8000871e 	bne	r16,zero,4b7a0 <__adddf3+0x790>
   4b584:	1000ba26 	beq	r2,zero,4b870 <__adddf3+0x860>
   4b588:	4984b03a 	or	r2,r9,r6
   4b58c:	103ebf26 	beq	r2,zero,4b08c <__alt_data_end+0xfffd908c>
   4b590:	8985883a 	add	r2,r17,r6
   4b594:	4247883a 	add	r3,r8,r9
   4b598:	1451803a 	cmpltu	r8,r2,r17
   4b59c:	40d1883a 	add	r8,r8,r3
   4b5a0:	40c0202c 	andhi	r3,r8,128
   4b5a4:	1023883a 	mov	r17,r2
   4b5a8:	183f1a26 	beq	r3,zero,4b214 <__alt_data_end+0xfffd9214>
   4b5ac:	00bfe034 	movhi	r2,65408
   4b5b0:	10bfffc4 	addi	r2,r2,-1
   4b5b4:	2021883a 	mov	r16,r4
   4b5b8:	4090703a 	and	r8,r8,r2
   4b5bc:	003eb306 	br	4b08c <__alt_data_end+0xfffd908c>
   4b5c0:	4444b03a 	or	r2,r8,r17
   4b5c4:	8000291e 	bne	r16,zero,4b66c <__adddf3+0x65c>
   4b5c8:	10004b1e 	bne	r2,zero,4b6f8 <__adddf3+0x6e8>
   4b5cc:	4990b03a 	or	r8,r9,r6
   4b5d0:	40008b26 	beq	r8,zero,4b800 <__adddf3+0x7f0>
   4b5d4:	4811883a 	mov	r8,r9
   4b5d8:	3023883a 	mov	r17,r6
   4b5dc:	3825883a 	mov	r18,r7
   4b5e0:	003eaa06 	br	4b08c <__alt_data_end+0xfffd908c>
   4b5e4:	1021883a 	mov	r16,r2
   4b5e8:	0011883a 	mov	r8,zero
   4b5ec:	0005883a 	mov	r2,zero
   4b5f0:	003f0f06 	br	4b230 <__alt_data_end+0xfffd9230>
   4b5f4:	217ff804 	addi	r5,r4,-32
   4b5f8:	00800804 	movi	r2,32
   4b5fc:	494ad83a 	srl	r5,r9,r5
   4b600:	20807d26 	beq	r4,r2,4b7f8 <__adddf3+0x7e8>
   4b604:	00801004 	movi	r2,64
   4b608:	1109c83a 	sub	r4,r2,r4
   4b60c:	4912983a 	sll	r9,r9,r4
   4b610:	498cb03a 	or	r6,r9,r6
   4b614:	300cc03a 	cmpne	r6,r6,zero
   4b618:	298ab03a 	or	r5,r5,r6
   4b61c:	0013883a 	mov	r9,zero
   4b620:	003f1506 	br	4b278 <__alt_data_end+0xfffd9278>
   4b624:	0101ffc4 	movi	r4,2047
   4b628:	113f9a1e 	bne	r2,r4,4b494 <__alt_data_end+0xfffd9494>
   4b62c:	4811883a 	mov	r8,r9
   4b630:	3023883a 	mov	r17,r6
   4b634:	1021883a 	mov	r16,r2
   4b638:	3825883a 	mov	r18,r7
   4b63c:	003e9306 	br	4b08c <__alt_data_end+0xfffd908c>
   4b640:	8000161e 	bne	r16,zero,4b69c <__adddf3+0x68c>
   4b644:	444ab03a 	or	r5,r8,r17
   4b648:	28005126 	beq	r5,zero,4b790 <__adddf3+0x780>
   4b64c:	0108303a 	nor	r4,zero,r4
   4b650:	20004d1e 	bne	r4,zero,4b788 <__adddf3+0x778>
   4b654:	89a3883a 	add	r17,r17,r6
   4b658:	4253883a 	add	r9,r8,r9
   4b65c:	898d803a 	cmpltu	r6,r17,r6
   4b660:	3251883a 	add	r8,r6,r9
   4b664:	1021883a 	mov	r16,r2
   4b668:	003f0806 	br	4b28c <__alt_data_end+0xfffd928c>
   4b66c:	1000301e 	bne	r2,zero,4b730 <__adddf3+0x720>
   4b670:	4984b03a 	or	r2,r9,r6
   4b674:	10007126 	beq	r2,zero,4b83c <__adddf3+0x82c>
   4b678:	4811883a 	mov	r8,r9
   4b67c:	3023883a 	mov	r17,r6
   4b680:	3825883a 	mov	r18,r7
   4b684:	0401ffc4 	movi	r16,2047
   4b688:	003e8006 	br	4b08c <__alt_data_end+0xfffd908c>
   4b68c:	4462b03a 	or	r17,r8,r17
   4b690:	8822c03a 	cmpne	r17,r17,zero
   4b694:	0007883a 	mov	r3,zero
   4b698:	003f8b06 	br	4b4c8 <__alt_data_end+0xfffd94c8>
   4b69c:	0141ffc4 	movi	r5,2047
   4b6a0:	11403b26 	beq	r2,r5,4b790 <__adddf3+0x780>
   4b6a4:	0109c83a 	sub	r4,zero,r4
   4b6a8:	42002034 	orhi	r8,r8,128
   4b6ac:	01400e04 	movi	r5,56
   4b6b0:	29006716 	blt	r5,r4,4b850 <__adddf3+0x840>
   4b6b4:	014007c4 	movi	r5,31
   4b6b8:	29007016 	blt	r5,r4,4b87c <__adddf3+0x86c>
   4b6bc:	01400804 	movi	r5,32
   4b6c0:	290bc83a 	sub	r5,r5,r4
   4b6c4:	4154983a 	sll	r10,r8,r5
   4b6c8:	890ed83a 	srl	r7,r17,r4
   4b6cc:	894a983a 	sll	r5,r17,r5
   4b6d0:	4108d83a 	srl	r4,r8,r4
   4b6d4:	51e2b03a 	or	r17,r10,r7
   4b6d8:	280ac03a 	cmpne	r5,r5,zero
   4b6dc:	8962b03a 	or	r17,r17,r5
   4b6e0:	89a3883a 	add	r17,r17,r6
   4b6e4:	2253883a 	add	r9,r4,r9
   4b6e8:	898d803a 	cmpltu	r6,r17,r6
   4b6ec:	3251883a 	add	r8,r6,r9
   4b6f0:	1021883a 	mov	r16,r2
   4b6f4:	003ee506 	br	4b28c <__alt_data_end+0xfffd928c>
   4b6f8:	4984b03a 	or	r2,r9,r6
   4b6fc:	103e6326 	beq	r2,zero,4b08c <__alt_data_end+0xfffd908c>
   4b700:	8987c83a 	sub	r3,r17,r6
   4b704:	88c9803a 	cmpltu	r4,r17,r3
   4b708:	4245c83a 	sub	r2,r8,r9
   4b70c:	1105c83a 	sub	r2,r2,r4
   4b710:	1100202c 	andhi	r4,r2,128
   4b714:	203ebb26 	beq	r4,zero,4b204 <__alt_data_end+0xfffd9204>
   4b718:	3463c83a 	sub	r17,r6,r17
   4b71c:	4a07c83a 	sub	r3,r9,r8
   4b720:	344d803a 	cmpltu	r6,r6,r17
   4b724:	1991c83a 	sub	r8,r3,r6
   4b728:	3825883a 	mov	r18,r7
   4b72c:	003e5706 	br	4b08c <__alt_data_end+0xfffd908c>
   4b730:	4984b03a 	or	r2,r9,r6
   4b734:	10002e26 	beq	r2,zero,4b7f0 <__adddf3+0x7e0>
   4b738:	4004d0fa 	srli	r2,r8,3
   4b73c:	8822d0fa 	srli	r17,r17,3
   4b740:	4010977a 	slli	r8,r8,29
   4b744:	10c0022c 	andhi	r3,r2,8
   4b748:	4462b03a 	or	r17,r8,r17
   4b74c:	18000826 	beq	r3,zero,4b770 <__adddf3+0x760>
   4b750:	4808d0fa 	srli	r4,r9,3
   4b754:	20c0022c 	andhi	r3,r4,8
   4b758:	1800051e 	bne	r3,zero,4b770 <__adddf3+0x760>
   4b75c:	300cd0fa 	srli	r6,r6,3
   4b760:	4806977a 	slli	r3,r9,29
   4b764:	2005883a 	mov	r2,r4
   4b768:	3825883a 	mov	r18,r7
   4b76c:	19a2b03a 	or	r17,r3,r6
   4b770:	8810d77a 	srli	r8,r17,29
   4b774:	100490fa 	slli	r2,r2,3
   4b778:	882290fa 	slli	r17,r17,3
   4b77c:	0401ffc4 	movi	r16,2047
   4b780:	4090b03a 	or	r8,r8,r2
   4b784:	003e4106 	br	4b08c <__alt_data_end+0xfffd908c>
   4b788:	0141ffc4 	movi	r5,2047
   4b78c:	117fc71e 	bne	r2,r5,4b6ac <__alt_data_end+0xfffd96ac>
   4b790:	4811883a 	mov	r8,r9
   4b794:	3023883a 	mov	r17,r6
   4b798:	1021883a 	mov	r16,r2
   4b79c:	003e3b06 	br	4b08c <__alt_data_end+0xfffd908c>
   4b7a0:	10002f26 	beq	r2,zero,4b860 <__adddf3+0x850>
   4b7a4:	4984b03a 	or	r2,r9,r6
   4b7a8:	10001126 	beq	r2,zero,4b7f0 <__adddf3+0x7e0>
   4b7ac:	4004d0fa 	srli	r2,r8,3
   4b7b0:	8822d0fa 	srli	r17,r17,3
   4b7b4:	4010977a 	slli	r8,r8,29
   4b7b8:	10c0022c 	andhi	r3,r2,8
   4b7bc:	4462b03a 	or	r17,r8,r17
   4b7c0:	183feb26 	beq	r3,zero,4b770 <__alt_data_end+0xfffd9770>
   4b7c4:	4808d0fa 	srli	r4,r9,3
   4b7c8:	20c0022c 	andhi	r3,r4,8
   4b7cc:	183fe81e 	bne	r3,zero,4b770 <__alt_data_end+0xfffd9770>
   4b7d0:	300cd0fa 	srli	r6,r6,3
   4b7d4:	4806977a 	slli	r3,r9,29
   4b7d8:	2005883a 	mov	r2,r4
   4b7dc:	19a2b03a 	or	r17,r3,r6
   4b7e0:	003fe306 	br	4b770 <__alt_data_end+0xfffd9770>
   4b7e4:	0011883a 	mov	r8,zero
   4b7e8:	0005883a 	mov	r2,zero
   4b7ec:	003e3f06 	br	4b0ec <__alt_data_end+0xfffd90ec>
   4b7f0:	0401ffc4 	movi	r16,2047
   4b7f4:	003e2506 	br	4b08c <__alt_data_end+0xfffd908c>
   4b7f8:	0013883a 	mov	r9,zero
   4b7fc:	003f8406 	br	4b610 <__alt_data_end+0xfffd9610>
   4b800:	0005883a 	mov	r2,zero
   4b804:	0007883a 	mov	r3,zero
   4b808:	003e8906 	br	4b230 <__alt_data_end+0xfffd9230>
   4b80c:	197ff804 	addi	r5,r3,-32
   4b810:	01000804 	movi	r4,32
   4b814:	414ad83a 	srl	r5,r8,r5
   4b818:	19002426 	beq	r3,r4,4b8ac <__adddf3+0x89c>
   4b81c:	01001004 	movi	r4,64
   4b820:	20c7c83a 	sub	r3,r4,r3
   4b824:	40c6983a 	sll	r3,r8,r3
   4b828:	1c46b03a 	or	r3,r3,r17
   4b82c:	1806c03a 	cmpne	r3,r3,zero
   4b830:	28e2b03a 	or	r17,r5,r3
   4b834:	0007883a 	mov	r3,zero
   4b838:	003f2306 	br	4b4c8 <__alt_data_end+0xfffd94c8>
   4b83c:	0007883a 	mov	r3,zero
   4b840:	5811883a 	mov	r8,r11
   4b844:	00bfffc4 	movi	r2,-1
   4b848:	0401ffc4 	movi	r16,2047
   4b84c:	003e7806 	br	4b230 <__alt_data_end+0xfffd9230>
   4b850:	4462b03a 	or	r17,r8,r17
   4b854:	8822c03a 	cmpne	r17,r17,zero
   4b858:	0009883a 	mov	r4,zero
   4b85c:	003fa006 	br	4b6e0 <__alt_data_end+0xfffd96e0>
   4b860:	4811883a 	mov	r8,r9
   4b864:	3023883a 	mov	r17,r6
   4b868:	0401ffc4 	movi	r16,2047
   4b86c:	003e0706 	br	4b08c <__alt_data_end+0xfffd908c>
   4b870:	4811883a 	mov	r8,r9
   4b874:	3023883a 	mov	r17,r6
   4b878:	003e0406 	br	4b08c <__alt_data_end+0xfffd908c>
   4b87c:	21fff804 	addi	r7,r4,-32
   4b880:	01400804 	movi	r5,32
   4b884:	41ced83a 	srl	r7,r8,r7
   4b888:	21400a26 	beq	r4,r5,4b8b4 <__adddf3+0x8a4>
   4b88c:	01401004 	movi	r5,64
   4b890:	2909c83a 	sub	r4,r5,r4
   4b894:	4108983a 	sll	r4,r8,r4
   4b898:	2448b03a 	or	r4,r4,r17
   4b89c:	2008c03a 	cmpne	r4,r4,zero
   4b8a0:	3922b03a 	or	r17,r7,r4
   4b8a4:	0009883a 	mov	r4,zero
   4b8a8:	003f8d06 	br	4b6e0 <__alt_data_end+0xfffd96e0>
   4b8ac:	0007883a 	mov	r3,zero
   4b8b0:	003fdd06 	br	4b828 <__alt_data_end+0xfffd9828>
   4b8b4:	0009883a 	mov	r4,zero
   4b8b8:	003ff706 	br	4b898 <__alt_data_end+0xfffd9898>

0004b8bc <__divdf3>:
   4b8bc:	defff204 	addi	sp,sp,-56
   4b8c0:	dd400915 	stw	r21,36(sp)
   4b8c4:	282ad53a 	srli	r21,r5,20
   4b8c8:	dd000815 	stw	r20,32(sp)
   4b8cc:	2828d7fa 	srli	r20,r5,31
   4b8d0:	dc000415 	stw	r16,16(sp)
   4b8d4:	04000434 	movhi	r16,16
   4b8d8:	df000c15 	stw	fp,48(sp)
   4b8dc:	843fffc4 	addi	r16,r16,-1
   4b8e0:	dfc00d15 	stw	ra,52(sp)
   4b8e4:	ddc00b15 	stw	r23,44(sp)
   4b8e8:	dd800a15 	stw	r22,40(sp)
   4b8ec:	dcc00715 	stw	r19,28(sp)
   4b8f0:	dc800615 	stw	r18,24(sp)
   4b8f4:	dc400515 	stw	r17,20(sp)
   4b8f8:	ad41ffcc 	andi	r21,r21,2047
   4b8fc:	2c20703a 	and	r16,r5,r16
   4b900:	a7003fcc 	andi	fp,r20,255
   4b904:	a8006126 	beq	r21,zero,4ba8c <__divdf3+0x1d0>
   4b908:	0081ffc4 	movi	r2,2047
   4b90c:	2025883a 	mov	r18,r4
   4b910:	a8803726 	beq	r21,r2,4b9f0 <__divdf3+0x134>
   4b914:	80800434 	orhi	r2,r16,16
   4b918:	100490fa 	slli	r2,r2,3
   4b91c:	2020d77a 	srli	r16,r4,29
   4b920:	202490fa 	slli	r18,r4,3
   4b924:	ad7f0044 	addi	r21,r21,-1023
   4b928:	80a0b03a 	or	r16,r16,r2
   4b92c:	0027883a 	mov	r19,zero
   4b930:	0013883a 	mov	r9,zero
   4b934:	3804d53a 	srli	r2,r7,20
   4b938:	382cd7fa 	srli	r22,r7,31
   4b93c:	04400434 	movhi	r17,16
   4b940:	8c7fffc4 	addi	r17,r17,-1
   4b944:	1081ffcc 	andi	r2,r2,2047
   4b948:	3011883a 	mov	r8,r6
   4b94c:	3c62703a 	and	r17,r7,r17
   4b950:	b5c03fcc 	andi	r23,r22,255
   4b954:	10006c26 	beq	r2,zero,4bb08 <__divdf3+0x24c>
   4b958:	00c1ffc4 	movi	r3,2047
   4b95c:	10c06426 	beq	r2,r3,4baf0 <__divdf3+0x234>
   4b960:	88c00434 	orhi	r3,r17,16
   4b964:	180690fa 	slli	r3,r3,3
   4b968:	3022d77a 	srli	r17,r6,29
   4b96c:	301090fa 	slli	r8,r6,3
   4b970:	10bf0044 	addi	r2,r2,-1023
   4b974:	88e2b03a 	or	r17,r17,r3
   4b978:	000f883a 	mov	r7,zero
   4b97c:	a58cf03a 	xor	r6,r20,r22
   4b980:	3cc8b03a 	or	r4,r7,r19
   4b984:	a8abc83a 	sub	r21,r21,r2
   4b988:	008003c4 	movi	r2,15
   4b98c:	3007883a 	mov	r3,r6
   4b990:	34c03fcc 	andi	r19,r6,255
   4b994:	11009036 	bltu	r2,r4,4bbd8 <__divdf3+0x31c>
   4b998:	200890ba 	slli	r4,r4,2
   4b99c:	00800174 	movhi	r2,5
   4b9a0:	10ae6c04 	addi	r2,r2,-18000
   4b9a4:	2089883a 	add	r4,r4,r2
   4b9a8:	20800017 	ldw	r2,0(r4)
   4b9ac:	1000683a 	jmp	r2
   4b9b0:	0004bbd8 	cmpnei	zero,zero,4847
   4b9b4:	0004ba28 	cmpgeui	zero,zero,4840
   4b9b8:	0004bbc8 	cmpgei	zero,zero,4847
   4b9bc:	0004ba1c 	xori	zero,zero,4840
   4b9c0:	0004bbc8 	cmpgei	zero,zero,4847
   4b9c4:	0004bb9c 	xori	zero,zero,4846
   4b9c8:	0004bbc8 	cmpgei	zero,zero,4847
   4b9cc:	0004ba1c 	xori	zero,zero,4840
   4b9d0:	0004ba28 	cmpgeui	zero,zero,4840
   4b9d4:	0004ba28 	cmpgeui	zero,zero,4840
   4b9d8:	0004bb9c 	xori	zero,zero,4846
   4b9dc:	0004ba1c 	xori	zero,zero,4840
   4b9e0:	0004ba0c 	andi	zero,zero,4840
   4b9e4:	0004ba0c 	andi	zero,zero,4840
   4b9e8:	0004ba0c 	andi	zero,zero,4840
   4b9ec:	0004bebc 	xorhi	zero,zero,4858
   4b9f0:	2404b03a 	or	r2,r4,r16
   4b9f4:	1000661e 	bne	r2,zero,4bb90 <__divdf3+0x2d4>
   4b9f8:	04c00204 	movi	r19,8
   4b9fc:	0021883a 	mov	r16,zero
   4ba00:	0025883a 	mov	r18,zero
   4ba04:	02400084 	movi	r9,2
   4ba08:	003fca06 	br	4b934 <__alt_data_end+0xfffd9934>
   4ba0c:	8023883a 	mov	r17,r16
   4ba10:	9011883a 	mov	r8,r18
   4ba14:	e02f883a 	mov	r23,fp
   4ba18:	480f883a 	mov	r7,r9
   4ba1c:	00800084 	movi	r2,2
   4ba20:	3881311e 	bne	r7,r2,4bee8 <__divdf3+0x62c>
   4ba24:	b827883a 	mov	r19,r23
   4ba28:	98c0004c 	andi	r3,r19,1
   4ba2c:	0081ffc4 	movi	r2,2047
   4ba30:	000b883a 	mov	r5,zero
   4ba34:	0025883a 	mov	r18,zero
   4ba38:	1004953a 	slli	r2,r2,20
   4ba3c:	18c03fcc 	andi	r3,r3,255
   4ba40:	04400434 	movhi	r17,16
   4ba44:	8c7fffc4 	addi	r17,r17,-1
   4ba48:	180697fa 	slli	r3,r3,31
   4ba4c:	2c4a703a 	and	r5,r5,r17
   4ba50:	288ab03a 	or	r5,r5,r2
   4ba54:	28c6b03a 	or	r3,r5,r3
   4ba58:	9005883a 	mov	r2,r18
   4ba5c:	dfc00d17 	ldw	ra,52(sp)
   4ba60:	df000c17 	ldw	fp,48(sp)
   4ba64:	ddc00b17 	ldw	r23,44(sp)
   4ba68:	dd800a17 	ldw	r22,40(sp)
   4ba6c:	dd400917 	ldw	r21,36(sp)
   4ba70:	dd000817 	ldw	r20,32(sp)
   4ba74:	dcc00717 	ldw	r19,28(sp)
   4ba78:	dc800617 	ldw	r18,24(sp)
   4ba7c:	dc400517 	ldw	r17,20(sp)
   4ba80:	dc000417 	ldw	r16,16(sp)
   4ba84:	dec00e04 	addi	sp,sp,56
   4ba88:	f800283a 	ret
   4ba8c:	2404b03a 	or	r2,r4,r16
   4ba90:	2027883a 	mov	r19,r4
   4ba94:	10003926 	beq	r2,zero,4bb7c <__divdf3+0x2c0>
   4ba98:	80012e26 	beq	r16,zero,4bf54 <__divdf3+0x698>
   4ba9c:	8009883a 	mov	r4,r16
   4baa0:	d9800315 	stw	r6,12(sp)
   4baa4:	d9c00215 	stw	r7,8(sp)
   4baa8:	004d6140 	call	4d614 <__clzsi2>
   4baac:	d9800317 	ldw	r6,12(sp)
   4bab0:	d9c00217 	ldw	r7,8(sp)
   4bab4:	113ffd44 	addi	r4,r2,-11
   4bab8:	00c00704 	movi	r3,28
   4babc:	19012116 	blt	r3,r4,4bf44 <__divdf3+0x688>
   4bac0:	00c00744 	movi	r3,29
   4bac4:	147ffe04 	addi	r17,r2,-8
   4bac8:	1907c83a 	sub	r3,r3,r4
   4bacc:	8460983a 	sll	r16,r16,r17
   4bad0:	98c6d83a 	srl	r3,r19,r3
   4bad4:	9c64983a 	sll	r18,r19,r17
   4bad8:	1c20b03a 	or	r16,r3,r16
   4badc:	1080fcc4 	addi	r2,r2,1011
   4bae0:	00abc83a 	sub	r21,zero,r2
   4bae4:	0027883a 	mov	r19,zero
   4bae8:	0013883a 	mov	r9,zero
   4baec:	003f9106 	br	4b934 <__alt_data_end+0xfffd9934>
   4baf0:	3446b03a 	or	r3,r6,r17
   4baf4:	18001f1e 	bne	r3,zero,4bb74 <__divdf3+0x2b8>
   4baf8:	0023883a 	mov	r17,zero
   4bafc:	0011883a 	mov	r8,zero
   4bb00:	01c00084 	movi	r7,2
   4bb04:	003f9d06 	br	4b97c <__alt_data_end+0xfffd997c>
   4bb08:	3446b03a 	or	r3,r6,r17
   4bb0c:	18001526 	beq	r3,zero,4bb64 <__divdf3+0x2a8>
   4bb10:	88011b26 	beq	r17,zero,4bf80 <__divdf3+0x6c4>
   4bb14:	8809883a 	mov	r4,r17
   4bb18:	d9800315 	stw	r6,12(sp)
   4bb1c:	da400115 	stw	r9,4(sp)
   4bb20:	004d6140 	call	4d614 <__clzsi2>
   4bb24:	d9800317 	ldw	r6,12(sp)
   4bb28:	da400117 	ldw	r9,4(sp)
   4bb2c:	113ffd44 	addi	r4,r2,-11
   4bb30:	00c00704 	movi	r3,28
   4bb34:	19010e16 	blt	r3,r4,4bf70 <__divdf3+0x6b4>
   4bb38:	00c00744 	movi	r3,29
   4bb3c:	123ffe04 	addi	r8,r2,-8
   4bb40:	1907c83a 	sub	r3,r3,r4
   4bb44:	8a22983a 	sll	r17,r17,r8
   4bb48:	30c6d83a 	srl	r3,r6,r3
   4bb4c:	3210983a 	sll	r8,r6,r8
   4bb50:	1c62b03a 	or	r17,r3,r17
   4bb54:	1080fcc4 	addi	r2,r2,1011
   4bb58:	0085c83a 	sub	r2,zero,r2
   4bb5c:	000f883a 	mov	r7,zero
   4bb60:	003f8606 	br	4b97c <__alt_data_end+0xfffd997c>
   4bb64:	0023883a 	mov	r17,zero
   4bb68:	0011883a 	mov	r8,zero
   4bb6c:	01c00044 	movi	r7,1
   4bb70:	003f8206 	br	4b97c <__alt_data_end+0xfffd997c>
   4bb74:	01c000c4 	movi	r7,3
   4bb78:	003f8006 	br	4b97c <__alt_data_end+0xfffd997c>
   4bb7c:	04c00104 	movi	r19,4
   4bb80:	0021883a 	mov	r16,zero
   4bb84:	0025883a 	mov	r18,zero
   4bb88:	02400044 	movi	r9,1
   4bb8c:	003f6906 	br	4b934 <__alt_data_end+0xfffd9934>
   4bb90:	04c00304 	movi	r19,12
   4bb94:	024000c4 	movi	r9,3
   4bb98:	003f6606 	br	4b934 <__alt_data_end+0xfffd9934>
   4bb9c:	01400434 	movhi	r5,16
   4bba0:	0007883a 	mov	r3,zero
   4bba4:	297fffc4 	addi	r5,r5,-1
   4bba8:	04bfffc4 	movi	r18,-1
   4bbac:	0081ffc4 	movi	r2,2047
   4bbb0:	003fa106 	br	4ba38 <__alt_data_end+0xfffd9a38>
   4bbb4:	00c00044 	movi	r3,1
   4bbb8:	1887c83a 	sub	r3,r3,r2
   4bbbc:	01000e04 	movi	r4,56
   4bbc0:	20c1210e 	bge	r4,r3,4c048 <__divdf3+0x78c>
   4bbc4:	98c0004c 	andi	r3,r19,1
   4bbc8:	0005883a 	mov	r2,zero
   4bbcc:	000b883a 	mov	r5,zero
   4bbd0:	0025883a 	mov	r18,zero
   4bbd4:	003f9806 	br	4ba38 <__alt_data_end+0xfffd9a38>
   4bbd8:	8c00fd36 	bltu	r17,r16,4bfd0 <__divdf3+0x714>
   4bbdc:	8440fb26 	beq	r16,r17,4bfcc <__divdf3+0x710>
   4bbe0:	8007883a 	mov	r3,r16
   4bbe4:	ad7fffc4 	addi	r21,r21,-1
   4bbe8:	0021883a 	mov	r16,zero
   4bbec:	4004d63a 	srli	r2,r8,24
   4bbf0:	8822923a 	slli	r17,r17,8
   4bbf4:	1809883a 	mov	r4,r3
   4bbf8:	402c923a 	slli	r22,r8,8
   4bbfc:	88b8b03a 	or	fp,r17,r2
   4bc00:	e028d43a 	srli	r20,fp,16
   4bc04:	d8c00015 	stw	r3,0(sp)
   4bc08:	e5ffffcc 	andi	r23,fp,65535
   4bc0c:	a00b883a 	mov	r5,r20
   4bc10:	004af540 	call	4af54 <__udivsi3>
   4bc14:	d8c00017 	ldw	r3,0(sp)
   4bc18:	a00b883a 	mov	r5,r20
   4bc1c:	d8800315 	stw	r2,12(sp)
   4bc20:	1809883a 	mov	r4,r3
   4bc24:	004afb80 	call	4afb8 <__umodsi3>
   4bc28:	d9800317 	ldw	r6,12(sp)
   4bc2c:	1006943a 	slli	r3,r2,16
   4bc30:	9004d43a 	srli	r2,r18,16
   4bc34:	b9a3383a 	mul	r17,r23,r6
   4bc38:	10c4b03a 	or	r2,r2,r3
   4bc3c:	1440062e 	bgeu	r2,r17,4bc58 <__divdf3+0x39c>
   4bc40:	1705883a 	add	r2,r2,fp
   4bc44:	30ffffc4 	addi	r3,r6,-1
   4bc48:	1700ee36 	bltu	r2,fp,4c004 <__divdf3+0x748>
   4bc4c:	1440ed2e 	bgeu	r2,r17,4c004 <__divdf3+0x748>
   4bc50:	31bfff84 	addi	r6,r6,-2
   4bc54:	1705883a 	add	r2,r2,fp
   4bc58:	1463c83a 	sub	r17,r2,r17
   4bc5c:	a00b883a 	mov	r5,r20
   4bc60:	8809883a 	mov	r4,r17
   4bc64:	d9800315 	stw	r6,12(sp)
   4bc68:	004af540 	call	4af54 <__udivsi3>
   4bc6c:	a00b883a 	mov	r5,r20
   4bc70:	8809883a 	mov	r4,r17
   4bc74:	d8800215 	stw	r2,8(sp)
   4bc78:	004afb80 	call	4afb8 <__umodsi3>
   4bc7c:	d9c00217 	ldw	r7,8(sp)
   4bc80:	1004943a 	slli	r2,r2,16
   4bc84:	94bfffcc 	andi	r18,r18,65535
   4bc88:	b9d1383a 	mul	r8,r23,r7
   4bc8c:	90a4b03a 	or	r18,r18,r2
   4bc90:	d9800317 	ldw	r6,12(sp)
   4bc94:	9200062e 	bgeu	r18,r8,4bcb0 <__divdf3+0x3f4>
   4bc98:	9725883a 	add	r18,r18,fp
   4bc9c:	38bfffc4 	addi	r2,r7,-1
   4bca0:	9700d636 	bltu	r18,fp,4bffc <__divdf3+0x740>
   4bca4:	9200d52e 	bgeu	r18,r8,4bffc <__divdf3+0x740>
   4bca8:	39ffff84 	addi	r7,r7,-2
   4bcac:	9725883a 	add	r18,r18,fp
   4bcb0:	3004943a 	slli	r2,r6,16
   4bcb4:	b012d43a 	srli	r9,r22,16
   4bcb8:	b1bfffcc 	andi	r6,r22,65535
   4bcbc:	11e2b03a 	or	r17,r2,r7
   4bcc0:	8806d43a 	srli	r3,r17,16
   4bcc4:	893fffcc 	andi	r4,r17,65535
   4bcc8:	218b383a 	mul	r5,r4,r6
   4bccc:	30c5383a 	mul	r2,r6,r3
   4bcd0:	2249383a 	mul	r4,r4,r9
   4bcd4:	280ed43a 	srli	r7,r5,16
   4bcd8:	9225c83a 	sub	r18,r18,r8
   4bcdc:	2089883a 	add	r4,r4,r2
   4bce0:	3909883a 	add	r4,r7,r4
   4bce4:	1a47383a 	mul	r3,r3,r9
   4bce8:	2080022e 	bgeu	r4,r2,4bcf4 <__divdf3+0x438>
   4bcec:	00800074 	movhi	r2,1
   4bcf0:	1887883a 	add	r3,r3,r2
   4bcf4:	2004d43a 	srli	r2,r4,16
   4bcf8:	2008943a 	slli	r4,r4,16
   4bcfc:	297fffcc 	andi	r5,r5,65535
   4bd00:	10c7883a 	add	r3,r2,r3
   4bd04:	2149883a 	add	r4,r4,r5
   4bd08:	90c0a536 	bltu	r18,r3,4bfa0 <__divdf3+0x6e4>
   4bd0c:	90c0bf26 	beq	r18,r3,4c00c <__divdf3+0x750>
   4bd10:	90c7c83a 	sub	r3,r18,r3
   4bd14:	810fc83a 	sub	r7,r16,r4
   4bd18:	81e5803a 	cmpltu	r18,r16,r7
   4bd1c:	1ca5c83a 	sub	r18,r3,r18
   4bd20:	e480c126 	beq	fp,r18,4c028 <__divdf3+0x76c>
   4bd24:	a00b883a 	mov	r5,r20
   4bd28:	9009883a 	mov	r4,r18
   4bd2c:	d9800315 	stw	r6,12(sp)
   4bd30:	d9c00215 	stw	r7,8(sp)
   4bd34:	da400115 	stw	r9,4(sp)
   4bd38:	004af540 	call	4af54 <__udivsi3>
   4bd3c:	a00b883a 	mov	r5,r20
   4bd40:	9009883a 	mov	r4,r18
   4bd44:	d8800015 	stw	r2,0(sp)
   4bd48:	004afb80 	call	4afb8 <__umodsi3>
   4bd4c:	d9c00217 	ldw	r7,8(sp)
   4bd50:	da000017 	ldw	r8,0(sp)
   4bd54:	1006943a 	slli	r3,r2,16
   4bd58:	3804d43a 	srli	r2,r7,16
   4bd5c:	ba21383a 	mul	r16,r23,r8
   4bd60:	d9800317 	ldw	r6,12(sp)
   4bd64:	10c4b03a 	or	r2,r2,r3
   4bd68:	da400117 	ldw	r9,4(sp)
   4bd6c:	1400062e 	bgeu	r2,r16,4bd88 <__divdf3+0x4cc>
   4bd70:	1705883a 	add	r2,r2,fp
   4bd74:	40ffffc4 	addi	r3,r8,-1
   4bd78:	1700ad36 	bltu	r2,fp,4c030 <__divdf3+0x774>
   4bd7c:	1400ac2e 	bgeu	r2,r16,4c030 <__divdf3+0x774>
   4bd80:	423fff84 	addi	r8,r8,-2
   4bd84:	1705883a 	add	r2,r2,fp
   4bd88:	1421c83a 	sub	r16,r2,r16
   4bd8c:	a00b883a 	mov	r5,r20
   4bd90:	8009883a 	mov	r4,r16
   4bd94:	d9800315 	stw	r6,12(sp)
   4bd98:	d9c00215 	stw	r7,8(sp)
   4bd9c:	da000015 	stw	r8,0(sp)
   4bda0:	da400115 	stw	r9,4(sp)
   4bda4:	004af540 	call	4af54 <__udivsi3>
   4bda8:	8009883a 	mov	r4,r16
   4bdac:	a00b883a 	mov	r5,r20
   4bdb0:	1025883a 	mov	r18,r2
   4bdb4:	004afb80 	call	4afb8 <__umodsi3>
   4bdb8:	d9c00217 	ldw	r7,8(sp)
   4bdbc:	1004943a 	slli	r2,r2,16
   4bdc0:	bcaf383a 	mul	r23,r23,r18
   4bdc4:	393fffcc 	andi	r4,r7,65535
   4bdc8:	2088b03a 	or	r4,r4,r2
   4bdcc:	d9800317 	ldw	r6,12(sp)
   4bdd0:	da000017 	ldw	r8,0(sp)
   4bdd4:	da400117 	ldw	r9,4(sp)
   4bdd8:	25c0062e 	bgeu	r4,r23,4bdf4 <__divdf3+0x538>
   4bddc:	2709883a 	add	r4,r4,fp
   4bde0:	90bfffc4 	addi	r2,r18,-1
   4bde4:	27009436 	bltu	r4,fp,4c038 <__divdf3+0x77c>
   4bde8:	25c0932e 	bgeu	r4,r23,4c038 <__divdf3+0x77c>
   4bdec:	94bfff84 	addi	r18,r18,-2
   4bdf0:	2709883a 	add	r4,r4,fp
   4bdf4:	4004943a 	slli	r2,r8,16
   4bdf8:	25efc83a 	sub	r23,r4,r23
   4bdfc:	1490b03a 	or	r8,r2,r18
   4be00:	4008d43a 	srli	r4,r8,16
   4be04:	40ffffcc 	andi	r3,r8,65535
   4be08:	30c5383a 	mul	r2,r6,r3
   4be0c:	1a47383a 	mul	r3,r3,r9
   4be10:	310d383a 	mul	r6,r6,r4
   4be14:	100ad43a 	srli	r5,r2,16
   4be18:	4913383a 	mul	r9,r9,r4
   4be1c:	1987883a 	add	r3,r3,r6
   4be20:	28c7883a 	add	r3,r5,r3
   4be24:	1980022e 	bgeu	r3,r6,4be30 <__divdf3+0x574>
   4be28:	01000074 	movhi	r4,1
   4be2c:	4913883a 	add	r9,r9,r4
   4be30:	1808d43a 	srli	r4,r3,16
   4be34:	1806943a 	slli	r3,r3,16
   4be38:	10bfffcc 	andi	r2,r2,65535
   4be3c:	2253883a 	add	r9,r4,r9
   4be40:	1887883a 	add	r3,r3,r2
   4be44:	ba403836 	bltu	r23,r9,4bf28 <__divdf3+0x66c>
   4be48:	ba403626 	beq	r23,r9,4bf24 <__divdf3+0x668>
   4be4c:	42000054 	ori	r8,r8,1
   4be50:	a880ffc4 	addi	r2,r21,1023
   4be54:	00bf570e 	bge	zero,r2,4bbb4 <__alt_data_end+0xfffd9bb4>
   4be58:	40c001cc 	andi	r3,r8,7
   4be5c:	18000726 	beq	r3,zero,4be7c <__divdf3+0x5c0>
   4be60:	40c003cc 	andi	r3,r8,15
   4be64:	01000104 	movi	r4,4
   4be68:	19000426 	beq	r3,r4,4be7c <__divdf3+0x5c0>
   4be6c:	4107883a 	add	r3,r8,r4
   4be70:	1a11803a 	cmpltu	r8,r3,r8
   4be74:	8a23883a 	add	r17,r17,r8
   4be78:	1811883a 	mov	r8,r3
   4be7c:	88c0402c 	andhi	r3,r17,256
   4be80:	18000426 	beq	r3,zero,4be94 <__divdf3+0x5d8>
   4be84:	00ffc034 	movhi	r3,65280
   4be88:	18ffffc4 	addi	r3,r3,-1
   4be8c:	a8810004 	addi	r2,r21,1024
   4be90:	88e2703a 	and	r17,r17,r3
   4be94:	00c1ff84 	movi	r3,2046
   4be98:	18bee316 	blt	r3,r2,4ba28 <__alt_data_end+0xfffd9a28>
   4be9c:	8824977a 	slli	r18,r17,29
   4bea0:	4010d0fa 	srli	r8,r8,3
   4bea4:	8822927a 	slli	r17,r17,9
   4bea8:	1081ffcc 	andi	r2,r2,2047
   4beac:	9224b03a 	or	r18,r18,r8
   4beb0:	880ad33a 	srli	r5,r17,12
   4beb4:	98c0004c 	andi	r3,r19,1
   4beb8:	003edf06 	br	4ba38 <__alt_data_end+0xfffd9a38>
   4bebc:	8080022c 	andhi	r2,r16,8
   4bec0:	10001226 	beq	r2,zero,4bf0c <__divdf3+0x650>
   4bec4:	8880022c 	andhi	r2,r17,8
   4bec8:	1000101e 	bne	r2,zero,4bf0c <__divdf3+0x650>
   4becc:	00800434 	movhi	r2,16
   4bed0:	89400234 	orhi	r5,r17,8
   4bed4:	10bfffc4 	addi	r2,r2,-1
   4bed8:	b007883a 	mov	r3,r22
   4bedc:	288a703a 	and	r5,r5,r2
   4bee0:	4025883a 	mov	r18,r8
   4bee4:	003f3106 	br	4bbac <__alt_data_end+0xfffd9bac>
   4bee8:	008000c4 	movi	r2,3
   4beec:	3880a626 	beq	r7,r2,4c188 <__divdf3+0x8cc>
   4bef0:	00800044 	movi	r2,1
   4bef4:	3880521e 	bne	r7,r2,4c040 <__divdf3+0x784>
   4bef8:	b807883a 	mov	r3,r23
   4befc:	0005883a 	mov	r2,zero
   4bf00:	000b883a 	mov	r5,zero
   4bf04:	0025883a 	mov	r18,zero
   4bf08:	003ecb06 	br	4ba38 <__alt_data_end+0xfffd9a38>
   4bf0c:	00800434 	movhi	r2,16
   4bf10:	81400234 	orhi	r5,r16,8
   4bf14:	10bfffc4 	addi	r2,r2,-1
   4bf18:	a007883a 	mov	r3,r20
   4bf1c:	288a703a 	and	r5,r5,r2
   4bf20:	003f2206 	br	4bbac <__alt_data_end+0xfffd9bac>
   4bf24:	183fca26 	beq	r3,zero,4be50 <__alt_data_end+0xfffd9e50>
   4bf28:	e5ef883a 	add	r23,fp,r23
   4bf2c:	40bfffc4 	addi	r2,r8,-1
   4bf30:	bf00392e 	bgeu	r23,fp,4c018 <__divdf3+0x75c>
   4bf34:	1011883a 	mov	r8,r2
   4bf38:	ba7fc41e 	bne	r23,r9,4be4c <__alt_data_end+0xfffd9e4c>
   4bf3c:	b0ffc31e 	bne	r22,r3,4be4c <__alt_data_end+0xfffd9e4c>
   4bf40:	003fc306 	br	4be50 <__alt_data_end+0xfffd9e50>
   4bf44:	143ff604 	addi	r16,r2,-40
   4bf48:	9c20983a 	sll	r16,r19,r16
   4bf4c:	0025883a 	mov	r18,zero
   4bf50:	003ee206 	br	4badc <__alt_data_end+0xfffd9adc>
   4bf54:	d9800315 	stw	r6,12(sp)
   4bf58:	d9c00215 	stw	r7,8(sp)
   4bf5c:	004d6140 	call	4d614 <__clzsi2>
   4bf60:	10800804 	addi	r2,r2,32
   4bf64:	d9c00217 	ldw	r7,8(sp)
   4bf68:	d9800317 	ldw	r6,12(sp)
   4bf6c:	003ed106 	br	4bab4 <__alt_data_end+0xfffd9ab4>
   4bf70:	147ff604 	addi	r17,r2,-40
   4bf74:	3462983a 	sll	r17,r6,r17
   4bf78:	0011883a 	mov	r8,zero
   4bf7c:	003ef506 	br	4bb54 <__alt_data_end+0xfffd9b54>
   4bf80:	3009883a 	mov	r4,r6
   4bf84:	d9800315 	stw	r6,12(sp)
   4bf88:	da400115 	stw	r9,4(sp)
   4bf8c:	004d6140 	call	4d614 <__clzsi2>
   4bf90:	10800804 	addi	r2,r2,32
   4bf94:	da400117 	ldw	r9,4(sp)
   4bf98:	d9800317 	ldw	r6,12(sp)
   4bf9c:	003ee306 	br	4bb2c <__alt_data_end+0xfffd9b2c>
   4bfa0:	85a1883a 	add	r16,r16,r22
   4bfa4:	8585803a 	cmpltu	r2,r16,r22
   4bfa8:	1705883a 	add	r2,r2,fp
   4bfac:	14a5883a 	add	r18,r2,r18
   4bfb0:	88bfffc4 	addi	r2,r17,-1
   4bfb4:	e4800c2e 	bgeu	fp,r18,4bfe8 <__divdf3+0x72c>
   4bfb8:	90c03e36 	bltu	r18,r3,4c0b4 <__divdf3+0x7f8>
   4bfbc:	1c806926 	beq	r3,r18,4c164 <__divdf3+0x8a8>
   4bfc0:	90c7c83a 	sub	r3,r18,r3
   4bfc4:	1023883a 	mov	r17,r2
   4bfc8:	003f5206 	br	4bd14 <__alt_data_end+0xfffd9d14>
   4bfcc:	923f0436 	bltu	r18,r8,4bbe0 <__alt_data_end+0xfffd9be0>
   4bfd0:	800897fa 	slli	r4,r16,31
   4bfd4:	9004d07a 	srli	r2,r18,1
   4bfd8:	8006d07a 	srli	r3,r16,1
   4bfdc:	902097fa 	slli	r16,r18,31
   4bfe0:	20a4b03a 	or	r18,r4,r2
   4bfe4:	003f0106 	br	4bbec <__alt_data_end+0xfffd9bec>
   4bfe8:	e4bff51e 	bne	fp,r18,4bfc0 <__alt_data_end+0xfffd9fc0>
   4bfec:	85bff22e 	bgeu	r16,r22,4bfb8 <__alt_data_end+0xfffd9fb8>
   4bff0:	e0c7c83a 	sub	r3,fp,r3
   4bff4:	1023883a 	mov	r17,r2
   4bff8:	003f4606 	br	4bd14 <__alt_data_end+0xfffd9d14>
   4bffc:	100f883a 	mov	r7,r2
   4c000:	003f2b06 	br	4bcb0 <__alt_data_end+0xfffd9cb0>
   4c004:	180d883a 	mov	r6,r3
   4c008:	003f1306 	br	4bc58 <__alt_data_end+0xfffd9c58>
   4c00c:	813fe436 	bltu	r16,r4,4bfa0 <__alt_data_end+0xfffd9fa0>
   4c010:	0007883a 	mov	r3,zero
   4c014:	003f3f06 	br	4bd14 <__alt_data_end+0xfffd9d14>
   4c018:	ba402c36 	bltu	r23,r9,4c0cc <__divdf3+0x810>
   4c01c:	4dc05426 	beq	r9,r23,4c170 <__divdf3+0x8b4>
   4c020:	1011883a 	mov	r8,r2
   4c024:	003f8906 	br	4be4c <__alt_data_end+0xfffd9e4c>
   4c028:	023fffc4 	movi	r8,-1
   4c02c:	003f8806 	br	4be50 <__alt_data_end+0xfffd9e50>
   4c030:	1811883a 	mov	r8,r3
   4c034:	003f5406 	br	4bd88 <__alt_data_end+0xfffd9d88>
   4c038:	1025883a 	mov	r18,r2
   4c03c:	003f6d06 	br	4bdf4 <__alt_data_end+0xfffd9df4>
   4c040:	b827883a 	mov	r19,r23
   4c044:	003f8206 	br	4be50 <__alt_data_end+0xfffd9e50>
   4c048:	010007c4 	movi	r4,31
   4c04c:	20c02616 	blt	r4,r3,4c0e8 <__divdf3+0x82c>
   4c050:	00800804 	movi	r2,32
   4c054:	10c5c83a 	sub	r2,r2,r3
   4c058:	888a983a 	sll	r5,r17,r2
   4c05c:	40c8d83a 	srl	r4,r8,r3
   4c060:	4084983a 	sll	r2,r8,r2
   4c064:	88e2d83a 	srl	r17,r17,r3
   4c068:	2906b03a 	or	r3,r5,r4
   4c06c:	1004c03a 	cmpne	r2,r2,zero
   4c070:	1886b03a 	or	r3,r3,r2
   4c074:	188001cc 	andi	r2,r3,7
   4c078:	10000726 	beq	r2,zero,4c098 <__divdf3+0x7dc>
   4c07c:	188003cc 	andi	r2,r3,15
   4c080:	01000104 	movi	r4,4
   4c084:	11000426 	beq	r2,r4,4c098 <__divdf3+0x7dc>
   4c088:	1805883a 	mov	r2,r3
   4c08c:	10c00104 	addi	r3,r2,4
   4c090:	1885803a 	cmpltu	r2,r3,r2
   4c094:	88a3883a 	add	r17,r17,r2
   4c098:	8880202c 	andhi	r2,r17,128
   4c09c:	10002726 	beq	r2,zero,4c13c <__divdf3+0x880>
   4c0a0:	98c0004c 	andi	r3,r19,1
   4c0a4:	00800044 	movi	r2,1
   4c0a8:	000b883a 	mov	r5,zero
   4c0ac:	0025883a 	mov	r18,zero
   4c0b0:	003e6106 	br	4ba38 <__alt_data_end+0xfffd9a38>
   4c0b4:	85a1883a 	add	r16,r16,r22
   4c0b8:	8585803a 	cmpltu	r2,r16,r22
   4c0bc:	1705883a 	add	r2,r2,fp
   4c0c0:	14a5883a 	add	r18,r2,r18
   4c0c4:	8c7fff84 	addi	r17,r17,-2
   4c0c8:	003f1106 	br	4bd10 <__alt_data_end+0xfffd9d10>
   4c0cc:	b589883a 	add	r4,r22,r22
   4c0d0:	25ad803a 	cmpltu	r22,r4,r22
   4c0d4:	b739883a 	add	fp,r22,fp
   4c0d8:	40bfff84 	addi	r2,r8,-2
   4c0dc:	bf2f883a 	add	r23,r23,fp
   4c0e0:	202d883a 	mov	r22,r4
   4c0e4:	003f9306 	br	4bf34 <__alt_data_end+0xfffd9f34>
   4c0e8:	013ff844 	movi	r4,-31
   4c0ec:	2085c83a 	sub	r2,r4,r2
   4c0f0:	8888d83a 	srl	r4,r17,r2
   4c0f4:	00800804 	movi	r2,32
   4c0f8:	18802126 	beq	r3,r2,4c180 <__divdf3+0x8c4>
   4c0fc:	00801004 	movi	r2,64
   4c100:	10c5c83a 	sub	r2,r2,r3
   4c104:	8884983a 	sll	r2,r17,r2
   4c108:	1204b03a 	or	r2,r2,r8
   4c10c:	1004c03a 	cmpne	r2,r2,zero
   4c110:	2084b03a 	or	r2,r4,r2
   4c114:	144001cc 	andi	r17,r2,7
   4c118:	88000d1e 	bne	r17,zero,4c150 <__divdf3+0x894>
   4c11c:	000b883a 	mov	r5,zero
   4c120:	1024d0fa 	srli	r18,r2,3
   4c124:	98c0004c 	andi	r3,r19,1
   4c128:	0005883a 	mov	r2,zero
   4c12c:	9464b03a 	or	r18,r18,r17
   4c130:	003e4106 	br	4ba38 <__alt_data_end+0xfffd9a38>
   4c134:	1007883a 	mov	r3,r2
   4c138:	0023883a 	mov	r17,zero
   4c13c:	880a927a 	slli	r5,r17,9
   4c140:	1805883a 	mov	r2,r3
   4c144:	8822977a 	slli	r17,r17,29
   4c148:	280ad33a 	srli	r5,r5,12
   4c14c:	003ff406 	br	4c120 <__alt_data_end+0xfffda120>
   4c150:	10c003cc 	andi	r3,r2,15
   4c154:	01000104 	movi	r4,4
   4c158:	193ff626 	beq	r3,r4,4c134 <__alt_data_end+0xfffda134>
   4c15c:	0023883a 	mov	r17,zero
   4c160:	003fca06 	br	4c08c <__alt_data_end+0xfffda08c>
   4c164:	813fd336 	bltu	r16,r4,4c0b4 <__alt_data_end+0xfffda0b4>
   4c168:	1023883a 	mov	r17,r2
   4c16c:	003fa806 	br	4c010 <__alt_data_end+0xfffda010>
   4c170:	b0ffd636 	bltu	r22,r3,4c0cc <__alt_data_end+0xfffda0cc>
   4c174:	1011883a 	mov	r8,r2
   4c178:	b0ff341e 	bne	r22,r3,4be4c <__alt_data_end+0xfffd9e4c>
   4c17c:	003f3406 	br	4be50 <__alt_data_end+0xfffd9e50>
   4c180:	0005883a 	mov	r2,zero
   4c184:	003fe006 	br	4c108 <__alt_data_end+0xfffda108>
   4c188:	00800434 	movhi	r2,16
   4c18c:	89400234 	orhi	r5,r17,8
   4c190:	10bfffc4 	addi	r2,r2,-1
   4c194:	b807883a 	mov	r3,r23
   4c198:	288a703a 	and	r5,r5,r2
   4c19c:	4025883a 	mov	r18,r8
   4c1a0:	003e8206 	br	4bbac <__alt_data_end+0xfffd9bac>

0004c1a4 <__eqdf2>:
   4c1a4:	2804d53a 	srli	r2,r5,20
   4c1a8:	3806d53a 	srli	r3,r7,20
   4c1ac:	02000434 	movhi	r8,16
   4c1b0:	423fffc4 	addi	r8,r8,-1
   4c1b4:	1081ffcc 	andi	r2,r2,2047
   4c1b8:	0281ffc4 	movi	r10,2047
   4c1bc:	2a12703a 	and	r9,r5,r8
   4c1c0:	18c1ffcc 	andi	r3,r3,2047
   4c1c4:	3a10703a 	and	r8,r7,r8
   4c1c8:	280ad7fa 	srli	r5,r5,31
   4c1cc:	380ed7fa 	srli	r7,r7,31
   4c1d0:	12801026 	beq	r2,r10,4c214 <__eqdf2+0x70>
   4c1d4:	0281ffc4 	movi	r10,2047
   4c1d8:	1a800a26 	beq	r3,r10,4c204 <__eqdf2+0x60>
   4c1dc:	10c00226 	beq	r2,r3,4c1e8 <__eqdf2+0x44>
   4c1e0:	00800044 	movi	r2,1
   4c1e4:	f800283a 	ret
   4c1e8:	4a3ffd1e 	bne	r9,r8,4c1e0 <__alt_data_end+0xfffda1e0>
   4c1ec:	21bffc1e 	bne	r4,r6,4c1e0 <__alt_data_end+0xfffda1e0>
   4c1f0:	29c00c26 	beq	r5,r7,4c224 <__eqdf2+0x80>
   4c1f4:	103ffa1e 	bne	r2,zero,4c1e0 <__alt_data_end+0xfffda1e0>
   4c1f8:	2244b03a 	or	r2,r4,r9
   4c1fc:	1004c03a 	cmpne	r2,r2,zero
   4c200:	f800283a 	ret
   4c204:	3214b03a 	or	r10,r6,r8
   4c208:	503ff426 	beq	r10,zero,4c1dc <__alt_data_end+0xfffda1dc>
   4c20c:	00800044 	movi	r2,1
   4c210:	f800283a 	ret
   4c214:	2254b03a 	or	r10,r4,r9
   4c218:	503fee26 	beq	r10,zero,4c1d4 <__alt_data_end+0xfffda1d4>
   4c21c:	00800044 	movi	r2,1
   4c220:	f800283a 	ret
   4c224:	0005883a 	mov	r2,zero
   4c228:	f800283a 	ret

0004c22c <__gedf2>:
   4c22c:	2804d53a 	srli	r2,r5,20
   4c230:	3806d53a 	srli	r3,r7,20
   4c234:	02000434 	movhi	r8,16
   4c238:	423fffc4 	addi	r8,r8,-1
   4c23c:	1081ffcc 	andi	r2,r2,2047
   4c240:	0241ffc4 	movi	r9,2047
   4c244:	2a14703a 	and	r10,r5,r8
   4c248:	18c1ffcc 	andi	r3,r3,2047
   4c24c:	3a10703a 	and	r8,r7,r8
   4c250:	280ad7fa 	srli	r5,r5,31
   4c254:	380ed7fa 	srli	r7,r7,31
   4c258:	12401d26 	beq	r2,r9,4c2d0 <__gedf2+0xa4>
   4c25c:	0241ffc4 	movi	r9,2047
   4c260:	1a401226 	beq	r3,r9,4c2ac <__gedf2+0x80>
   4c264:	1000081e 	bne	r2,zero,4c288 <__gedf2+0x5c>
   4c268:	2296b03a 	or	r11,r4,r10
   4c26c:	5813003a 	cmpeq	r9,r11,zero
   4c270:	1800091e 	bne	r3,zero,4c298 <__gedf2+0x6c>
   4c274:	3218b03a 	or	r12,r6,r8
   4c278:	6000071e 	bne	r12,zero,4c298 <__gedf2+0x6c>
   4c27c:	0005883a 	mov	r2,zero
   4c280:	5800101e 	bne	r11,zero,4c2c4 <__gedf2+0x98>
   4c284:	f800283a 	ret
   4c288:	18000c1e 	bne	r3,zero,4c2bc <__gedf2+0x90>
   4c28c:	3212b03a 	or	r9,r6,r8
   4c290:	48000c26 	beq	r9,zero,4c2c4 <__gedf2+0x98>
   4c294:	0013883a 	mov	r9,zero
   4c298:	39c03fcc 	andi	r7,r7,255
   4c29c:	48000826 	beq	r9,zero,4c2c0 <__gedf2+0x94>
   4c2a0:	38000926 	beq	r7,zero,4c2c8 <__gedf2+0x9c>
   4c2a4:	00800044 	movi	r2,1
   4c2a8:	f800283a 	ret
   4c2ac:	3212b03a 	or	r9,r6,r8
   4c2b0:	483fec26 	beq	r9,zero,4c264 <__alt_data_end+0xfffda264>
   4c2b4:	00bfff84 	movi	r2,-2
   4c2b8:	f800283a 	ret
   4c2bc:	39c03fcc 	andi	r7,r7,255
   4c2c0:	29c00626 	beq	r5,r7,4c2dc <__gedf2+0xb0>
   4c2c4:	283ff726 	beq	r5,zero,4c2a4 <__alt_data_end+0xfffda2a4>
   4c2c8:	00bfffc4 	movi	r2,-1
   4c2cc:	f800283a 	ret
   4c2d0:	2292b03a 	or	r9,r4,r10
   4c2d4:	483fe126 	beq	r9,zero,4c25c <__alt_data_end+0xfffda25c>
   4c2d8:	003ff606 	br	4c2b4 <__alt_data_end+0xfffda2b4>
   4c2dc:	18bff916 	blt	r3,r2,4c2c4 <__alt_data_end+0xfffda2c4>
   4c2e0:	10c00316 	blt	r2,r3,4c2f0 <__gedf2+0xc4>
   4c2e4:	42bff736 	bltu	r8,r10,4c2c4 <__alt_data_end+0xfffda2c4>
   4c2e8:	52000326 	beq	r10,r8,4c2f8 <__gedf2+0xcc>
   4c2ec:	5200042e 	bgeu	r10,r8,4c300 <__gedf2+0xd4>
   4c2f0:	283fec1e 	bne	r5,zero,4c2a4 <__alt_data_end+0xfffda2a4>
   4c2f4:	003ff406 	br	4c2c8 <__alt_data_end+0xfffda2c8>
   4c2f8:	313ff236 	bltu	r6,r4,4c2c4 <__alt_data_end+0xfffda2c4>
   4c2fc:	21bffc36 	bltu	r4,r6,4c2f0 <__alt_data_end+0xfffda2f0>
   4c300:	0005883a 	mov	r2,zero
   4c304:	f800283a 	ret

0004c308 <__ledf2>:
   4c308:	2804d53a 	srli	r2,r5,20
   4c30c:	3810d53a 	srli	r8,r7,20
   4c310:	00c00434 	movhi	r3,16
   4c314:	18ffffc4 	addi	r3,r3,-1
   4c318:	1081ffcc 	andi	r2,r2,2047
   4c31c:	0241ffc4 	movi	r9,2047
   4c320:	28d4703a 	and	r10,r5,r3
   4c324:	4201ffcc 	andi	r8,r8,2047
   4c328:	38c6703a 	and	r3,r7,r3
   4c32c:	280ad7fa 	srli	r5,r5,31
   4c330:	380ed7fa 	srli	r7,r7,31
   4c334:	12401f26 	beq	r2,r9,4c3b4 <__ledf2+0xac>
   4c338:	0241ffc4 	movi	r9,2047
   4c33c:	42401426 	beq	r8,r9,4c390 <__ledf2+0x88>
   4c340:	1000091e 	bne	r2,zero,4c368 <__ledf2+0x60>
   4c344:	2296b03a 	or	r11,r4,r10
   4c348:	5813003a 	cmpeq	r9,r11,zero
   4c34c:	29403fcc 	andi	r5,r5,255
   4c350:	40000a1e 	bne	r8,zero,4c37c <__ledf2+0x74>
   4c354:	30d8b03a 	or	r12,r6,r3
   4c358:	6000081e 	bne	r12,zero,4c37c <__ledf2+0x74>
   4c35c:	0005883a 	mov	r2,zero
   4c360:	5800111e 	bne	r11,zero,4c3a8 <__ledf2+0xa0>
   4c364:	f800283a 	ret
   4c368:	29403fcc 	andi	r5,r5,255
   4c36c:	40000c1e 	bne	r8,zero,4c3a0 <__ledf2+0x98>
   4c370:	30d2b03a 	or	r9,r6,r3
   4c374:	48000c26 	beq	r9,zero,4c3a8 <__ledf2+0xa0>
   4c378:	0013883a 	mov	r9,zero
   4c37c:	39c03fcc 	andi	r7,r7,255
   4c380:	48000826 	beq	r9,zero,4c3a4 <__ledf2+0x9c>
   4c384:	38001126 	beq	r7,zero,4c3cc <__ledf2+0xc4>
   4c388:	00800044 	movi	r2,1
   4c38c:	f800283a 	ret
   4c390:	30d2b03a 	or	r9,r6,r3
   4c394:	483fea26 	beq	r9,zero,4c340 <__alt_data_end+0xfffda340>
   4c398:	00800084 	movi	r2,2
   4c39c:	f800283a 	ret
   4c3a0:	39c03fcc 	andi	r7,r7,255
   4c3a4:	39400726 	beq	r7,r5,4c3c4 <__ledf2+0xbc>
   4c3a8:	2800081e 	bne	r5,zero,4c3cc <__ledf2+0xc4>
   4c3ac:	00800044 	movi	r2,1
   4c3b0:	f800283a 	ret
   4c3b4:	2292b03a 	or	r9,r4,r10
   4c3b8:	483fdf26 	beq	r9,zero,4c338 <__alt_data_end+0xfffda338>
   4c3bc:	00800084 	movi	r2,2
   4c3c0:	f800283a 	ret
   4c3c4:	4080030e 	bge	r8,r2,4c3d4 <__ledf2+0xcc>
   4c3c8:	383fef26 	beq	r7,zero,4c388 <__alt_data_end+0xfffda388>
   4c3cc:	00bfffc4 	movi	r2,-1
   4c3d0:	f800283a 	ret
   4c3d4:	123feb16 	blt	r2,r8,4c384 <__alt_data_end+0xfffda384>
   4c3d8:	1abff336 	bltu	r3,r10,4c3a8 <__alt_data_end+0xfffda3a8>
   4c3dc:	50c00326 	beq	r10,r3,4c3ec <__ledf2+0xe4>
   4c3e0:	50c0042e 	bgeu	r10,r3,4c3f4 <__ledf2+0xec>
   4c3e4:	283fe81e 	bne	r5,zero,4c388 <__alt_data_end+0xfffda388>
   4c3e8:	003ff806 	br	4c3cc <__alt_data_end+0xfffda3cc>
   4c3ec:	313fee36 	bltu	r6,r4,4c3a8 <__alt_data_end+0xfffda3a8>
   4c3f0:	21bffc36 	bltu	r4,r6,4c3e4 <__alt_data_end+0xfffda3e4>
   4c3f4:	0005883a 	mov	r2,zero
   4c3f8:	f800283a 	ret

0004c3fc <__muldf3>:
   4c3fc:	defff304 	addi	sp,sp,-52
   4c400:	2804d53a 	srli	r2,r5,20
   4c404:	dd800915 	stw	r22,36(sp)
   4c408:	282cd7fa 	srli	r22,r5,31
   4c40c:	dc000315 	stw	r16,12(sp)
   4c410:	04000434 	movhi	r16,16
   4c414:	dd400815 	stw	r21,32(sp)
   4c418:	dc800515 	stw	r18,20(sp)
   4c41c:	843fffc4 	addi	r16,r16,-1
   4c420:	dfc00c15 	stw	ra,48(sp)
   4c424:	df000b15 	stw	fp,44(sp)
   4c428:	ddc00a15 	stw	r23,40(sp)
   4c42c:	dd000715 	stw	r20,28(sp)
   4c430:	dcc00615 	stw	r19,24(sp)
   4c434:	dc400415 	stw	r17,16(sp)
   4c438:	1481ffcc 	andi	r18,r2,2047
   4c43c:	2c20703a 	and	r16,r5,r16
   4c440:	b02b883a 	mov	r21,r22
   4c444:	b2403fcc 	andi	r9,r22,255
   4c448:	90006026 	beq	r18,zero,4c5cc <__muldf3+0x1d0>
   4c44c:	0081ffc4 	movi	r2,2047
   4c450:	2029883a 	mov	r20,r4
   4c454:	90803626 	beq	r18,r2,4c530 <__muldf3+0x134>
   4c458:	80800434 	orhi	r2,r16,16
   4c45c:	100490fa 	slli	r2,r2,3
   4c460:	2020d77a 	srli	r16,r4,29
   4c464:	202890fa 	slli	r20,r4,3
   4c468:	94bf0044 	addi	r18,r18,-1023
   4c46c:	80a0b03a 	or	r16,r16,r2
   4c470:	0027883a 	mov	r19,zero
   4c474:	0039883a 	mov	fp,zero
   4c478:	3804d53a 	srli	r2,r7,20
   4c47c:	382ed7fa 	srli	r23,r7,31
   4c480:	04400434 	movhi	r17,16
   4c484:	8c7fffc4 	addi	r17,r17,-1
   4c488:	1081ffcc 	andi	r2,r2,2047
   4c48c:	3011883a 	mov	r8,r6
   4c490:	3c62703a 	and	r17,r7,r17
   4c494:	ba803fcc 	andi	r10,r23,255
   4c498:	10006d26 	beq	r2,zero,4c650 <__muldf3+0x254>
   4c49c:	00c1ffc4 	movi	r3,2047
   4c4a0:	10c06526 	beq	r2,r3,4c638 <__muldf3+0x23c>
   4c4a4:	88c00434 	orhi	r3,r17,16
   4c4a8:	180690fa 	slli	r3,r3,3
   4c4ac:	3022d77a 	srli	r17,r6,29
   4c4b0:	301090fa 	slli	r8,r6,3
   4c4b4:	10bf0044 	addi	r2,r2,-1023
   4c4b8:	88e2b03a 	or	r17,r17,r3
   4c4bc:	000b883a 	mov	r5,zero
   4c4c0:	9085883a 	add	r2,r18,r2
   4c4c4:	2cc8b03a 	or	r4,r5,r19
   4c4c8:	00c003c4 	movi	r3,15
   4c4cc:	bdacf03a 	xor	r22,r23,r22
   4c4d0:	12c00044 	addi	r11,r2,1
   4c4d4:	19009936 	bltu	r3,r4,4c73c <__muldf3+0x340>
   4c4d8:	200890ba 	slli	r4,r4,2
   4c4dc:	00c00174 	movhi	r3,5
   4c4e0:	18f13c04 	addi	r3,r3,-15120
   4c4e4:	20c9883a 	add	r4,r4,r3
   4c4e8:	20c00017 	ldw	r3,0(r4)
   4c4ec:	1800683a 	jmp	r3
   4c4f0:	0004c73c 	xorhi	zero,zero,4892
   4c4f4:	0004c550 	cmplti	zero,zero,4885
   4c4f8:	0004c550 	cmplti	zero,zero,4885
   4c4fc:	0004c54c 	andi	zero,zero,4885
   4c500:	0004c718 	cmpnei	zero,zero,4892
   4c504:	0004c718 	cmpnei	zero,zero,4892
   4c508:	0004c700 	call	4c70 <__alt_mem_onchip_memory2-0x3b390>
   4c50c:	0004c54c 	andi	zero,zero,4885
   4c510:	0004c718 	cmpnei	zero,zero,4892
   4c514:	0004c700 	call	4c70 <__alt_mem_onchip_memory2-0x3b390>
   4c518:	0004c718 	cmpnei	zero,zero,4892
   4c51c:	0004c54c 	andi	zero,zero,4885
   4c520:	0004c728 	cmpgeui	zero,zero,4892
   4c524:	0004c728 	cmpgeui	zero,zero,4892
   4c528:	0004c728 	cmpgeui	zero,zero,4892
   4c52c:	0004c944 	movi	zero,4901
   4c530:	2404b03a 	or	r2,r4,r16
   4c534:	10006f1e 	bne	r2,zero,4c6f4 <__muldf3+0x2f8>
   4c538:	04c00204 	movi	r19,8
   4c53c:	0021883a 	mov	r16,zero
   4c540:	0029883a 	mov	r20,zero
   4c544:	07000084 	movi	fp,2
   4c548:	003fcb06 	br	4c478 <__alt_data_end+0xfffda478>
   4c54c:	502d883a 	mov	r22,r10
   4c550:	00800084 	movi	r2,2
   4c554:	28805726 	beq	r5,r2,4c6b4 <__muldf3+0x2b8>
   4c558:	008000c4 	movi	r2,3
   4c55c:	28816626 	beq	r5,r2,4caf8 <__muldf3+0x6fc>
   4c560:	00800044 	movi	r2,1
   4c564:	2881411e 	bne	r5,r2,4ca6c <__muldf3+0x670>
   4c568:	b02b883a 	mov	r21,r22
   4c56c:	0005883a 	mov	r2,zero
   4c570:	000b883a 	mov	r5,zero
   4c574:	0029883a 	mov	r20,zero
   4c578:	1004953a 	slli	r2,r2,20
   4c57c:	a8c03fcc 	andi	r3,r21,255
   4c580:	04400434 	movhi	r17,16
   4c584:	8c7fffc4 	addi	r17,r17,-1
   4c588:	180697fa 	slli	r3,r3,31
   4c58c:	2c4a703a 	and	r5,r5,r17
   4c590:	288ab03a 	or	r5,r5,r2
   4c594:	28c6b03a 	or	r3,r5,r3
   4c598:	a005883a 	mov	r2,r20
   4c59c:	dfc00c17 	ldw	ra,48(sp)
   4c5a0:	df000b17 	ldw	fp,44(sp)
   4c5a4:	ddc00a17 	ldw	r23,40(sp)
   4c5a8:	dd800917 	ldw	r22,36(sp)
   4c5ac:	dd400817 	ldw	r21,32(sp)
   4c5b0:	dd000717 	ldw	r20,28(sp)
   4c5b4:	dcc00617 	ldw	r19,24(sp)
   4c5b8:	dc800517 	ldw	r18,20(sp)
   4c5bc:	dc400417 	ldw	r17,16(sp)
   4c5c0:	dc000317 	ldw	r16,12(sp)
   4c5c4:	dec00d04 	addi	sp,sp,52
   4c5c8:	f800283a 	ret
   4c5cc:	2404b03a 	or	r2,r4,r16
   4c5d0:	2027883a 	mov	r19,r4
   4c5d4:	10004226 	beq	r2,zero,4c6e0 <__muldf3+0x2e4>
   4c5d8:	8000fc26 	beq	r16,zero,4c9cc <__muldf3+0x5d0>
   4c5dc:	8009883a 	mov	r4,r16
   4c5e0:	d9800215 	stw	r6,8(sp)
   4c5e4:	d9c00015 	stw	r7,0(sp)
   4c5e8:	da400115 	stw	r9,4(sp)
   4c5ec:	004d6140 	call	4d614 <__clzsi2>
   4c5f0:	d9800217 	ldw	r6,8(sp)
   4c5f4:	d9c00017 	ldw	r7,0(sp)
   4c5f8:	da400117 	ldw	r9,4(sp)
   4c5fc:	113ffd44 	addi	r4,r2,-11
   4c600:	00c00704 	movi	r3,28
   4c604:	1900ed16 	blt	r3,r4,4c9bc <__muldf3+0x5c0>
   4c608:	00c00744 	movi	r3,29
   4c60c:	147ffe04 	addi	r17,r2,-8
   4c610:	1907c83a 	sub	r3,r3,r4
   4c614:	8460983a 	sll	r16,r16,r17
   4c618:	98c6d83a 	srl	r3,r19,r3
   4c61c:	9c68983a 	sll	r20,r19,r17
   4c620:	1c20b03a 	or	r16,r3,r16
   4c624:	1080fcc4 	addi	r2,r2,1011
   4c628:	00a5c83a 	sub	r18,zero,r2
   4c62c:	0027883a 	mov	r19,zero
   4c630:	0039883a 	mov	fp,zero
   4c634:	003f9006 	br	4c478 <__alt_data_end+0xfffda478>
   4c638:	3446b03a 	or	r3,r6,r17
   4c63c:	1800261e 	bne	r3,zero,4c6d8 <__muldf3+0x2dc>
   4c640:	0023883a 	mov	r17,zero
   4c644:	0011883a 	mov	r8,zero
   4c648:	01400084 	movi	r5,2
   4c64c:	003f9c06 	br	4c4c0 <__alt_data_end+0xfffda4c0>
   4c650:	3446b03a 	or	r3,r6,r17
   4c654:	18001c26 	beq	r3,zero,4c6c8 <__muldf3+0x2cc>
   4c658:	8800ce26 	beq	r17,zero,4c994 <__muldf3+0x598>
   4c65c:	8809883a 	mov	r4,r17
   4c660:	d9800215 	stw	r6,8(sp)
   4c664:	da400115 	stw	r9,4(sp)
   4c668:	da800015 	stw	r10,0(sp)
   4c66c:	004d6140 	call	4d614 <__clzsi2>
   4c670:	d9800217 	ldw	r6,8(sp)
   4c674:	da400117 	ldw	r9,4(sp)
   4c678:	da800017 	ldw	r10,0(sp)
   4c67c:	113ffd44 	addi	r4,r2,-11
   4c680:	00c00704 	movi	r3,28
   4c684:	1900bf16 	blt	r3,r4,4c984 <__muldf3+0x588>
   4c688:	00c00744 	movi	r3,29
   4c68c:	123ffe04 	addi	r8,r2,-8
   4c690:	1907c83a 	sub	r3,r3,r4
   4c694:	8a22983a 	sll	r17,r17,r8
   4c698:	30c6d83a 	srl	r3,r6,r3
   4c69c:	3210983a 	sll	r8,r6,r8
   4c6a0:	1c62b03a 	or	r17,r3,r17
   4c6a4:	1080fcc4 	addi	r2,r2,1011
   4c6a8:	0085c83a 	sub	r2,zero,r2
   4c6ac:	000b883a 	mov	r5,zero
   4c6b0:	003f8306 	br	4c4c0 <__alt_data_end+0xfffda4c0>
   4c6b4:	b02b883a 	mov	r21,r22
   4c6b8:	0081ffc4 	movi	r2,2047
   4c6bc:	000b883a 	mov	r5,zero
   4c6c0:	0029883a 	mov	r20,zero
   4c6c4:	003fac06 	br	4c578 <__alt_data_end+0xfffda578>
   4c6c8:	0023883a 	mov	r17,zero
   4c6cc:	0011883a 	mov	r8,zero
   4c6d0:	01400044 	movi	r5,1
   4c6d4:	003f7a06 	br	4c4c0 <__alt_data_end+0xfffda4c0>
   4c6d8:	014000c4 	movi	r5,3
   4c6dc:	003f7806 	br	4c4c0 <__alt_data_end+0xfffda4c0>
   4c6e0:	04c00104 	movi	r19,4
   4c6e4:	0021883a 	mov	r16,zero
   4c6e8:	0029883a 	mov	r20,zero
   4c6ec:	07000044 	movi	fp,1
   4c6f0:	003f6106 	br	4c478 <__alt_data_end+0xfffda478>
   4c6f4:	04c00304 	movi	r19,12
   4c6f8:	070000c4 	movi	fp,3
   4c6fc:	003f5e06 	br	4c478 <__alt_data_end+0xfffda478>
   4c700:	01400434 	movhi	r5,16
   4c704:	002b883a 	mov	r21,zero
   4c708:	297fffc4 	addi	r5,r5,-1
   4c70c:	053fffc4 	movi	r20,-1
   4c710:	0081ffc4 	movi	r2,2047
   4c714:	003f9806 	br	4c578 <__alt_data_end+0xfffda578>
   4c718:	8023883a 	mov	r17,r16
   4c71c:	a011883a 	mov	r8,r20
   4c720:	e00b883a 	mov	r5,fp
   4c724:	003f8a06 	br	4c550 <__alt_data_end+0xfffda550>
   4c728:	8023883a 	mov	r17,r16
   4c72c:	a011883a 	mov	r8,r20
   4c730:	482d883a 	mov	r22,r9
   4c734:	e00b883a 	mov	r5,fp
   4c738:	003f8506 	br	4c550 <__alt_data_end+0xfffda550>
   4c73c:	a00ad43a 	srli	r5,r20,16
   4c740:	401ad43a 	srli	r13,r8,16
   4c744:	a53fffcc 	andi	r20,r20,65535
   4c748:	423fffcc 	andi	r8,r8,65535
   4c74c:	4519383a 	mul	r12,r8,r20
   4c750:	4147383a 	mul	r3,r8,r5
   4c754:	6d09383a 	mul	r4,r13,r20
   4c758:	600cd43a 	srli	r6,r12,16
   4c75c:	2b5d383a 	mul	r14,r5,r13
   4c760:	20c9883a 	add	r4,r4,r3
   4c764:	310d883a 	add	r6,r6,r4
   4c768:	30c0022e 	bgeu	r6,r3,4c774 <__muldf3+0x378>
   4c76c:	00c00074 	movhi	r3,1
   4c770:	70dd883a 	add	r14,r14,r3
   4c774:	8826d43a 	srli	r19,r17,16
   4c778:	8bffffcc 	andi	r15,r17,65535
   4c77c:	7d23383a 	mul	r17,r15,r20
   4c780:	7949383a 	mul	r4,r15,r5
   4c784:	9d29383a 	mul	r20,r19,r20
   4c788:	8814d43a 	srli	r10,r17,16
   4c78c:	3012943a 	slli	r9,r6,16
   4c790:	a129883a 	add	r20,r20,r4
   4c794:	633fffcc 	andi	r12,r12,65535
   4c798:	5515883a 	add	r10,r10,r20
   4c79c:	3006d43a 	srli	r3,r6,16
   4c7a0:	4b13883a 	add	r9,r9,r12
   4c7a4:	2ccb383a 	mul	r5,r5,r19
   4c7a8:	5100022e 	bgeu	r10,r4,4c7b4 <__muldf3+0x3b8>
   4c7ac:	01000074 	movhi	r4,1
   4c7b0:	290b883a 	add	r5,r5,r4
   4c7b4:	802ad43a 	srli	r21,r16,16
   4c7b8:	843fffcc 	andi	r16,r16,65535
   4c7bc:	440d383a 	mul	r6,r8,r16
   4c7c0:	4565383a 	mul	r18,r8,r21
   4c7c4:	8349383a 	mul	r4,r16,r13
   4c7c8:	500e943a 	slli	r7,r10,16
   4c7cc:	3010d43a 	srli	r8,r6,16
   4c7d0:	5028d43a 	srli	r20,r10,16
   4c7d4:	2489883a 	add	r4,r4,r18
   4c7d8:	8abfffcc 	andi	r10,r17,65535
   4c7dc:	3a95883a 	add	r10,r7,r10
   4c7e0:	4119883a 	add	r12,r8,r4
   4c7e4:	a169883a 	add	r20,r20,r5
   4c7e8:	1a87883a 	add	r3,r3,r10
   4c7ec:	6d5b383a 	mul	r13,r13,r21
   4c7f0:	6480022e 	bgeu	r12,r18,4c7fc <__muldf3+0x400>
   4c7f4:	01000074 	movhi	r4,1
   4c7f8:	691b883a 	add	r13,r13,r4
   4c7fc:	7c25383a 	mul	r18,r15,r16
   4c800:	7d4b383a 	mul	r5,r15,r21
   4c804:	84cf383a 	mul	r7,r16,r19
   4c808:	901ed43a 	srli	r15,r18,16
   4c80c:	6008d43a 	srli	r4,r12,16
   4c810:	6010943a 	slli	r8,r12,16
   4c814:	394f883a 	add	r7,r7,r5
   4c818:	333fffcc 	andi	r12,r6,65535
   4c81c:	79df883a 	add	r15,r15,r7
   4c820:	235b883a 	add	r13,r4,r13
   4c824:	9d63383a 	mul	r17,r19,r21
   4c828:	4309883a 	add	r4,r8,r12
   4c82c:	7940022e 	bgeu	r15,r5,4c838 <__muldf3+0x43c>
   4c830:	01400074 	movhi	r5,1
   4c834:	8963883a 	add	r17,r17,r5
   4c838:	780a943a 	slli	r5,r15,16
   4c83c:	91bfffcc 	andi	r6,r18,65535
   4c840:	70c7883a 	add	r3,r14,r3
   4c844:	298d883a 	add	r6,r5,r6
   4c848:	1a8f803a 	cmpltu	r7,r3,r10
   4c84c:	350b883a 	add	r5,r6,r20
   4c850:	20c7883a 	add	r3,r4,r3
   4c854:	3955883a 	add	r10,r7,r5
   4c858:	1909803a 	cmpltu	r4,r3,r4
   4c85c:	6a91883a 	add	r8,r13,r10
   4c860:	780cd43a 	srli	r6,r15,16
   4c864:	2219883a 	add	r12,r4,r8
   4c868:	2d0b803a 	cmpltu	r5,r5,r20
   4c86c:	51cf803a 	cmpltu	r7,r10,r7
   4c870:	29ceb03a 	or	r7,r5,r7
   4c874:	4351803a 	cmpltu	r8,r8,r13
   4c878:	610b803a 	cmpltu	r5,r12,r4
   4c87c:	4148b03a 	or	r4,r8,r5
   4c880:	398f883a 	add	r7,r7,r6
   4c884:	3909883a 	add	r4,r7,r4
   4c888:	1810927a 	slli	r8,r3,9
   4c88c:	2449883a 	add	r4,r4,r17
   4c890:	2008927a 	slli	r4,r4,9
   4c894:	6022d5fa 	srli	r17,r12,23
   4c898:	1806d5fa 	srli	r3,r3,23
   4c89c:	4252b03a 	or	r9,r8,r9
   4c8a0:	600a927a 	slli	r5,r12,9
   4c8a4:	4810c03a 	cmpne	r8,r9,zero
   4c8a8:	2462b03a 	or	r17,r4,r17
   4c8ac:	40c6b03a 	or	r3,r8,r3
   4c8b0:	8900402c 	andhi	r4,r17,256
   4c8b4:	1950b03a 	or	r8,r3,r5
   4c8b8:	20000726 	beq	r4,zero,4c8d8 <__muldf3+0x4dc>
   4c8bc:	4006d07a 	srli	r3,r8,1
   4c8c0:	880497fa 	slli	r2,r17,31
   4c8c4:	4200004c 	andi	r8,r8,1
   4c8c8:	8822d07a 	srli	r17,r17,1
   4c8cc:	1a10b03a 	or	r8,r3,r8
   4c8d0:	1210b03a 	or	r8,r2,r8
   4c8d4:	5805883a 	mov	r2,r11
   4c8d8:	1140ffc4 	addi	r5,r2,1023
   4c8dc:	0140440e 	bge	zero,r5,4c9f0 <__muldf3+0x5f4>
   4c8e0:	40c001cc 	andi	r3,r8,7
   4c8e4:	18000726 	beq	r3,zero,4c904 <__muldf3+0x508>
   4c8e8:	40c003cc 	andi	r3,r8,15
   4c8ec:	01000104 	movi	r4,4
   4c8f0:	19000426 	beq	r3,r4,4c904 <__muldf3+0x508>
   4c8f4:	4107883a 	add	r3,r8,r4
   4c8f8:	1a11803a 	cmpltu	r8,r3,r8
   4c8fc:	8a23883a 	add	r17,r17,r8
   4c900:	1811883a 	mov	r8,r3
   4c904:	88c0402c 	andhi	r3,r17,256
   4c908:	18000426 	beq	r3,zero,4c91c <__muldf3+0x520>
   4c90c:	11410004 	addi	r5,r2,1024
   4c910:	00bfc034 	movhi	r2,65280
   4c914:	10bfffc4 	addi	r2,r2,-1
   4c918:	88a2703a 	and	r17,r17,r2
   4c91c:	0081ff84 	movi	r2,2046
   4c920:	117f6416 	blt	r2,r5,4c6b4 <__alt_data_end+0xfffda6b4>
   4c924:	8828977a 	slli	r20,r17,29
   4c928:	4010d0fa 	srli	r8,r8,3
   4c92c:	8822927a 	slli	r17,r17,9
   4c930:	2881ffcc 	andi	r2,r5,2047
   4c934:	a228b03a 	or	r20,r20,r8
   4c938:	880ad33a 	srli	r5,r17,12
   4c93c:	b02b883a 	mov	r21,r22
   4c940:	003f0d06 	br	4c578 <__alt_data_end+0xfffda578>
   4c944:	8080022c 	andhi	r2,r16,8
   4c948:	10000926 	beq	r2,zero,4c970 <__muldf3+0x574>
   4c94c:	8880022c 	andhi	r2,r17,8
   4c950:	1000071e 	bne	r2,zero,4c970 <__muldf3+0x574>
   4c954:	00800434 	movhi	r2,16
   4c958:	89400234 	orhi	r5,r17,8
   4c95c:	10bfffc4 	addi	r2,r2,-1
   4c960:	b82b883a 	mov	r21,r23
   4c964:	288a703a 	and	r5,r5,r2
   4c968:	4029883a 	mov	r20,r8
   4c96c:	003f6806 	br	4c710 <__alt_data_end+0xfffda710>
   4c970:	00800434 	movhi	r2,16
   4c974:	81400234 	orhi	r5,r16,8
   4c978:	10bfffc4 	addi	r2,r2,-1
   4c97c:	288a703a 	and	r5,r5,r2
   4c980:	003f6306 	br	4c710 <__alt_data_end+0xfffda710>
   4c984:	147ff604 	addi	r17,r2,-40
   4c988:	3462983a 	sll	r17,r6,r17
   4c98c:	0011883a 	mov	r8,zero
   4c990:	003f4406 	br	4c6a4 <__alt_data_end+0xfffda6a4>
   4c994:	3009883a 	mov	r4,r6
   4c998:	d9800215 	stw	r6,8(sp)
   4c99c:	da400115 	stw	r9,4(sp)
   4c9a0:	da800015 	stw	r10,0(sp)
   4c9a4:	004d6140 	call	4d614 <__clzsi2>
   4c9a8:	10800804 	addi	r2,r2,32
   4c9ac:	da800017 	ldw	r10,0(sp)
   4c9b0:	da400117 	ldw	r9,4(sp)
   4c9b4:	d9800217 	ldw	r6,8(sp)
   4c9b8:	003f3006 	br	4c67c <__alt_data_end+0xfffda67c>
   4c9bc:	143ff604 	addi	r16,r2,-40
   4c9c0:	9c20983a 	sll	r16,r19,r16
   4c9c4:	0029883a 	mov	r20,zero
   4c9c8:	003f1606 	br	4c624 <__alt_data_end+0xfffda624>
   4c9cc:	d9800215 	stw	r6,8(sp)
   4c9d0:	d9c00015 	stw	r7,0(sp)
   4c9d4:	da400115 	stw	r9,4(sp)
   4c9d8:	004d6140 	call	4d614 <__clzsi2>
   4c9dc:	10800804 	addi	r2,r2,32
   4c9e0:	da400117 	ldw	r9,4(sp)
   4c9e4:	d9c00017 	ldw	r7,0(sp)
   4c9e8:	d9800217 	ldw	r6,8(sp)
   4c9ec:	003f0306 	br	4c5fc <__alt_data_end+0xfffda5fc>
   4c9f0:	00c00044 	movi	r3,1
   4c9f4:	1947c83a 	sub	r3,r3,r5
   4c9f8:	00800e04 	movi	r2,56
   4c9fc:	10feda16 	blt	r2,r3,4c568 <__alt_data_end+0xfffda568>
   4ca00:	008007c4 	movi	r2,31
   4ca04:	10c01b16 	blt	r2,r3,4ca74 <__muldf3+0x678>
   4ca08:	00800804 	movi	r2,32
   4ca0c:	10c5c83a 	sub	r2,r2,r3
   4ca10:	888a983a 	sll	r5,r17,r2
   4ca14:	40c8d83a 	srl	r4,r8,r3
   4ca18:	4084983a 	sll	r2,r8,r2
   4ca1c:	88e2d83a 	srl	r17,r17,r3
   4ca20:	2906b03a 	or	r3,r5,r4
   4ca24:	1004c03a 	cmpne	r2,r2,zero
   4ca28:	1886b03a 	or	r3,r3,r2
   4ca2c:	188001cc 	andi	r2,r3,7
   4ca30:	10000726 	beq	r2,zero,4ca50 <__muldf3+0x654>
   4ca34:	188003cc 	andi	r2,r3,15
   4ca38:	01000104 	movi	r4,4
   4ca3c:	11000426 	beq	r2,r4,4ca50 <__muldf3+0x654>
   4ca40:	1805883a 	mov	r2,r3
   4ca44:	10c00104 	addi	r3,r2,4
   4ca48:	1885803a 	cmpltu	r2,r3,r2
   4ca4c:	88a3883a 	add	r17,r17,r2
   4ca50:	8880202c 	andhi	r2,r17,128
   4ca54:	10001c26 	beq	r2,zero,4cac8 <__muldf3+0x6cc>
   4ca58:	b02b883a 	mov	r21,r22
   4ca5c:	00800044 	movi	r2,1
   4ca60:	000b883a 	mov	r5,zero
   4ca64:	0029883a 	mov	r20,zero
   4ca68:	003ec306 	br	4c578 <__alt_data_end+0xfffda578>
   4ca6c:	5805883a 	mov	r2,r11
   4ca70:	003f9906 	br	4c8d8 <__alt_data_end+0xfffda8d8>
   4ca74:	00bff844 	movi	r2,-31
   4ca78:	1145c83a 	sub	r2,r2,r5
   4ca7c:	8888d83a 	srl	r4,r17,r2
   4ca80:	00800804 	movi	r2,32
   4ca84:	18801a26 	beq	r3,r2,4caf0 <__muldf3+0x6f4>
   4ca88:	00801004 	movi	r2,64
   4ca8c:	10c5c83a 	sub	r2,r2,r3
   4ca90:	8884983a 	sll	r2,r17,r2
   4ca94:	1204b03a 	or	r2,r2,r8
   4ca98:	1004c03a 	cmpne	r2,r2,zero
   4ca9c:	2084b03a 	or	r2,r4,r2
   4caa0:	144001cc 	andi	r17,r2,7
   4caa4:	88000d1e 	bne	r17,zero,4cadc <__muldf3+0x6e0>
   4caa8:	000b883a 	mov	r5,zero
   4caac:	1028d0fa 	srli	r20,r2,3
   4cab0:	b02b883a 	mov	r21,r22
   4cab4:	0005883a 	mov	r2,zero
   4cab8:	a468b03a 	or	r20,r20,r17
   4cabc:	003eae06 	br	4c578 <__alt_data_end+0xfffda578>
   4cac0:	1007883a 	mov	r3,r2
   4cac4:	0023883a 	mov	r17,zero
   4cac8:	880a927a 	slli	r5,r17,9
   4cacc:	1805883a 	mov	r2,r3
   4cad0:	8822977a 	slli	r17,r17,29
   4cad4:	280ad33a 	srli	r5,r5,12
   4cad8:	003ff406 	br	4caac <__alt_data_end+0xfffdaaac>
   4cadc:	10c003cc 	andi	r3,r2,15
   4cae0:	01000104 	movi	r4,4
   4cae4:	193ff626 	beq	r3,r4,4cac0 <__alt_data_end+0xfffdaac0>
   4cae8:	0023883a 	mov	r17,zero
   4caec:	003fd506 	br	4ca44 <__alt_data_end+0xfffdaa44>
   4caf0:	0005883a 	mov	r2,zero
   4caf4:	003fe706 	br	4ca94 <__alt_data_end+0xfffdaa94>
   4caf8:	00800434 	movhi	r2,16
   4cafc:	89400234 	orhi	r5,r17,8
   4cb00:	10bfffc4 	addi	r2,r2,-1
   4cb04:	b02b883a 	mov	r21,r22
   4cb08:	288a703a 	and	r5,r5,r2
   4cb0c:	4029883a 	mov	r20,r8
   4cb10:	003eff06 	br	4c710 <__alt_data_end+0xfffda710>

0004cb14 <__subdf3>:
   4cb14:	02000434 	movhi	r8,16
   4cb18:	423fffc4 	addi	r8,r8,-1
   4cb1c:	defffb04 	addi	sp,sp,-20
   4cb20:	2a14703a 	and	r10,r5,r8
   4cb24:	3812d53a 	srli	r9,r7,20
   4cb28:	3a10703a 	and	r8,r7,r8
   4cb2c:	2006d77a 	srli	r3,r4,29
   4cb30:	3004d77a 	srli	r2,r6,29
   4cb34:	dc000015 	stw	r16,0(sp)
   4cb38:	501490fa 	slli	r10,r10,3
   4cb3c:	2820d53a 	srli	r16,r5,20
   4cb40:	401090fa 	slli	r8,r8,3
   4cb44:	dc800215 	stw	r18,8(sp)
   4cb48:	dc400115 	stw	r17,4(sp)
   4cb4c:	dfc00415 	stw	ra,16(sp)
   4cb50:	202290fa 	slli	r17,r4,3
   4cb54:	dcc00315 	stw	r19,12(sp)
   4cb58:	4a41ffcc 	andi	r9,r9,2047
   4cb5c:	0101ffc4 	movi	r4,2047
   4cb60:	2824d7fa 	srli	r18,r5,31
   4cb64:	8401ffcc 	andi	r16,r16,2047
   4cb68:	50c6b03a 	or	r3,r10,r3
   4cb6c:	380ed7fa 	srli	r7,r7,31
   4cb70:	408ab03a 	or	r5,r8,r2
   4cb74:	300c90fa 	slli	r6,r6,3
   4cb78:	49009626 	beq	r9,r4,4cdd4 <__subdf3+0x2c0>
   4cb7c:	39c0005c 	xori	r7,r7,1
   4cb80:	8245c83a 	sub	r2,r16,r9
   4cb84:	3c807426 	beq	r7,r18,4cd58 <__subdf3+0x244>
   4cb88:	0080af0e 	bge	zero,r2,4ce48 <__subdf3+0x334>
   4cb8c:	48002a1e 	bne	r9,zero,4cc38 <__subdf3+0x124>
   4cb90:	2988b03a 	or	r4,r5,r6
   4cb94:	20009a1e 	bne	r4,zero,4ce00 <__subdf3+0x2ec>
   4cb98:	888001cc 	andi	r2,r17,7
   4cb9c:	10000726 	beq	r2,zero,4cbbc <__subdf3+0xa8>
   4cba0:	888003cc 	andi	r2,r17,15
   4cba4:	01000104 	movi	r4,4
   4cba8:	11000426 	beq	r2,r4,4cbbc <__subdf3+0xa8>
   4cbac:	890b883a 	add	r5,r17,r4
   4cbb0:	2c63803a 	cmpltu	r17,r5,r17
   4cbb4:	1c47883a 	add	r3,r3,r17
   4cbb8:	2823883a 	mov	r17,r5
   4cbbc:	1880202c 	andhi	r2,r3,128
   4cbc0:	10005926 	beq	r2,zero,4cd28 <__subdf3+0x214>
   4cbc4:	84000044 	addi	r16,r16,1
   4cbc8:	0081ffc4 	movi	r2,2047
   4cbcc:	8080be26 	beq	r16,r2,4cec8 <__subdf3+0x3b4>
   4cbd0:	017fe034 	movhi	r5,65408
   4cbd4:	297fffc4 	addi	r5,r5,-1
   4cbd8:	1946703a 	and	r3,r3,r5
   4cbdc:	1804977a 	slli	r2,r3,29
   4cbe0:	1806927a 	slli	r3,r3,9
   4cbe4:	8822d0fa 	srli	r17,r17,3
   4cbe8:	8401ffcc 	andi	r16,r16,2047
   4cbec:	180ad33a 	srli	r5,r3,12
   4cbf0:	9100004c 	andi	r4,r18,1
   4cbf4:	1444b03a 	or	r2,r2,r17
   4cbf8:	80c1ffcc 	andi	r3,r16,2047
   4cbfc:	1820953a 	slli	r16,r3,20
   4cc00:	20c03fcc 	andi	r3,r4,255
   4cc04:	180897fa 	slli	r4,r3,31
   4cc08:	00c00434 	movhi	r3,16
   4cc0c:	18ffffc4 	addi	r3,r3,-1
   4cc10:	28c6703a 	and	r3,r5,r3
   4cc14:	1c06b03a 	or	r3,r3,r16
   4cc18:	1906b03a 	or	r3,r3,r4
   4cc1c:	dfc00417 	ldw	ra,16(sp)
   4cc20:	dcc00317 	ldw	r19,12(sp)
   4cc24:	dc800217 	ldw	r18,8(sp)
   4cc28:	dc400117 	ldw	r17,4(sp)
   4cc2c:	dc000017 	ldw	r16,0(sp)
   4cc30:	dec00504 	addi	sp,sp,20
   4cc34:	f800283a 	ret
   4cc38:	0101ffc4 	movi	r4,2047
   4cc3c:	813fd626 	beq	r16,r4,4cb98 <__alt_data_end+0xfffdab98>
   4cc40:	29402034 	orhi	r5,r5,128
   4cc44:	01000e04 	movi	r4,56
   4cc48:	2080a316 	blt	r4,r2,4ced8 <__subdf3+0x3c4>
   4cc4c:	010007c4 	movi	r4,31
   4cc50:	2080c616 	blt	r4,r2,4cf6c <__subdf3+0x458>
   4cc54:	01000804 	movi	r4,32
   4cc58:	2089c83a 	sub	r4,r4,r2
   4cc5c:	2910983a 	sll	r8,r5,r4
   4cc60:	308ed83a 	srl	r7,r6,r2
   4cc64:	3108983a 	sll	r4,r6,r4
   4cc68:	2884d83a 	srl	r2,r5,r2
   4cc6c:	41ccb03a 	or	r6,r8,r7
   4cc70:	2008c03a 	cmpne	r4,r4,zero
   4cc74:	310cb03a 	or	r6,r6,r4
   4cc78:	898dc83a 	sub	r6,r17,r6
   4cc7c:	89a3803a 	cmpltu	r17,r17,r6
   4cc80:	1887c83a 	sub	r3,r3,r2
   4cc84:	1c47c83a 	sub	r3,r3,r17
   4cc88:	3023883a 	mov	r17,r6
   4cc8c:	1880202c 	andhi	r2,r3,128
   4cc90:	10002326 	beq	r2,zero,4cd20 <__subdf3+0x20c>
   4cc94:	04c02034 	movhi	r19,128
   4cc98:	9cffffc4 	addi	r19,r19,-1
   4cc9c:	1ce6703a 	and	r19,r3,r19
   4cca0:	98007a26 	beq	r19,zero,4ce8c <__subdf3+0x378>
   4cca4:	9809883a 	mov	r4,r19
   4cca8:	004d6140 	call	4d614 <__clzsi2>
   4ccac:	113ffe04 	addi	r4,r2,-8
   4ccb0:	00c007c4 	movi	r3,31
   4ccb4:	19007b16 	blt	r3,r4,4cea4 <__subdf3+0x390>
   4ccb8:	00800804 	movi	r2,32
   4ccbc:	1105c83a 	sub	r2,r2,r4
   4ccc0:	8884d83a 	srl	r2,r17,r2
   4ccc4:	9906983a 	sll	r3,r19,r4
   4ccc8:	8922983a 	sll	r17,r17,r4
   4cccc:	10c4b03a 	or	r2,r2,r3
   4ccd0:	24007816 	blt	r4,r16,4ceb4 <__subdf3+0x3a0>
   4ccd4:	2421c83a 	sub	r16,r4,r16
   4ccd8:	80c00044 	addi	r3,r16,1
   4ccdc:	010007c4 	movi	r4,31
   4cce0:	20c09516 	blt	r4,r3,4cf38 <__subdf3+0x424>
   4cce4:	01400804 	movi	r5,32
   4cce8:	28cbc83a 	sub	r5,r5,r3
   4ccec:	88c8d83a 	srl	r4,r17,r3
   4ccf0:	8962983a 	sll	r17,r17,r5
   4ccf4:	114a983a 	sll	r5,r2,r5
   4ccf8:	10c6d83a 	srl	r3,r2,r3
   4ccfc:	8804c03a 	cmpne	r2,r17,zero
   4cd00:	290ab03a 	or	r5,r5,r4
   4cd04:	28a2b03a 	or	r17,r5,r2
   4cd08:	0021883a 	mov	r16,zero
   4cd0c:	003fa206 	br	4cb98 <__alt_data_end+0xfffdab98>
   4cd10:	2090b03a 	or	r8,r4,r2
   4cd14:	40018e26 	beq	r8,zero,4d350 <__subdf3+0x83c>
   4cd18:	1007883a 	mov	r3,r2
   4cd1c:	2023883a 	mov	r17,r4
   4cd20:	888001cc 	andi	r2,r17,7
   4cd24:	103f9e1e 	bne	r2,zero,4cba0 <__alt_data_end+0xfffdaba0>
   4cd28:	1804977a 	slli	r2,r3,29
   4cd2c:	8822d0fa 	srli	r17,r17,3
   4cd30:	1810d0fa 	srli	r8,r3,3
   4cd34:	9100004c 	andi	r4,r18,1
   4cd38:	1444b03a 	or	r2,r2,r17
   4cd3c:	00c1ffc4 	movi	r3,2047
   4cd40:	80c02826 	beq	r16,r3,4cde4 <__subdf3+0x2d0>
   4cd44:	01400434 	movhi	r5,16
   4cd48:	297fffc4 	addi	r5,r5,-1
   4cd4c:	80e0703a 	and	r16,r16,r3
   4cd50:	414a703a 	and	r5,r8,r5
   4cd54:	003fa806 	br	4cbf8 <__alt_data_end+0xfffdabf8>
   4cd58:	0080630e 	bge	zero,r2,4cee8 <__subdf3+0x3d4>
   4cd5c:	48003026 	beq	r9,zero,4ce20 <__subdf3+0x30c>
   4cd60:	0101ffc4 	movi	r4,2047
   4cd64:	813f8c26 	beq	r16,r4,4cb98 <__alt_data_end+0xfffdab98>
   4cd68:	29402034 	orhi	r5,r5,128
   4cd6c:	01000e04 	movi	r4,56
   4cd70:	2080a90e 	bge	r4,r2,4d018 <__subdf3+0x504>
   4cd74:	298cb03a 	or	r6,r5,r6
   4cd78:	3012c03a 	cmpne	r9,r6,zero
   4cd7c:	0005883a 	mov	r2,zero
   4cd80:	4c53883a 	add	r9,r9,r17
   4cd84:	4c63803a 	cmpltu	r17,r9,r17
   4cd88:	10c7883a 	add	r3,r2,r3
   4cd8c:	88c7883a 	add	r3,r17,r3
   4cd90:	4823883a 	mov	r17,r9
   4cd94:	1880202c 	andhi	r2,r3,128
   4cd98:	1000d026 	beq	r2,zero,4d0dc <__subdf3+0x5c8>
   4cd9c:	84000044 	addi	r16,r16,1
   4cda0:	0081ffc4 	movi	r2,2047
   4cda4:	8080fe26 	beq	r16,r2,4d1a0 <__subdf3+0x68c>
   4cda8:	00bfe034 	movhi	r2,65408
   4cdac:	10bfffc4 	addi	r2,r2,-1
   4cdb0:	1886703a 	and	r3,r3,r2
   4cdb4:	880ad07a 	srli	r5,r17,1
   4cdb8:	180497fa 	slli	r2,r3,31
   4cdbc:	8900004c 	andi	r4,r17,1
   4cdc0:	2922b03a 	or	r17,r5,r4
   4cdc4:	1806d07a 	srli	r3,r3,1
   4cdc8:	1462b03a 	or	r17,r2,r17
   4cdcc:	3825883a 	mov	r18,r7
   4cdd0:	003f7106 	br	4cb98 <__alt_data_end+0xfffdab98>
   4cdd4:	2984b03a 	or	r2,r5,r6
   4cdd8:	103f6826 	beq	r2,zero,4cb7c <__alt_data_end+0xfffdab7c>
   4cddc:	39c03fcc 	andi	r7,r7,255
   4cde0:	003f6706 	br	4cb80 <__alt_data_end+0xfffdab80>
   4cde4:	4086b03a 	or	r3,r8,r2
   4cde8:	18015226 	beq	r3,zero,4d334 <__subdf3+0x820>
   4cdec:	00c00434 	movhi	r3,16
   4cdf0:	41400234 	orhi	r5,r8,8
   4cdf4:	18ffffc4 	addi	r3,r3,-1
   4cdf8:	28ca703a 	and	r5,r5,r3
   4cdfc:	003f7e06 	br	4cbf8 <__alt_data_end+0xfffdabf8>
   4ce00:	10bfffc4 	addi	r2,r2,-1
   4ce04:	1000491e 	bne	r2,zero,4cf2c <__subdf3+0x418>
   4ce08:	898fc83a 	sub	r7,r17,r6
   4ce0c:	89e3803a 	cmpltu	r17,r17,r7
   4ce10:	1947c83a 	sub	r3,r3,r5
   4ce14:	1c47c83a 	sub	r3,r3,r17
   4ce18:	3823883a 	mov	r17,r7
   4ce1c:	003f9b06 	br	4cc8c <__alt_data_end+0xfffdac8c>
   4ce20:	2988b03a 	or	r4,r5,r6
   4ce24:	203f5c26 	beq	r4,zero,4cb98 <__alt_data_end+0xfffdab98>
   4ce28:	10bfffc4 	addi	r2,r2,-1
   4ce2c:	1000931e 	bne	r2,zero,4d07c <__subdf3+0x568>
   4ce30:	898d883a 	add	r6,r17,r6
   4ce34:	3463803a 	cmpltu	r17,r6,r17
   4ce38:	1947883a 	add	r3,r3,r5
   4ce3c:	88c7883a 	add	r3,r17,r3
   4ce40:	3023883a 	mov	r17,r6
   4ce44:	003fd306 	br	4cd94 <__alt_data_end+0xfffdad94>
   4ce48:	1000541e 	bne	r2,zero,4cf9c <__subdf3+0x488>
   4ce4c:	80800044 	addi	r2,r16,1
   4ce50:	1081ffcc 	andi	r2,r2,2047
   4ce54:	01000044 	movi	r4,1
   4ce58:	2080a20e 	bge	r4,r2,4d0e4 <__subdf3+0x5d0>
   4ce5c:	8989c83a 	sub	r4,r17,r6
   4ce60:	8905803a 	cmpltu	r2,r17,r4
   4ce64:	1967c83a 	sub	r19,r3,r5
   4ce68:	98a7c83a 	sub	r19,r19,r2
   4ce6c:	9880202c 	andhi	r2,r19,128
   4ce70:	10006326 	beq	r2,zero,4d000 <__subdf3+0x4ec>
   4ce74:	3463c83a 	sub	r17,r6,r17
   4ce78:	28c7c83a 	sub	r3,r5,r3
   4ce7c:	344d803a 	cmpltu	r6,r6,r17
   4ce80:	19a7c83a 	sub	r19,r3,r6
   4ce84:	3825883a 	mov	r18,r7
   4ce88:	983f861e 	bne	r19,zero,4cca4 <__alt_data_end+0xfffdaca4>
   4ce8c:	8809883a 	mov	r4,r17
   4ce90:	004d6140 	call	4d614 <__clzsi2>
   4ce94:	10800804 	addi	r2,r2,32
   4ce98:	113ffe04 	addi	r4,r2,-8
   4ce9c:	00c007c4 	movi	r3,31
   4cea0:	193f850e 	bge	r3,r4,4ccb8 <__alt_data_end+0xfffdacb8>
   4cea4:	10bff604 	addi	r2,r2,-40
   4cea8:	8884983a 	sll	r2,r17,r2
   4ceac:	0023883a 	mov	r17,zero
   4ceb0:	243f880e 	bge	r4,r16,4ccd4 <__alt_data_end+0xfffdacd4>
   4ceb4:	00ffe034 	movhi	r3,65408
   4ceb8:	18ffffc4 	addi	r3,r3,-1
   4cebc:	8121c83a 	sub	r16,r16,r4
   4cec0:	10c6703a 	and	r3,r2,r3
   4cec4:	003f3406 	br	4cb98 <__alt_data_end+0xfffdab98>
   4cec8:	9100004c 	andi	r4,r18,1
   4cecc:	000b883a 	mov	r5,zero
   4ced0:	0005883a 	mov	r2,zero
   4ced4:	003f4806 	br	4cbf8 <__alt_data_end+0xfffdabf8>
   4ced8:	298cb03a 	or	r6,r5,r6
   4cedc:	300cc03a 	cmpne	r6,r6,zero
   4cee0:	0005883a 	mov	r2,zero
   4cee4:	003f6406 	br	4cc78 <__alt_data_end+0xfffdac78>
   4cee8:	10009a1e 	bne	r2,zero,4d154 <__subdf3+0x640>
   4ceec:	82400044 	addi	r9,r16,1
   4cef0:	4881ffcc 	andi	r2,r9,2047
   4cef4:	02800044 	movi	r10,1
   4cef8:	5080670e 	bge	r10,r2,4d098 <__subdf3+0x584>
   4cefc:	0081ffc4 	movi	r2,2047
   4cf00:	4880af26 	beq	r9,r2,4d1c0 <__subdf3+0x6ac>
   4cf04:	898d883a 	add	r6,r17,r6
   4cf08:	1945883a 	add	r2,r3,r5
   4cf0c:	3447803a 	cmpltu	r3,r6,r17
   4cf10:	1887883a 	add	r3,r3,r2
   4cf14:	182297fa 	slli	r17,r3,31
   4cf18:	300cd07a 	srli	r6,r6,1
   4cf1c:	1806d07a 	srli	r3,r3,1
   4cf20:	4821883a 	mov	r16,r9
   4cf24:	89a2b03a 	or	r17,r17,r6
   4cf28:	003f1b06 	br	4cb98 <__alt_data_end+0xfffdab98>
   4cf2c:	0101ffc4 	movi	r4,2047
   4cf30:	813f441e 	bne	r16,r4,4cc44 <__alt_data_end+0xfffdac44>
   4cf34:	003f1806 	br	4cb98 <__alt_data_end+0xfffdab98>
   4cf38:	843ff844 	addi	r16,r16,-31
   4cf3c:	01400804 	movi	r5,32
   4cf40:	1408d83a 	srl	r4,r2,r16
   4cf44:	19405026 	beq	r3,r5,4d088 <__subdf3+0x574>
   4cf48:	01401004 	movi	r5,64
   4cf4c:	28c7c83a 	sub	r3,r5,r3
   4cf50:	10c4983a 	sll	r2,r2,r3
   4cf54:	88a2b03a 	or	r17,r17,r2
   4cf58:	8822c03a 	cmpne	r17,r17,zero
   4cf5c:	2462b03a 	or	r17,r4,r17
   4cf60:	0007883a 	mov	r3,zero
   4cf64:	0021883a 	mov	r16,zero
   4cf68:	003f6d06 	br	4cd20 <__alt_data_end+0xfffdad20>
   4cf6c:	11fff804 	addi	r7,r2,-32
   4cf70:	01000804 	movi	r4,32
   4cf74:	29ced83a 	srl	r7,r5,r7
   4cf78:	11004526 	beq	r2,r4,4d090 <__subdf3+0x57c>
   4cf7c:	01001004 	movi	r4,64
   4cf80:	2089c83a 	sub	r4,r4,r2
   4cf84:	2904983a 	sll	r2,r5,r4
   4cf88:	118cb03a 	or	r6,r2,r6
   4cf8c:	300cc03a 	cmpne	r6,r6,zero
   4cf90:	398cb03a 	or	r6,r7,r6
   4cf94:	0005883a 	mov	r2,zero
   4cf98:	003f3706 	br	4cc78 <__alt_data_end+0xfffdac78>
   4cf9c:	80002a26 	beq	r16,zero,4d048 <__subdf3+0x534>
   4cfa0:	0101ffc4 	movi	r4,2047
   4cfa4:	49006626 	beq	r9,r4,4d140 <__subdf3+0x62c>
   4cfa8:	0085c83a 	sub	r2,zero,r2
   4cfac:	18c02034 	orhi	r3,r3,128
   4cfb0:	01000e04 	movi	r4,56
   4cfb4:	20807e16 	blt	r4,r2,4d1b0 <__subdf3+0x69c>
   4cfb8:	010007c4 	movi	r4,31
   4cfbc:	2080e716 	blt	r4,r2,4d35c <__subdf3+0x848>
   4cfc0:	01000804 	movi	r4,32
   4cfc4:	2089c83a 	sub	r4,r4,r2
   4cfc8:	1914983a 	sll	r10,r3,r4
   4cfcc:	8890d83a 	srl	r8,r17,r2
   4cfd0:	8908983a 	sll	r4,r17,r4
   4cfd4:	1884d83a 	srl	r2,r3,r2
   4cfd8:	5222b03a 	or	r17,r10,r8
   4cfdc:	2006c03a 	cmpne	r3,r4,zero
   4cfe0:	88e2b03a 	or	r17,r17,r3
   4cfe4:	3463c83a 	sub	r17,r6,r17
   4cfe8:	2885c83a 	sub	r2,r5,r2
   4cfec:	344d803a 	cmpltu	r6,r6,r17
   4cff0:	1187c83a 	sub	r3,r2,r6
   4cff4:	4821883a 	mov	r16,r9
   4cff8:	3825883a 	mov	r18,r7
   4cffc:	003f2306 	br	4cc8c <__alt_data_end+0xfffdac8c>
   4d000:	24d0b03a 	or	r8,r4,r19
   4d004:	40001b1e 	bne	r8,zero,4d074 <__subdf3+0x560>
   4d008:	0005883a 	mov	r2,zero
   4d00c:	0009883a 	mov	r4,zero
   4d010:	0021883a 	mov	r16,zero
   4d014:	003f4906 	br	4cd3c <__alt_data_end+0xfffdad3c>
   4d018:	010007c4 	movi	r4,31
   4d01c:	20803a16 	blt	r4,r2,4d108 <__subdf3+0x5f4>
   4d020:	01000804 	movi	r4,32
   4d024:	2089c83a 	sub	r4,r4,r2
   4d028:	2912983a 	sll	r9,r5,r4
   4d02c:	3090d83a 	srl	r8,r6,r2
   4d030:	3108983a 	sll	r4,r6,r4
   4d034:	2884d83a 	srl	r2,r5,r2
   4d038:	4a12b03a 	or	r9,r9,r8
   4d03c:	2008c03a 	cmpne	r4,r4,zero
   4d040:	4912b03a 	or	r9,r9,r4
   4d044:	003f4e06 	br	4cd80 <__alt_data_end+0xfffdad80>
   4d048:	1c48b03a 	or	r4,r3,r17
   4d04c:	20003c26 	beq	r4,zero,4d140 <__subdf3+0x62c>
   4d050:	0084303a 	nor	r2,zero,r2
   4d054:	1000381e 	bne	r2,zero,4d138 <__subdf3+0x624>
   4d058:	3463c83a 	sub	r17,r6,r17
   4d05c:	28c5c83a 	sub	r2,r5,r3
   4d060:	344d803a 	cmpltu	r6,r6,r17
   4d064:	1187c83a 	sub	r3,r2,r6
   4d068:	4821883a 	mov	r16,r9
   4d06c:	3825883a 	mov	r18,r7
   4d070:	003f0606 	br	4cc8c <__alt_data_end+0xfffdac8c>
   4d074:	2023883a 	mov	r17,r4
   4d078:	003f0906 	br	4cca0 <__alt_data_end+0xfffdaca0>
   4d07c:	0101ffc4 	movi	r4,2047
   4d080:	813f3a1e 	bne	r16,r4,4cd6c <__alt_data_end+0xfffdad6c>
   4d084:	003ec406 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d088:	0005883a 	mov	r2,zero
   4d08c:	003fb106 	br	4cf54 <__alt_data_end+0xfffdaf54>
   4d090:	0005883a 	mov	r2,zero
   4d094:	003fbc06 	br	4cf88 <__alt_data_end+0xfffdaf88>
   4d098:	1c44b03a 	or	r2,r3,r17
   4d09c:	80008e1e 	bne	r16,zero,4d2d8 <__subdf3+0x7c4>
   4d0a0:	1000c826 	beq	r2,zero,4d3c4 <__subdf3+0x8b0>
   4d0a4:	2984b03a 	or	r2,r5,r6
   4d0a8:	103ebb26 	beq	r2,zero,4cb98 <__alt_data_end+0xfffdab98>
   4d0ac:	8989883a 	add	r4,r17,r6
   4d0b0:	1945883a 	add	r2,r3,r5
   4d0b4:	2447803a 	cmpltu	r3,r4,r17
   4d0b8:	1887883a 	add	r3,r3,r2
   4d0bc:	1880202c 	andhi	r2,r3,128
   4d0c0:	2023883a 	mov	r17,r4
   4d0c4:	103f1626 	beq	r2,zero,4cd20 <__alt_data_end+0xfffdad20>
   4d0c8:	00bfe034 	movhi	r2,65408
   4d0cc:	10bfffc4 	addi	r2,r2,-1
   4d0d0:	5021883a 	mov	r16,r10
   4d0d4:	1886703a 	and	r3,r3,r2
   4d0d8:	003eaf06 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d0dc:	3825883a 	mov	r18,r7
   4d0e0:	003f0f06 	br	4cd20 <__alt_data_end+0xfffdad20>
   4d0e4:	1c44b03a 	or	r2,r3,r17
   4d0e8:	8000251e 	bne	r16,zero,4d180 <__subdf3+0x66c>
   4d0ec:	1000661e 	bne	r2,zero,4d288 <__subdf3+0x774>
   4d0f0:	2990b03a 	or	r8,r5,r6
   4d0f4:	40009626 	beq	r8,zero,4d350 <__subdf3+0x83c>
   4d0f8:	2807883a 	mov	r3,r5
   4d0fc:	3023883a 	mov	r17,r6
   4d100:	3825883a 	mov	r18,r7
   4d104:	003ea406 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d108:	127ff804 	addi	r9,r2,-32
   4d10c:	01000804 	movi	r4,32
   4d110:	2a52d83a 	srl	r9,r5,r9
   4d114:	11008c26 	beq	r2,r4,4d348 <__subdf3+0x834>
   4d118:	01001004 	movi	r4,64
   4d11c:	2085c83a 	sub	r2,r4,r2
   4d120:	2884983a 	sll	r2,r5,r2
   4d124:	118cb03a 	or	r6,r2,r6
   4d128:	300cc03a 	cmpne	r6,r6,zero
   4d12c:	4992b03a 	or	r9,r9,r6
   4d130:	0005883a 	mov	r2,zero
   4d134:	003f1206 	br	4cd80 <__alt_data_end+0xfffdad80>
   4d138:	0101ffc4 	movi	r4,2047
   4d13c:	493f9c1e 	bne	r9,r4,4cfb0 <__alt_data_end+0xfffdafb0>
   4d140:	2807883a 	mov	r3,r5
   4d144:	3023883a 	mov	r17,r6
   4d148:	4821883a 	mov	r16,r9
   4d14c:	3825883a 	mov	r18,r7
   4d150:	003e9106 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d154:	80001f1e 	bne	r16,zero,4d1d4 <__subdf3+0x6c0>
   4d158:	1c48b03a 	or	r4,r3,r17
   4d15c:	20005a26 	beq	r4,zero,4d2c8 <__subdf3+0x7b4>
   4d160:	0084303a 	nor	r2,zero,r2
   4d164:	1000561e 	bne	r2,zero,4d2c0 <__subdf3+0x7ac>
   4d168:	89a3883a 	add	r17,r17,r6
   4d16c:	1945883a 	add	r2,r3,r5
   4d170:	898d803a 	cmpltu	r6,r17,r6
   4d174:	3087883a 	add	r3,r6,r2
   4d178:	4821883a 	mov	r16,r9
   4d17c:	003f0506 	br	4cd94 <__alt_data_end+0xfffdad94>
   4d180:	10002b1e 	bne	r2,zero,4d230 <__subdf3+0x71c>
   4d184:	2984b03a 	or	r2,r5,r6
   4d188:	10008026 	beq	r2,zero,4d38c <__subdf3+0x878>
   4d18c:	2807883a 	mov	r3,r5
   4d190:	3023883a 	mov	r17,r6
   4d194:	3825883a 	mov	r18,r7
   4d198:	0401ffc4 	movi	r16,2047
   4d19c:	003e7e06 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d1a0:	3809883a 	mov	r4,r7
   4d1a4:	0011883a 	mov	r8,zero
   4d1a8:	0005883a 	mov	r2,zero
   4d1ac:	003ee306 	br	4cd3c <__alt_data_end+0xfffdad3c>
   4d1b0:	1c62b03a 	or	r17,r3,r17
   4d1b4:	8822c03a 	cmpne	r17,r17,zero
   4d1b8:	0005883a 	mov	r2,zero
   4d1bc:	003f8906 	br	4cfe4 <__alt_data_end+0xfffdafe4>
   4d1c0:	3809883a 	mov	r4,r7
   4d1c4:	4821883a 	mov	r16,r9
   4d1c8:	0011883a 	mov	r8,zero
   4d1cc:	0005883a 	mov	r2,zero
   4d1d0:	003eda06 	br	4cd3c <__alt_data_end+0xfffdad3c>
   4d1d4:	0101ffc4 	movi	r4,2047
   4d1d8:	49003b26 	beq	r9,r4,4d2c8 <__subdf3+0x7b4>
   4d1dc:	0085c83a 	sub	r2,zero,r2
   4d1e0:	18c02034 	orhi	r3,r3,128
   4d1e4:	01000e04 	movi	r4,56
   4d1e8:	20806e16 	blt	r4,r2,4d3a4 <__subdf3+0x890>
   4d1ec:	010007c4 	movi	r4,31
   4d1f0:	20807716 	blt	r4,r2,4d3d0 <__subdf3+0x8bc>
   4d1f4:	01000804 	movi	r4,32
   4d1f8:	2089c83a 	sub	r4,r4,r2
   4d1fc:	1914983a 	sll	r10,r3,r4
   4d200:	8890d83a 	srl	r8,r17,r2
   4d204:	8908983a 	sll	r4,r17,r4
   4d208:	1884d83a 	srl	r2,r3,r2
   4d20c:	5222b03a 	or	r17,r10,r8
   4d210:	2006c03a 	cmpne	r3,r4,zero
   4d214:	88e2b03a 	or	r17,r17,r3
   4d218:	89a3883a 	add	r17,r17,r6
   4d21c:	1145883a 	add	r2,r2,r5
   4d220:	898d803a 	cmpltu	r6,r17,r6
   4d224:	3087883a 	add	r3,r6,r2
   4d228:	4821883a 	mov	r16,r9
   4d22c:	003ed906 	br	4cd94 <__alt_data_end+0xfffdad94>
   4d230:	2984b03a 	or	r2,r5,r6
   4d234:	10004226 	beq	r2,zero,4d340 <__subdf3+0x82c>
   4d238:	1808d0fa 	srli	r4,r3,3
   4d23c:	8822d0fa 	srli	r17,r17,3
   4d240:	1806977a 	slli	r3,r3,29
   4d244:	2080022c 	andhi	r2,r4,8
   4d248:	1c62b03a 	or	r17,r3,r17
   4d24c:	10000826 	beq	r2,zero,4d270 <__subdf3+0x75c>
   4d250:	2812d0fa 	srli	r9,r5,3
   4d254:	4880022c 	andhi	r2,r9,8
   4d258:	1000051e 	bne	r2,zero,4d270 <__subdf3+0x75c>
   4d25c:	300cd0fa 	srli	r6,r6,3
   4d260:	2804977a 	slli	r2,r5,29
   4d264:	4809883a 	mov	r4,r9
   4d268:	3825883a 	mov	r18,r7
   4d26c:	11a2b03a 	or	r17,r2,r6
   4d270:	8806d77a 	srli	r3,r17,29
   4d274:	200890fa 	slli	r4,r4,3
   4d278:	882290fa 	slli	r17,r17,3
   4d27c:	0401ffc4 	movi	r16,2047
   4d280:	1906b03a 	or	r3,r3,r4
   4d284:	003e4406 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d288:	2984b03a 	or	r2,r5,r6
   4d28c:	103e4226 	beq	r2,zero,4cb98 <__alt_data_end+0xfffdab98>
   4d290:	8989c83a 	sub	r4,r17,r6
   4d294:	8911803a 	cmpltu	r8,r17,r4
   4d298:	1945c83a 	sub	r2,r3,r5
   4d29c:	1205c83a 	sub	r2,r2,r8
   4d2a0:	1200202c 	andhi	r8,r2,128
   4d2a4:	403e9a26 	beq	r8,zero,4cd10 <__alt_data_end+0xfffdad10>
   4d2a8:	3463c83a 	sub	r17,r6,r17
   4d2ac:	28c5c83a 	sub	r2,r5,r3
   4d2b0:	344d803a 	cmpltu	r6,r6,r17
   4d2b4:	1187c83a 	sub	r3,r2,r6
   4d2b8:	3825883a 	mov	r18,r7
   4d2bc:	003e3606 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d2c0:	0101ffc4 	movi	r4,2047
   4d2c4:	493fc71e 	bne	r9,r4,4d1e4 <__alt_data_end+0xfffdb1e4>
   4d2c8:	2807883a 	mov	r3,r5
   4d2cc:	3023883a 	mov	r17,r6
   4d2d0:	4821883a 	mov	r16,r9
   4d2d4:	003e3006 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d2d8:	10003626 	beq	r2,zero,4d3b4 <__subdf3+0x8a0>
   4d2dc:	2984b03a 	or	r2,r5,r6
   4d2e0:	10001726 	beq	r2,zero,4d340 <__subdf3+0x82c>
   4d2e4:	1808d0fa 	srli	r4,r3,3
   4d2e8:	8822d0fa 	srli	r17,r17,3
   4d2ec:	1806977a 	slli	r3,r3,29
   4d2f0:	2080022c 	andhi	r2,r4,8
   4d2f4:	1c62b03a 	or	r17,r3,r17
   4d2f8:	10000726 	beq	r2,zero,4d318 <__subdf3+0x804>
   4d2fc:	2812d0fa 	srli	r9,r5,3
   4d300:	4880022c 	andhi	r2,r9,8
   4d304:	1000041e 	bne	r2,zero,4d318 <__subdf3+0x804>
   4d308:	300cd0fa 	srli	r6,r6,3
   4d30c:	2804977a 	slli	r2,r5,29
   4d310:	4809883a 	mov	r4,r9
   4d314:	11a2b03a 	or	r17,r2,r6
   4d318:	8806d77a 	srli	r3,r17,29
   4d31c:	200890fa 	slli	r4,r4,3
   4d320:	882290fa 	slli	r17,r17,3
   4d324:	3825883a 	mov	r18,r7
   4d328:	1906b03a 	or	r3,r3,r4
   4d32c:	0401ffc4 	movi	r16,2047
   4d330:	003e1906 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d334:	000b883a 	mov	r5,zero
   4d338:	0005883a 	mov	r2,zero
   4d33c:	003e2e06 	br	4cbf8 <__alt_data_end+0xfffdabf8>
   4d340:	0401ffc4 	movi	r16,2047
   4d344:	003e1406 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d348:	0005883a 	mov	r2,zero
   4d34c:	003f7506 	br	4d124 <__alt_data_end+0xfffdb124>
   4d350:	0005883a 	mov	r2,zero
   4d354:	0009883a 	mov	r4,zero
   4d358:	003e7806 	br	4cd3c <__alt_data_end+0xfffdad3c>
   4d35c:	123ff804 	addi	r8,r2,-32
   4d360:	01000804 	movi	r4,32
   4d364:	1a10d83a 	srl	r8,r3,r8
   4d368:	11002526 	beq	r2,r4,4d400 <__subdf3+0x8ec>
   4d36c:	01001004 	movi	r4,64
   4d370:	2085c83a 	sub	r2,r4,r2
   4d374:	1884983a 	sll	r2,r3,r2
   4d378:	1444b03a 	or	r2,r2,r17
   4d37c:	1004c03a 	cmpne	r2,r2,zero
   4d380:	40a2b03a 	or	r17,r8,r2
   4d384:	0005883a 	mov	r2,zero
   4d388:	003f1606 	br	4cfe4 <__alt_data_end+0xfffdafe4>
   4d38c:	02000434 	movhi	r8,16
   4d390:	0009883a 	mov	r4,zero
   4d394:	423fffc4 	addi	r8,r8,-1
   4d398:	00bfffc4 	movi	r2,-1
   4d39c:	0401ffc4 	movi	r16,2047
   4d3a0:	003e6606 	br	4cd3c <__alt_data_end+0xfffdad3c>
   4d3a4:	1c62b03a 	or	r17,r3,r17
   4d3a8:	8822c03a 	cmpne	r17,r17,zero
   4d3ac:	0005883a 	mov	r2,zero
   4d3b0:	003f9906 	br	4d218 <__alt_data_end+0xfffdb218>
   4d3b4:	2807883a 	mov	r3,r5
   4d3b8:	3023883a 	mov	r17,r6
   4d3bc:	0401ffc4 	movi	r16,2047
   4d3c0:	003df506 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d3c4:	2807883a 	mov	r3,r5
   4d3c8:	3023883a 	mov	r17,r6
   4d3cc:	003df206 	br	4cb98 <__alt_data_end+0xfffdab98>
   4d3d0:	123ff804 	addi	r8,r2,-32
   4d3d4:	01000804 	movi	r4,32
   4d3d8:	1a10d83a 	srl	r8,r3,r8
   4d3dc:	11000a26 	beq	r2,r4,4d408 <__subdf3+0x8f4>
   4d3e0:	01001004 	movi	r4,64
   4d3e4:	2085c83a 	sub	r2,r4,r2
   4d3e8:	1884983a 	sll	r2,r3,r2
   4d3ec:	1444b03a 	or	r2,r2,r17
   4d3f0:	1004c03a 	cmpne	r2,r2,zero
   4d3f4:	40a2b03a 	or	r17,r8,r2
   4d3f8:	0005883a 	mov	r2,zero
   4d3fc:	003f8606 	br	4d218 <__alt_data_end+0xfffdb218>
   4d400:	0005883a 	mov	r2,zero
   4d404:	003fdc06 	br	4d378 <__alt_data_end+0xfffdb378>
   4d408:	0005883a 	mov	r2,zero
   4d40c:	003ff706 	br	4d3ec <__alt_data_end+0xfffdb3ec>

0004d410 <__fixdfsi>:
   4d410:	280cd53a 	srli	r6,r5,20
   4d414:	00c00434 	movhi	r3,16
   4d418:	18ffffc4 	addi	r3,r3,-1
   4d41c:	3181ffcc 	andi	r6,r6,2047
   4d420:	01c0ff84 	movi	r7,1022
   4d424:	28c6703a 	and	r3,r5,r3
   4d428:	280ad7fa 	srli	r5,r5,31
   4d42c:	3980120e 	bge	r7,r6,4d478 <__fixdfsi+0x68>
   4d430:	00810744 	movi	r2,1053
   4d434:	11800c16 	blt	r2,r6,4d468 <__fixdfsi+0x58>
   4d438:	00810cc4 	movi	r2,1075
   4d43c:	1185c83a 	sub	r2,r2,r6
   4d440:	01c007c4 	movi	r7,31
   4d444:	18c00434 	orhi	r3,r3,16
   4d448:	38800d16 	blt	r7,r2,4d480 <__fixdfsi+0x70>
   4d44c:	31befb44 	addi	r6,r6,-1043
   4d450:	2084d83a 	srl	r2,r4,r2
   4d454:	1986983a 	sll	r3,r3,r6
   4d458:	1884b03a 	or	r2,r3,r2
   4d45c:	28000726 	beq	r5,zero,4d47c <__fixdfsi+0x6c>
   4d460:	0085c83a 	sub	r2,zero,r2
   4d464:	f800283a 	ret
   4d468:	00a00034 	movhi	r2,32768
   4d46c:	10bfffc4 	addi	r2,r2,-1
   4d470:	2885883a 	add	r2,r5,r2
   4d474:	f800283a 	ret
   4d478:	0005883a 	mov	r2,zero
   4d47c:	f800283a 	ret
   4d480:	008104c4 	movi	r2,1043
   4d484:	1185c83a 	sub	r2,r2,r6
   4d488:	1884d83a 	srl	r2,r3,r2
   4d48c:	003ff306 	br	4d45c <__alt_data_end+0xfffdb45c>

0004d490 <__floatsidf>:
   4d490:	defffd04 	addi	sp,sp,-12
   4d494:	dfc00215 	stw	ra,8(sp)
   4d498:	dc400115 	stw	r17,4(sp)
   4d49c:	dc000015 	stw	r16,0(sp)
   4d4a0:	20002b26 	beq	r4,zero,4d550 <__floatsidf+0xc0>
   4d4a4:	2023883a 	mov	r17,r4
   4d4a8:	2020d7fa 	srli	r16,r4,31
   4d4ac:	20002d16 	blt	r4,zero,4d564 <__floatsidf+0xd4>
   4d4b0:	8809883a 	mov	r4,r17
   4d4b4:	004d6140 	call	4d614 <__clzsi2>
   4d4b8:	01410784 	movi	r5,1054
   4d4bc:	288bc83a 	sub	r5,r5,r2
   4d4c0:	01010cc4 	movi	r4,1075
   4d4c4:	2149c83a 	sub	r4,r4,r5
   4d4c8:	00c007c4 	movi	r3,31
   4d4cc:	1900160e 	bge	r3,r4,4d528 <__floatsidf+0x98>
   4d4d0:	00c104c4 	movi	r3,1043
   4d4d4:	1947c83a 	sub	r3,r3,r5
   4d4d8:	88c6983a 	sll	r3,r17,r3
   4d4dc:	00800434 	movhi	r2,16
   4d4e0:	10bfffc4 	addi	r2,r2,-1
   4d4e4:	1886703a 	and	r3,r3,r2
   4d4e8:	2941ffcc 	andi	r5,r5,2047
   4d4ec:	800d883a 	mov	r6,r16
   4d4f0:	0005883a 	mov	r2,zero
   4d4f4:	280a953a 	slli	r5,r5,20
   4d4f8:	31803fcc 	andi	r6,r6,255
   4d4fc:	01000434 	movhi	r4,16
   4d500:	300c97fa 	slli	r6,r6,31
   4d504:	213fffc4 	addi	r4,r4,-1
   4d508:	1906703a 	and	r3,r3,r4
   4d50c:	1946b03a 	or	r3,r3,r5
   4d510:	1986b03a 	or	r3,r3,r6
   4d514:	dfc00217 	ldw	ra,8(sp)
   4d518:	dc400117 	ldw	r17,4(sp)
   4d51c:	dc000017 	ldw	r16,0(sp)
   4d520:	dec00304 	addi	sp,sp,12
   4d524:	f800283a 	ret
   4d528:	00c002c4 	movi	r3,11
   4d52c:	1887c83a 	sub	r3,r3,r2
   4d530:	88c6d83a 	srl	r3,r17,r3
   4d534:	8904983a 	sll	r2,r17,r4
   4d538:	01000434 	movhi	r4,16
   4d53c:	213fffc4 	addi	r4,r4,-1
   4d540:	2941ffcc 	andi	r5,r5,2047
   4d544:	1906703a 	and	r3,r3,r4
   4d548:	800d883a 	mov	r6,r16
   4d54c:	003fe906 	br	4d4f4 <__alt_data_end+0xfffdb4f4>
   4d550:	000d883a 	mov	r6,zero
   4d554:	000b883a 	mov	r5,zero
   4d558:	0007883a 	mov	r3,zero
   4d55c:	0005883a 	mov	r2,zero
   4d560:	003fe406 	br	4d4f4 <__alt_data_end+0xfffdb4f4>
   4d564:	0123c83a 	sub	r17,zero,r4
   4d568:	003fd106 	br	4d4b0 <__alt_data_end+0xfffdb4b0>

0004d56c <__floatunsidf>:
   4d56c:	defffe04 	addi	sp,sp,-8
   4d570:	dc000015 	stw	r16,0(sp)
   4d574:	dfc00115 	stw	ra,4(sp)
   4d578:	2021883a 	mov	r16,r4
   4d57c:	20002226 	beq	r4,zero,4d608 <__floatunsidf+0x9c>
   4d580:	004d6140 	call	4d614 <__clzsi2>
   4d584:	01010784 	movi	r4,1054
   4d588:	2089c83a 	sub	r4,r4,r2
   4d58c:	01810cc4 	movi	r6,1075
   4d590:	310dc83a 	sub	r6,r6,r4
   4d594:	00c007c4 	movi	r3,31
   4d598:	1980120e 	bge	r3,r6,4d5e4 <__floatunsidf+0x78>
   4d59c:	00c104c4 	movi	r3,1043
   4d5a0:	1907c83a 	sub	r3,r3,r4
   4d5a4:	80ca983a 	sll	r5,r16,r3
   4d5a8:	00800434 	movhi	r2,16
   4d5ac:	10bfffc4 	addi	r2,r2,-1
   4d5b0:	2101ffcc 	andi	r4,r4,2047
   4d5b4:	0021883a 	mov	r16,zero
   4d5b8:	288a703a 	and	r5,r5,r2
   4d5bc:	2008953a 	slli	r4,r4,20
   4d5c0:	00c00434 	movhi	r3,16
   4d5c4:	18ffffc4 	addi	r3,r3,-1
   4d5c8:	28c6703a 	and	r3,r5,r3
   4d5cc:	8005883a 	mov	r2,r16
   4d5d0:	1906b03a 	or	r3,r3,r4
   4d5d4:	dfc00117 	ldw	ra,4(sp)
   4d5d8:	dc000017 	ldw	r16,0(sp)
   4d5dc:	dec00204 	addi	sp,sp,8
   4d5e0:	f800283a 	ret
   4d5e4:	00c002c4 	movi	r3,11
   4d5e8:	188bc83a 	sub	r5,r3,r2
   4d5ec:	814ad83a 	srl	r5,r16,r5
   4d5f0:	00c00434 	movhi	r3,16
   4d5f4:	18ffffc4 	addi	r3,r3,-1
   4d5f8:	81a0983a 	sll	r16,r16,r6
   4d5fc:	2101ffcc 	andi	r4,r4,2047
   4d600:	28ca703a 	and	r5,r5,r3
   4d604:	003fed06 	br	4d5bc <__alt_data_end+0xfffdb5bc>
   4d608:	0009883a 	mov	r4,zero
   4d60c:	000b883a 	mov	r5,zero
   4d610:	003fea06 	br	4d5bc <__alt_data_end+0xfffdb5bc>

0004d614 <__clzsi2>:
   4d614:	00bfffd4 	movui	r2,65535
   4d618:	11000536 	bltu	r2,r4,4d630 <__clzsi2+0x1c>
   4d61c:	00803fc4 	movi	r2,255
   4d620:	11000f36 	bltu	r2,r4,4d660 <__clzsi2+0x4c>
   4d624:	00800804 	movi	r2,32
   4d628:	0007883a 	mov	r3,zero
   4d62c:	00000506 	br	4d644 <__clzsi2+0x30>
   4d630:	00804034 	movhi	r2,256
   4d634:	10bfffc4 	addi	r2,r2,-1
   4d638:	11000c2e 	bgeu	r2,r4,4d66c <__clzsi2+0x58>
   4d63c:	00800204 	movi	r2,8
   4d640:	00c00604 	movi	r3,24
   4d644:	20c8d83a 	srl	r4,r4,r3
   4d648:	00c00174 	movhi	r3,5
   4d64c:	18c03104 	addi	r3,r3,196
   4d650:	1909883a 	add	r4,r3,r4
   4d654:	20c00003 	ldbu	r3,0(r4)
   4d658:	10c5c83a 	sub	r2,r2,r3
   4d65c:	f800283a 	ret
   4d660:	00800604 	movi	r2,24
   4d664:	00c00204 	movi	r3,8
   4d668:	003ff606 	br	4d644 <__alt_data_end+0xfffdb644>
   4d66c:	00800404 	movi	r2,16
   4d670:	1007883a 	mov	r3,r2
   4d674:	003ff306 	br	4d644 <__alt_data_end+0xfffdb644>

0004d678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d678:	defffe04 	addi	sp,sp,-8
   4d67c:	dfc00115 	stw	ra,4(sp)
   4d680:	df000015 	stw	fp,0(sp)
   4d684:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d688:	d0a00b17 	ldw	r2,-32724(gp)
   4d68c:	10000326 	beq	r2,zero,4d69c <alt_get_errno+0x24>
   4d690:	d0a00b17 	ldw	r2,-32724(gp)
   4d694:	103ee83a 	callr	r2
   4d698:	00000106 	br	4d6a0 <alt_get_errno+0x28>
   4d69c:	d0a6d104 	addi	r2,gp,-25788
}
   4d6a0:	e037883a 	mov	sp,fp
   4d6a4:	dfc00117 	ldw	ra,4(sp)
   4d6a8:	df000017 	ldw	fp,0(sp)
   4d6ac:	dec00204 	addi	sp,sp,8
   4d6b0:	f800283a 	ret

0004d6b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4d6b4:	defffb04 	addi	sp,sp,-20
   4d6b8:	dfc00415 	stw	ra,16(sp)
   4d6bc:	df000315 	stw	fp,12(sp)
   4d6c0:	df000304 	addi	fp,sp,12
   4d6c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4d6c8:	e0bfff17 	ldw	r2,-4(fp)
   4d6cc:	10000616 	blt	r2,zero,4d6e8 <close+0x34>
   4d6d0:	e0bfff17 	ldw	r2,-4(fp)
   4d6d4:	10c00324 	muli	r3,r2,12
   4d6d8:	00800174 	movhi	r2,5
   4d6dc:	1082af04 	addi	r2,r2,2748
   4d6e0:	1885883a 	add	r2,r3,r2
   4d6e4:	00000106 	br	4d6ec <close+0x38>
   4d6e8:	0005883a 	mov	r2,zero
   4d6ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4d6f0:	e0bffd17 	ldw	r2,-12(fp)
   4d6f4:	10001926 	beq	r2,zero,4d75c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4d6f8:	e0bffd17 	ldw	r2,-12(fp)
   4d6fc:	10800017 	ldw	r2,0(r2)
   4d700:	10800417 	ldw	r2,16(r2)
   4d704:	10000626 	beq	r2,zero,4d720 <close+0x6c>
   4d708:	e0bffd17 	ldw	r2,-12(fp)
   4d70c:	10800017 	ldw	r2,0(r2)
   4d710:	10800417 	ldw	r2,16(r2)
   4d714:	e13ffd17 	ldw	r4,-12(fp)
   4d718:	103ee83a 	callr	r2
   4d71c:	00000106 	br	4d724 <close+0x70>
   4d720:	0005883a 	mov	r2,zero
   4d724:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4d728:	e13fff17 	ldw	r4,-4(fp)
   4d72c:	004dda80 	call	4dda8 <alt_release_fd>
    if (rval < 0)
   4d730:	e0bffe17 	ldw	r2,-8(fp)
   4d734:	1000070e 	bge	r2,zero,4d754 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4d738:	004d6780 	call	4d678 <alt_get_errno>
   4d73c:	1007883a 	mov	r3,r2
   4d740:	e0bffe17 	ldw	r2,-8(fp)
   4d744:	0085c83a 	sub	r2,zero,r2
   4d748:	18800015 	stw	r2,0(r3)
      return -1;
   4d74c:	00bfffc4 	movi	r2,-1
   4d750:	00000706 	br	4d770 <close+0xbc>
    }
    return 0;
   4d754:	0005883a 	mov	r2,zero
   4d758:	00000506 	br	4d770 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d75c:	004d6780 	call	4d678 <alt_get_errno>
   4d760:	1007883a 	mov	r3,r2
   4d764:	00801444 	movi	r2,81
   4d768:	18800015 	stw	r2,0(r3)
    return -1;
   4d76c:	00bfffc4 	movi	r2,-1
  }
}
   4d770:	e037883a 	mov	sp,fp
   4d774:	dfc00117 	ldw	ra,4(sp)
   4d778:	df000017 	ldw	fp,0(sp)
   4d77c:	dec00204 	addi	sp,sp,8
   4d780:	f800283a 	ret

0004d784 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4d784:	defffc04 	addi	sp,sp,-16
   4d788:	df000315 	stw	fp,12(sp)
   4d78c:	df000304 	addi	fp,sp,12
   4d790:	e13ffd15 	stw	r4,-12(fp)
   4d794:	e17ffe15 	stw	r5,-8(fp)
   4d798:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4d79c:	e0bfff17 	ldw	r2,-4(fp)
}
   4d7a0:	e037883a 	mov	sp,fp
   4d7a4:	df000017 	ldw	fp,0(sp)
   4d7a8:	dec00104 	addi	sp,sp,4
   4d7ac:	f800283a 	ret

0004d7b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4d7b0:	defffd04 	addi	sp,sp,-12
   4d7b4:	df000215 	stw	fp,8(sp)
   4d7b8:	df000204 	addi	fp,sp,8
   4d7bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4d7c0:	0001883a 	nop
   4d7c4:	e0bfff17 	ldw	r2,-4(fp)
   4d7c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4d7cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4d7d0:	10000226 	beq	r2,zero,4d7dc <_exit+0x2c>
    ALT_SIM_FAIL();
   4d7d4:	002af070 	cmpltui	zero,zero,43969
   4d7d8:	00000106 	br	4d7e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4d7dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4d7e0:	003fff06 	br	4d7e0 <__alt_data_end+0xfffdb7e0>

0004d7e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d7e4:	defffe04 	addi	sp,sp,-8
   4d7e8:	dfc00115 	stw	ra,4(sp)
   4d7ec:	df000015 	stw	fp,0(sp)
   4d7f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d7f4:	d0a00b17 	ldw	r2,-32724(gp)
   4d7f8:	10000326 	beq	r2,zero,4d808 <alt_get_errno+0x24>
   4d7fc:	d0a00b17 	ldw	r2,-32724(gp)
   4d800:	103ee83a 	callr	r2
   4d804:	00000106 	br	4d80c <alt_get_errno+0x28>
   4d808:	d0a6d104 	addi	r2,gp,-25788
}
   4d80c:	e037883a 	mov	sp,fp
   4d810:	dfc00117 	ldw	ra,4(sp)
   4d814:	df000017 	ldw	fp,0(sp)
   4d818:	dec00204 	addi	sp,sp,8
   4d81c:	f800283a 	ret

0004d820 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4d820:	defffb04 	addi	sp,sp,-20
   4d824:	dfc00415 	stw	ra,16(sp)
   4d828:	df000315 	stw	fp,12(sp)
   4d82c:	df000304 	addi	fp,sp,12
   4d830:	e13ffe15 	stw	r4,-8(fp)
   4d834:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d838:	e0bffe17 	ldw	r2,-8(fp)
   4d83c:	10000616 	blt	r2,zero,4d858 <fstat+0x38>
   4d840:	e0bffe17 	ldw	r2,-8(fp)
   4d844:	10c00324 	muli	r3,r2,12
   4d848:	00800174 	movhi	r2,5
   4d84c:	1082af04 	addi	r2,r2,2748
   4d850:	1885883a 	add	r2,r3,r2
   4d854:	00000106 	br	4d85c <fstat+0x3c>
   4d858:	0005883a 	mov	r2,zero
   4d85c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4d860:	e0bffd17 	ldw	r2,-12(fp)
   4d864:	10001026 	beq	r2,zero,4d8a8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4d868:	e0bffd17 	ldw	r2,-12(fp)
   4d86c:	10800017 	ldw	r2,0(r2)
   4d870:	10800817 	ldw	r2,32(r2)
   4d874:	10000726 	beq	r2,zero,4d894 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4d878:	e0bffd17 	ldw	r2,-12(fp)
   4d87c:	10800017 	ldw	r2,0(r2)
   4d880:	10800817 	ldw	r2,32(r2)
   4d884:	e17fff17 	ldw	r5,-4(fp)
   4d888:	e13ffd17 	ldw	r4,-12(fp)
   4d88c:	103ee83a 	callr	r2
   4d890:	00000a06 	br	4d8bc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4d894:	e0bfff17 	ldw	r2,-4(fp)
   4d898:	00c80004 	movi	r3,8192
   4d89c:	10c00115 	stw	r3,4(r2)
      return 0;
   4d8a0:	0005883a 	mov	r2,zero
   4d8a4:	00000506 	br	4d8bc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d8a8:	004d7e40 	call	4d7e4 <alt_get_errno>
   4d8ac:	1007883a 	mov	r3,r2
   4d8b0:	00801444 	movi	r2,81
   4d8b4:	18800015 	stw	r2,0(r3)
    return -1;
   4d8b8:	00bfffc4 	movi	r2,-1
  }
}
   4d8bc:	e037883a 	mov	sp,fp
   4d8c0:	dfc00117 	ldw	ra,4(sp)
   4d8c4:	df000017 	ldw	fp,0(sp)
   4d8c8:	dec00204 	addi	sp,sp,8
   4d8cc:	f800283a 	ret

0004d8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d8d0:	defffe04 	addi	sp,sp,-8
   4d8d4:	dfc00115 	stw	ra,4(sp)
   4d8d8:	df000015 	stw	fp,0(sp)
   4d8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d8e0:	d0a00b17 	ldw	r2,-32724(gp)
   4d8e4:	10000326 	beq	r2,zero,4d8f4 <alt_get_errno+0x24>
   4d8e8:	d0a00b17 	ldw	r2,-32724(gp)
   4d8ec:	103ee83a 	callr	r2
   4d8f0:	00000106 	br	4d8f8 <alt_get_errno+0x28>
   4d8f4:	d0a6d104 	addi	r2,gp,-25788
}
   4d8f8:	e037883a 	mov	sp,fp
   4d8fc:	dfc00117 	ldw	ra,4(sp)
   4d900:	df000017 	ldw	fp,0(sp)
   4d904:	dec00204 	addi	sp,sp,8
   4d908:	f800283a 	ret

0004d90c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4d90c:	deffed04 	addi	sp,sp,-76
   4d910:	dfc01215 	stw	ra,72(sp)
   4d914:	df001115 	stw	fp,68(sp)
   4d918:	df001104 	addi	fp,sp,68
   4d91c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d920:	e0bfff17 	ldw	r2,-4(fp)
   4d924:	10000616 	blt	r2,zero,4d940 <isatty+0x34>
   4d928:	e0bfff17 	ldw	r2,-4(fp)
   4d92c:	10c00324 	muli	r3,r2,12
   4d930:	00800174 	movhi	r2,5
   4d934:	1082af04 	addi	r2,r2,2748
   4d938:	1885883a 	add	r2,r3,r2
   4d93c:	00000106 	br	4d944 <isatty+0x38>
   4d940:	0005883a 	mov	r2,zero
   4d944:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4d948:	e0bfef17 	ldw	r2,-68(fp)
   4d94c:	10000e26 	beq	r2,zero,4d988 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4d950:	e0bfef17 	ldw	r2,-68(fp)
   4d954:	10800017 	ldw	r2,0(r2)
   4d958:	10800817 	ldw	r2,32(r2)
   4d95c:	1000021e 	bne	r2,zero,4d968 <isatty+0x5c>
    {
      return 1;
   4d960:	00800044 	movi	r2,1
   4d964:	00000d06 	br	4d99c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4d968:	e0bff004 	addi	r2,fp,-64
   4d96c:	100b883a 	mov	r5,r2
   4d970:	e13fff17 	ldw	r4,-4(fp)
   4d974:	004d8200 	call	4d820 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4d978:	e0bff117 	ldw	r2,-60(fp)
   4d97c:	10880020 	cmpeqi	r2,r2,8192
   4d980:	10803fcc 	andi	r2,r2,255
   4d984:	00000506 	br	4d99c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d988:	004d8d00 	call	4d8d0 <alt_get_errno>
   4d98c:	1007883a 	mov	r3,r2
   4d990:	00801444 	movi	r2,81
   4d994:	18800015 	stw	r2,0(r3)
    return 0;
   4d998:	0005883a 	mov	r2,zero
  }
}
   4d99c:	e037883a 	mov	sp,fp
   4d9a0:	dfc00117 	ldw	ra,4(sp)
   4d9a4:	df000017 	ldw	fp,0(sp)
   4d9a8:	dec00204 	addi	sp,sp,8
   4d9ac:	f800283a 	ret

0004d9b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4d9b0:	defffc04 	addi	sp,sp,-16
   4d9b4:	df000315 	stw	fp,12(sp)
   4d9b8:	df000304 	addi	fp,sp,12
   4d9bc:	e13ffd15 	stw	r4,-12(fp)
   4d9c0:	e17ffe15 	stw	r5,-8(fp)
   4d9c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4d9c8:	e0fffe17 	ldw	r3,-8(fp)
   4d9cc:	e0bffd17 	ldw	r2,-12(fp)
   4d9d0:	18800c26 	beq	r3,r2,4da04 <alt_load_section+0x54>
  {
    while( to != end )
   4d9d4:	00000806 	br	4d9f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4d9d8:	e0bffe17 	ldw	r2,-8(fp)
   4d9dc:	10c00104 	addi	r3,r2,4
   4d9e0:	e0fffe15 	stw	r3,-8(fp)
   4d9e4:	e0fffd17 	ldw	r3,-12(fp)
   4d9e8:	19000104 	addi	r4,r3,4
   4d9ec:	e13ffd15 	stw	r4,-12(fp)
   4d9f0:	18c00017 	ldw	r3,0(r3)
   4d9f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4d9f8:	e0fffe17 	ldw	r3,-8(fp)
   4d9fc:	e0bfff17 	ldw	r2,-4(fp)
   4da00:	18bff51e 	bne	r3,r2,4d9d8 <__alt_data_end+0xfffdb9d8>
    {
      *to++ = *from++;
    }
  }
}
   4da04:	0001883a 	nop
   4da08:	e037883a 	mov	sp,fp
   4da0c:	df000017 	ldw	fp,0(sp)
   4da10:	dec00104 	addi	sp,sp,4
   4da14:	f800283a 	ret

0004da18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4da18:	defffe04 	addi	sp,sp,-8
   4da1c:	dfc00115 	stw	ra,4(sp)
   4da20:	df000015 	stw	fp,0(sp)
   4da24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4da28:	01800174 	movhi	r6,5
   4da2c:	31873704 	addi	r6,r6,7388
   4da30:	01400174 	movhi	r5,5
   4da34:	29407c04 	addi	r5,r5,496
   4da38:	01000174 	movhi	r4,5
   4da3c:	21073704 	addi	r4,r4,7388
   4da40:	004d9b00 	call	4d9b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4da44:	01800134 	movhi	r6,4
   4da48:	31809104 	addi	r6,r6,580
   4da4c:	01400134 	movhi	r5,4
   4da50:	29400804 	addi	r5,r5,32
   4da54:	01000134 	movhi	r4,4
   4da58:	21000804 	addi	r4,r4,32
   4da5c:	004d9b00 	call	4d9b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4da60:	01800174 	movhi	r6,5
   4da64:	31807c04 	addi	r6,r6,496
   4da68:	01400174 	movhi	r5,5
   4da6c:	297ed804 	addi	r5,r5,-1184
   4da70:	01000174 	movhi	r4,5
   4da74:	213ed804 	addi	r4,r4,-1184
   4da78:	004d9b00 	call	4d9b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4da7c:	004ec380 	call	4ec38 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4da80:	004ee200 	call	4ee20 <alt_icache_flush_all>
}
   4da84:	0001883a 	nop
   4da88:	e037883a 	mov	sp,fp
   4da8c:	dfc00117 	ldw	ra,4(sp)
   4da90:	df000017 	ldw	fp,0(sp)
   4da94:	dec00204 	addi	sp,sp,8
   4da98:	f800283a 	ret

0004da9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4da9c:	defffe04 	addi	sp,sp,-8
   4daa0:	dfc00115 	stw	ra,4(sp)
   4daa4:	df000015 	stw	fp,0(sp)
   4daa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4daac:	d0a00b17 	ldw	r2,-32724(gp)
   4dab0:	10000326 	beq	r2,zero,4dac0 <alt_get_errno+0x24>
   4dab4:	d0a00b17 	ldw	r2,-32724(gp)
   4dab8:	103ee83a 	callr	r2
   4dabc:	00000106 	br	4dac4 <alt_get_errno+0x28>
   4dac0:	d0a6d104 	addi	r2,gp,-25788
}
   4dac4:	e037883a 	mov	sp,fp
   4dac8:	dfc00117 	ldw	ra,4(sp)
   4dacc:	df000017 	ldw	fp,0(sp)
   4dad0:	dec00204 	addi	sp,sp,8
   4dad4:	f800283a 	ret

0004dad8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4dad8:	defff904 	addi	sp,sp,-28
   4dadc:	dfc00615 	stw	ra,24(sp)
   4dae0:	df000515 	stw	fp,20(sp)
   4dae4:	df000504 	addi	fp,sp,20
   4dae8:	e13ffd15 	stw	r4,-12(fp)
   4daec:	e17ffe15 	stw	r5,-8(fp)
   4daf0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4daf4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4daf8:	e0bffd17 	ldw	r2,-12(fp)
   4dafc:	10000616 	blt	r2,zero,4db18 <lseek+0x40>
   4db00:	e0bffd17 	ldw	r2,-12(fp)
   4db04:	10c00324 	muli	r3,r2,12
   4db08:	00800174 	movhi	r2,5
   4db0c:	1082af04 	addi	r2,r2,2748
   4db10:	1885883a 	add	r2,r3,r2
   4db14:	00000106 	br	4db1c <lseek+0x44>
   4db18:	0005883a 	mov	r2,zero
   4db1c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4db20:	e0bffc17 	ldw	r2,-16(fp)
   4db24:	10001026 	beq	r2,zero,4db68 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4db28:	e0bffc17 	ldw	r2,-16(fp)
   4db2c:	10800017 	ldw	r2,0(r2)
   4db30:	10800717 	ldw	r2,28(r2)
   4db34:	10000926 	beq	r2,zero,4db5c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4db38:	e0bffc17 	ldw	r2,-16(fp)
   4db3c:	10800017 	ldw	r2,0(r2)
   4db40:	10800717 	ldw	r2,28(r2)
   4db44:	e1bfff17 	ldw	r6,-4(fp)
   4db48:	e17ffe17 	ldw	r5,-8(fp)
   4db4c:	e13ffc17 	ldw	r4,-16(fp)
   4db50:	103ee83a 	callr	r2
   4db54:	e0bffb15 	stw	r2,-20(fp)
   4db58:	00000506 	br	4db70 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4db5c:	00bfde84 	movi	r2,-134
   4db60:	e0bffb15 	stw	r2,-20(fp)
   4db64:	00000206 	br	4db70 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4db68:	00bfebc4 	movi	r2,-81
   4db6c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4db70:	e0bffb17 	ldw	r2,-20(fp)
   4db74:	1000070e 	bge	r2,zero,4db94 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4db78:	004da9c0 	call	4da9c <alt_get_errno>
   4db7c:	1007883a 	mov	r3,r2
   4db80:	e0bffb17 	ldw	r2,-20(fp)
   4db84:	0085c83a 	sub	r2,zero,r2
   4db88:	18800015 	stw	r2,0(r3)
    rc = -1;
   4db8c:	00bfffc4 	movi	r2,-1
   4db90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4db94:	e0bffb17 	ldw	r2,-20(fp)
}
   4db98:	e037883a 	mov	sp,fp
   4db9c:	dfc00117 	ldw	ra,4(sp)
   4dba0:	df000017 	ldw	fp,0(sp)
   4dba4:	dec00204 	addi	sp,sp,8
   4dba8:	f800283a 	ret

0004dbac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4dbac:	defffd04 	addi	sp,sp,-12
   4dbb0:	dfc00215 	stw	ra,8(sp)
   4dbb4:	df000115 	stw	fp,4(sp)
   4dbb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4dbbc:	0009883a 	mov	r4,zero
   4dbc0:	004e0240 	call	4e024 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4dbc4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4dbc8:	004e05c0 	call	4e05c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4dbcc:	01800174 	movhi	r6,5
   4dbd0:	31807404 	addi	r6,r6,464
   4dbd4:	01400174 	movhi	r5,5
   4dbd8:	29407404 	addi	r5,r5,464
   4dbdc:	01000174 	movhi	r4,5
   4dbe0:	21007404 	addi	r4,r4,464
   4dbe4:	004f1b80 	call	4f1b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4dbe8:	004ed600 	call	4ed60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4dbec:	01000174 	movhi	r4,5
   4dbf0:	213b7004 	addi	r4,r4,-4672
   4dbf4:	004f9b80 	call	4f9b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4dbf8:	d0a6d217 	ldw	r2,-25784(gp)
   4dbfc:	d0e6d317 	ldw	r3,-25780(gp)
   4dc00:	d126d417 	ldw	r4,-25776(gp)
   4dc04:	200d883a 	mov	r6,r4
   4dc08:	180b883a 	mov	r5,r3
   4dc0c:	1009883a 	mov	r4,r2
   4dc10:	00406900 	call	40690 <main>
   4dc14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4dc18:	01000044 	movi	r4,1
   4dc1c:	004d6b40 	call	4d6b4 <close>
  exit (result);
   4dc20:	e13fff17 	ldw	r4,-4(fp)
   4dc24:	0040ba00 	call	40ba0 <exit>

0004dc28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4dc28:	defffe04 	addi	sp,sp,-8
   4dc2c:	df000115 	stw	fp,4(sp)
   4dc30:	df000104 	addi	fp,sp,4
   4dc34:	e13fff15 	stw	r4,-4(fp)
}
   4dc38:	0001883a 	nop
   4dc3c:	e037883a 	mov	sp,fp
   4dc40:	df000017 	ldw	fp,0(sp)
   4dc44:	dec00104 	addi	sp,sp,4
   4dc48:	f800283a 	ret

0004dc4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4dc4c:	defffe04 	addi	sp,sp,-8
   4dc50:	df000115 	stw	fp,4(sp)
   4dc54:	df000104 	addi	fp,sp,4
   4dc58:	e13fff15 	stw	r4,-4(fp)
}
   4dc5c:	0001883a 	nop
   4dc60:	e037883a 	mov	sp,fp
   4dc64:	df000017 	ldw	fp,0(sp)
   4dc68:	dec00104 	addi	sp,sp,4
   4dc6c:	f800283a 	ret

0004dc70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dc70:	defffe04 	addi	sp,sp,-8
   4dc74:	dfc00115 	stw	ra,4(sp)
   4dc78:	df000015 	stw	fp,0(sp)
   4dc7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dc80:	d0a00b17 	ldw	r2,-32724(gp)
   4dc84:	10000326 	beq	r2,zero,4dc94 <alt_get_errno+0x24>
   4dc88:	d0a00b17 	ldw	r2,-32724(gp)
   4dc8c:	103ee83a 	callr	r2
   4dc90:	00000106 	br	4dc98 <alt_get_errno+0x28>
   4dc94:	d0a6d104 	addi	r2,gp,-25788
}
   4dc98:	e037883a 	mov	sp,fp
   4dc9c:	dfc00117 	ldw	ra,4(sp)
   4dca0:	df000017 	ldw	fp,0(sp)
   4dca4:	dec00204 	addi	sp,sp,8
   4dca8:	f800283a 	ret

0004dcac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4dcac:	defff904 	addi	sp,sp,-28
   4dcb0:	dfc00615 	stw	ra,24(sp)
   4dcb4:	df000515 	stw	fp,20(sp)
   4dcb8:	df000504 	addi	fp,sp,20
   4dcbc:	e13ffd15 	stw	r4,-12(fp)
   4dcc0:	e17ffe15 	stw	r5,-8(fp)
   4dcc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4dcc8:	e0bffd17 	ldw	r2,-12(fp)
   4dccc:	10000616 	blt	r2,zero,4dce8 <read+0x3c>
   4dcd0:	e0bffd17 	ldw	r2,-12(fp)
   4dcd4:	10c00324 	muli	r3,r2,12
   4dcd8:	00800174 	movhi	r2,5
   4dcdc:	1082af04 	addi	r2,r2,2748
   4dce0:	1885883a 	add	r2,r3,r2
   4dce4:	00000106 	br	4dcec <read+0x40>
   4dce8:	0005883a 	mov	r2,zero
   4dcec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4dcf0:	e0bffb17 	ldw	r2,-20(fp)
   4dcf4:	10002226 	beq	r2,zero,4dd80 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4dcf8:	e0bffb17 	ldw	r2,-20(fp)
   4dcfc:	10800217 	ldw	r2,8(r2)
   4dd00:	108000cc 	andi	r2,r2,3
   4dd04:	10800060 	cmpeqi	r2,r2,1
   4dd08:	1000181e 	bne	r2,zero,4dd6c <read+0xc0>
        (fd->dev->read))
   4dd0c:	e0bffb17 	ldw	r2,-20(fp)
   4dd10:	10800017 	ldw	r2,0(r2)
   4dd14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4dd18:	10001426 	beq	r2,zero,4dd6c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4dd1c:	e0bffb17 	ldw	r2,-20(fp)
   4dd20:	10800017 	ldw	r2,0(r2)
   4dd24:	10800517 	ldw	r2,20(r2)
   4dd28:	e0ffff17 	ldw	r3,-4(fp)
   4dd2c:	180d883a 	mov	r6,r3
   4dd30:	e17ffe17 	ldw	r5,-8(fp)
   4dd34:	e13ffb17 	ldw	r4,-20(fp)
   4dd38:	103ee83a 	callr	r2
   4dd3c:	e0bffc15 	stw	r2,-16(fp)
   4dd40:	e0bffc17 	ldw	r2,-16(fp)
   4dd44:	1000070e 	bge	r2,zero,4dd64 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4dd48:	004dc700 	call	4dc70 <alt_get_errno>
   4dd4c:	1007883a 	mov	r3,r2
   4dd50:	e0bffc17 	ldw	r2,-16(fp)
   4dd54:	0085c83a 	sub	r2,zero,r2
   4dd58:	18800015 	stw	r2,0(r3)
          return -1;
   4dd5c:	00bfffc4 	movi	r2,-1
   4dd60:	00000c06 	br	4dd94 <read+0xe8>
        }
        return rval;
   4dd64:	e0bffc17 	ldw	r2,-16(fp)
   4dd68:	00000a06 	br	4dd94 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4dd6c:	004dc700 	call	4dc70 <alt_get_errno>
   4dd70:	1007883a 	mov	r3,r2
   4dd74:	00800344 	movi	r2,13
   4dd78:	18800015 	stw	r2,0(r3)
   4dd7c:	00000406 	br	4dd90 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4dd80:	004dc700 	call	4dc70 <alt_get_errno>
   4dd84:	1007883a 	mov	r3,r2
   4dd88:	00801444 	movi	r2,81
   4dd8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4dd90:	00bfffc4 	movi	r2,-1
}
   4dd94:	e037883a 	mov	sp,fp
   4dd98:	dfc00117 	ldw	ra,4(sp)
   4dd9c:	df000017 	ldw	fp,0(sp)
   4dda0:	dec00204 	addi	sp,sp,8
   4dda4:	f800283a 	ret

0004dda8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4dda8:	defffe04 	addi	sp,sp,-8
   4ddac:	df000115 	stw	fp,4(sp)
   4ddb0:	df000104 	addi	fp,sp,4
   4ddb4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4ddb8:	e0bfff17 	ldw	r2,-4(fp)
   4ddbc:	108000d0 	cmplti	r2,r2,3
   4ddc0:	10000d1e 	bne	r2,zero,4ddf8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4ddc4:	00800174 	movhi	r2,5
   4ddc8:	1082af04 	addi	r2,r2,2748
   4ddcc:	e0ffff17 	ldw	r3,-4(fp)
   4ddd0:	18c00324 	muli	r3,r3,12
   4ddd4:	10c5883a 	add	r2,r2,r3
   4ddd8:	10800204 	addi	r2,r2,8
   4dddc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4dde0:	00800174 	movhi	r2,5
   4dde4:	1082af04 	addi	r2,r2,2748
   4dde8:	e0ffff17 	ldw	r3,-4(fp)
   4ddec:	18c00324 	muli	r3,r3,12
   4ddf0:	10c5883a 	add	r2,r2,r3
   4ddf4:	10000015 	stw	zero,0(r2)
  }
}
   4ddf8:	0001883a 	nop
   4ddfc:	e037883a 	mov	sp,fp
   4de00:	df000017 	ldw	fp,0(sp)
   4de04:	dec00104 	addi	sp,sp,4
   4de08:	f800283a 	ret

0004de0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4de0c:	defff904 	addi	sp,sp,-28
   4de10:	df000615 	stw	fp,24(sp)
   4de14:	df000604 	addi	fp,sp,24
   4de18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4de1c:	0005303a 	rdctl	r2,status
   4de20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4de24:	e0fffe17 	ldw	r3,-8(fp)
   4de28:	00bfff84 	movi	r2,-2
   4de2c:	1884703a 	and	r2,r3,r2
   4de30:	1001703a 	wrctl	status,r2
  
  return context;
   4de34:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4de38:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4de3c:	d0a00c17 	ldw	r2,-32720(gp)
   4de40:	10c000c4 	addi	r3,r2,3
   4de44:	00bfff04 	movi	r2,-4
   4de48:	1884703a 	and	r2,r3,r2
   4de4c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4de50:	d0e00c17 	ldw	r3,-32720(gp)
   4de54:	e0bfff17 	ldw	r2,-4(fp)
   4de58:	1887883a 	add	r3,r3,r2
   4de5c:	008001f4 	movhi	r2,7
   4de60:	10880004 	addi	r2,r2,8192
   4de64:	10c0062e 	bgeu	r2,r3,4de80 <sbrk+0x74>
   4de68:	e0bffb17 	ldw	r2,-20(fp)
   4de6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4de70:	e0bffa17 	ldw	r2,-24(fp)
   4de74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4de78:	00bfffc4 	movi	r2,-1
   4de7c:	00000b06 	br	4deac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4de80:	d0a00c17 	ldw	r2,-32720(gp)
   4de84:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4de88:	d0e00c17 	ldw	r3,-32720(gp)
   4de8c:	e0bfff17 	ldw	r2,-4(fp)
   4de90:	1885883a 	add	r2,r3,r2
   4de94:	d0a00c15 	stw	r2,-32720(gp)
   4de98:	e0bffb17 	ldw	r2,-20(fp)
   4de9c:	e0bffc15 	stw	r2,-16(fp)
   4dea0:	e0bffc17 	ldw	r2,-16(fp)
   4dea4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4dea8:	e0bffd17 	ldw	r2,-12(fp)
} 
   4deac:	e037883a 	mov	sp,fp
   4deb0:	df000017 	ldw	fp,0(sp)
   4deb4:	dec00104 	addi	sp,sp,4
   4deb8:	f800283a 	ret

0004debc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4debc:	defffe04 	addi	sp,sp,-8
   4dec0:	dfc00115 	stw	ra,4(sp)
   4dec4:	df000015 	stw	fp,0(sp)
   4dec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4decc:	d0a00b17 	ldw	r2,-32724(gp)
   4ded0:	10000326 	beq	r2,zero,4dee0 <alt_get_errno+0x24>
   4ded4:	d0a00b17 	ldw	r2,-32724(gp)
   4ded8:	103ee83a 	callr	r2
   4dedc:	00000106 	br	4dee4 <alt_get_errno+0x28>
   4dee0:	d0a6d104 	addi	r2,gp,-25788
}
   4dee4:	e037883a 	mov	sp,fp
   4dee8:	dfc00117 	ldw	ra,4(sp)
   4deec:	df000017 	ldw	fp,0(sp)
   4def0:	dec00204 	addi	sp,sp,8
   4def4:	f800283a 	ret

0004def8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4def8:	defff904 	addi	sp,sp,-28
   4defc:	dfc00615 	stw	ra,24(sp)
   4df00:	df000515 	stw	fp,20(sp)
   4df04:	df000504 	addi	fp,sp,20
   4df08:	e13ffd15 	stw	r4,-12(fp)
   4df0c:	e17ffe15 	stw	r5,-8(fp)
   4df10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4df14:	e0bffd17 	ldw	r2,-12(fp)
   4df18:	10000616 	blt	r2,zero,4df34 <write+0x3c>
   4df1c:	e0bffd17 	ldw	r2,-12(fp)
   4df20:	10c00324 	muli	r3,r2,12
   4df24:	00800174 	movhi	r2,5
   4df28:	1082af04 	addi	r2,r2,2748
   4df2c:	1885883a 	add	r2,r3,r2
   4df30:	00000106 	br	4df38 <write+0x40>
   4df34:	0005883a 	mov	r2,zero
   4df38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4df3c:	e0bffb17 	ldw	r2,-20(fp)
   4df40:	10002126 	beq	r2,zero,4dfc8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4df44:	e0bffb17 	ldw	r2,-20(fp)
   4df48:	10800217 	ldw	r2,8(r2)
   4df4c:	108000cc 	andi	r2,r2,3
   4df50:	10001826 	beq	r2,zero,4dfb4 <write+0xbc>
   4df54:	e0bffb17 	ldw	r2,-20(fp)
   4df58:	10800017 	ldw	r2,0(r2)
   4df5c:	10800617 	ldw	r2,24(r2)
   4df60:	10001426 	beq	r2,zero,4dfb4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4df64:	e0bffb17 	ldw	r2,-20(fp)
   4df68:	10800017 	ldw	r2,0(r2)
   4df6c:	10800617 	ldw	r2,24(r2)
   4df70:	e0ffff17 	ldw	r3,-4(fp)
   4df74:	180d883a 	mov	r6,r3
   4df78:	e17ffe17 	ldw	r5,-8(fp)
   4df7c:	e13ffb17 	ldw	r4,-20(fp)
   4df80:	103ee83a 	callr	r2
   4df84:	e0bffc15 	stw	r2,-16(fp)
   4df88:	e0bffc17 	ldw	r2,-16(fp)
   4df8c:	1000070e 	bge	r2,zero,4dfac <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4df90:	004debc0 	call	4debc <alt_get_errno>
   4df94:	1007883a 	mov	r3,r2
   4df98:	e0bffc17 	ldw	r2,-16(fp)
   4df9c:	0085c83a 	sub	r2,zero,r2
   4dfa0:	18800015 	stw	r2,0(r3)
        return -1;
   4dfa4:	00bfffc4 	movi	r2,-1
   4dfa8:	00000c06 	br	4dfdc <write+0xe4>
      }
      return rval;
   4dfac:	e0bffc17 	ldw	r2,-16(fp)
   4dfb0:	00000a06 	br	4dfdc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4dfb4:	004debc0 	call	4debc <alt_get_errno>
   4dfb8:	1007883a 	mov	r3,r2
   4dfbc:	00800344 	movi	r2,13
   4dfc0:	18800015 	stw	r2,0(r3)
   4dfc4:	00000406 	br	4dfd8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4dfc8:	004debc0 	call	4debc <alt_get_errno>
   4dfcc:	1007883a 	mov	r3,r2
   4dfd0:	00801444 	movi	r2,81
   4dfd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4dfd8:	00bfffc4 	movi	r2,-1
}
   4dfdc:	e037883a 	mov	sp,fp
   4dfe0:	dfc00117 	ldw	ra,4(sp)
   4dfe4:	df000017 	ldw	fp,0(sp)
   4dfe8:	dec00204 	addi	sp,sp,8
   4dfec:	f800283a 	ret

0004dff0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4dff0:	defffd04 	addi	sp,sp,-12
   4dff4:	dfc00215 	stw	ra,8(sp)
   4dff8:	df000115 	stw	fp,4(sp)
   4dffc:	df000104 	addi	fp,sp,4
   4e000:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4e004:	d1600804 	addi	r5,gp,-32736
   4e008:	e13fff17 	ldw	r4,-4(fp)
   4e00c:	004ecbc0 	call	4ecbc <alt_dev_llist_insert>
}
   4e010:	e037883a 	mov	sp,fp
   4e014:	dfc00117 	ldw	ra,4(sp)
   4e018:	df000017 	ldw	fp,0(sp)
   4e01c:	dec00204 	addi	sp,sp,8
   4e020:	f800283a 	ret

0004e024 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4e024:	defffd04 	addi	sp,sp,-12
   4e028:	dfc00215 	stw	ra,8(sp)
   4e02c:	df000115 	stw	fp,4(sp)
   4e030:	df000104 	addi	fp,sp,4
   4e034:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   4e038:	004f62c0 	call	4f62c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4e03c:	00800044 	movi	r2,1
   4e040:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4e044:	0001883a 	nop
   4e048:	e037883a 	mov	sp,fp
   4e04c:	dfc00117 	ldw	ra,4(sp)
   4e050:	df000017 	ldw	fp,0(sp)
   4e054:	dec00204 	addi	sp,sp,8
   4e058:	f800283a 	ret

0004e05c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4e05c:	defffe04 	addi	sp,sp,-8
   4e060:	dfc00115 	stw	ra,4(sp)
   4e064:	df000015 	stw	fp,0(sp)
   4e068:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4e06c:	000d883a 	mov	r6,zero
   4e070:	000b883a 	mov	r5,zero
   4e074:	01000174 	movhi	r4,5
   4e078:	21031904 	addi	r4,r4,3172
   4e07c:	004e2080 	call	4e208 <altera_avalon_jtag_uart_init>
   4e080:	01000174 	movhi	r4,5
   4e084:	21030f04 	addi	r4,r4,3132
   4e088:	004dff00 	call	4dff0 <alt_dev_reg>
}
   4e08c:	0001883a 	nop
   4e090:	e037883a 	mov	sp,fp
   4e094:	dfc00117 	ldw	ra,4(sp)
   4e098:	df000017 	ldw	fp,0(sp)
   4e09c:	dec00204 	addi	sp,sp,8
   4e0a0:	f800283a 	ret

0004e0a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4e0a4:	defffa04 	addi	sp,sp,-24
   4e0a8:	dfc00515 	stw	ra,20(sp)
   4e0ac:	df000415 	stw	fp,16(sp)
   4e0b0:	df000404 	addi	fp,sp,16
   4e0b4:	e13ffd15 	stw	r4,-12(fp)
   4e0b8:	e17ffe15 	stw	r5,-8(fp)
   4e0bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4e0c0:	e0bffd17 	ldw	r2,-12(fp)
   4e0c4:	10800017 	ldw	r2,0(r2)
   4e0c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4e0cc:	e0bffc17 	ldw	r2,-16(fp)
   4e0d0:	10c00a04 	addi	r3,r2,40
   4e0d4:	e0bffd17 	ldw	r2,-12(fp)
   4e0d8:	10800217 	ldw	r2,8(r2)
   4e0dc:	100f883a 	mov	r7,r2
   4e0e0:	e1bfff17 	ldw	r6,-4(fp)
   4e0e4:	e17ffe17 	ldw	r5,-8(fp)
   4e0e8:	1809883a 	mov	r4,r3
   4e0ec:	004e6cc0 	call	4e6cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4e0f0:	e037883a 	mov	sp,fp
   4e0f4:	dfc00117 	ldw	ra,4(sp)
   4e0f8:	df000017 	ldw	fp,0(sp)
   4e0fc:	dec00204 	addi	sp,sp,8
   4e100:	f800283a 	ret

0004e104 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4e104:	defffa04 	addi	sp,sp,-24
   4e108:	dfc00515 	stw	ra,20(sp)
   4e10c:	df000415 	stw	fp,16(sp)
   4e110:	df000404 	addi	fp,sp,16
   4e114:	e13ffd15 	stw	r4,-12(fp)
   4e118:	e17ffe15 	stw	r5,-8(fp)
   4e11c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4e120:	e0bffd17 	ldw	r2,-12(fp)
   4e124:	10800017 	ldw	r2,0(r2)
   4e128:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4e12c:	e0bffc17 	ldw	r2,-16(fp)
   4e130:	10c00a04 	addi	r3,r2,40
   4e134:	e0bffd17 	ldw	r2,-12(fp)
   4e138:	10800217 	ldw	r2,8(r2)
   4e13c:	100f883a 	mov	r7,r2
   4e140:	e1bfff17 	ldw	r6,-4(fp)
   4e144:	e17ffe17 	ldw	r5,-8(fp)
   4e148:	1809883a 	mov	r4,r3
   4e14c:	004e8e80 	call	4e8e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4e150:	e037883a 	mov	sp,fp
   4e154:	dfc00117 	ldw	ra,4(sp)
   4e158:	df000017 	ldw	fp,0(sp)
   4e15c:	dec00204 	addi	sp,sp,8
   4e160:	f800283a 	ret

0004e164 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4e164:	defffc04 	addi	sp,sp,-16
   4e168:	dfc00315 	stw	ra,12(sp)
   4e16c:	df000215 	stw	fp,8(sp)
   4e170:	df000204 	addi	fp,sp,8
   4e174:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4e178:	e0bfff17 	ldw	r2,-4(fp)
   4e17c:	10800017 	ldw	r2,0(r2)
   4e180:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4e184:	e0bffe17 	ldw	r2,-8(fp)
   4e188:	10c00a04 	addi	r3,r2,40
   4e18c:	e0bfff17 	ldw	r2,-4(fp)
   4e190:	10800217 	ldw	r2,8(r2)
   4e194:	100b883a 	mov	r5,r2
   4e198:	1809883a 	mov	r4,r3
   4e19c:	004e5740 	call	4e574 <altera_avalon_jtag_uart_close>
}
   4e1a0:	e037883a 	mov	sp,fp
   4e1a4:	dfc00117 	ldw	ra,4(sp)
   4e1a8:	df000017 	ldw	fp,0(sp)
   4e1ac:	dec00204 	addi	sp,sp,8
   4e1b0:	f800283a 	ret

0004e1b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4e1b4:	defffa04 	addi	sp,sp,-24
   4e1b8:	dfc00515 	stw	ra,20(sp)
   4e1bc:	df000415 	stw	fp,16(sp)
   4e1c0:	df000404 	addi	fp,sp,16
   4e1c4:	e13ffd15 	stw	r4,-12(fp)
   4e1c8:	e17ffe15 	stw	r5,-8(fp)
   4e1cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4e1d0:	e0bffd17 	ldw	r2,-12(fp)
   4e1d4:	10800017 	ldw	r2,0(r2)
   4e1d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4e1dc:	e0bffc17 	ldw	r2,-16(fp)
   4e1e0:	10800a04 	addi	r2,r2,40
   4e1e4:	e1bfff17 	ldw	r6,-4(fp)
   4e1e8:	e17ffe17 	ldw	r5,-8(fp)
   4e1ec:	1009883a 	mov	r4,r2
   4e1f0:	004e5dc0 	call	4e5dc <altera_avalon_jtag_uart_ioctl>
}
   4e1f4:	e037883a 	mov	sp,fp
   4e1f8:	dfc00117 	ldw	ra,4(sp)
   4e1fc:	df000017 	ldw	fp,0(sp)
   4e200:	dec00204 	addi	sp,sp,8
   4e204:	f800283a 	ret

0004e208 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4e208:	defffa04 	addi	sp,sp,-24
   4e20c:	dfc00515 	stw	ra,20(sp)
   4e210:	df000415 	stw	fp,16(sp)
   4e214:	df000404 	addi	fp,sp,16
   4e218:	e13ffd15 	stw	r4,-12(fp)
   4e21c:	e17ffe15 	stw	r5,-8(fp)
   4e220:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e224:	e0bffd17 	ldw	r2,-12(fp)
   4e228:	00c00044 	movi	r3,1
   4e22c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4e230:	e0bffd17 	ldw	r2,-12(fp)
   4e234:	10800017 	ldw	r2,0(r2)
   4e238:	10800104 	addi	r2,r2,4
   4e23c:	1007883a 	mov	r3,r2
   4e240:	e0bffd17 	ldw	r2,-12(fp)
   4e244:	10800817 	ldw	r2,32(r2)
   4e248:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4e24c:	e0bffe17 	ldw	r2,-8(fp)
   4e250:	e0ffff17 	ldw	r3,-4(fp)
   4e254:	d8000015 	stw	zero,0(sp)
   4e258:	e1fffd17 	ldw	r7,-12(fp)
   4e25c:	01800174 	movhi	r6,5
   4e260:	31b8b204 	addi	r6,r6,-7480
   4e264:	180b883a 	mov	r5,r3
   4e268:	1009883a 	mov	r4,r2
   4e26c:	004ee540 	call	4ee54 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4e270:	e0bffd17 	ldw	r2,-12(fp)
   4e274:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4e278:	e0bffd17 	ldw	r2,-12(fp)
   4e27c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4e280:	d0e6d617 	ldw	r3,-25768(gp)
   4e284:	e1fffd17 	ldw	r7,-12(fp)
   4e288:	01800174 	movhi	r6,5
   4e28c:	31b93504 	addi	r6,r6,-6956
   4e290:	180b883a 	mov	r5,r3
   4e294:	1009883a 	mov	r4,r2
   4e298:	004eb0c0 	call	4eb0c <alt_alarm_start>
   4e29c:	1000040e 	bge	r2,zero,4e2b0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4e2a0:	e0fffd17 	ldw	r3,-12(fp)
   4e2a4:	00a00034 	movhi	r2,32768
   4e2a8:	10bfffc4 	addi	r2,r2,-1
   4e2ac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4e2b0:	0001883a 	nop
   4e2b4:	e037883a 	mov	sp,fp
   4e2b8:	dfc00117 	ldw	ra,4(sp)
   4e2bc:	df000017 	ldw	fp,0(sp)
   4e2c0:	dec00204 	addi	sp,sp,8
   4e2c4:	f800283a 	ret

0004e2c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4e2c8:	defff804 	addi	sp,sp,-32
   4e2cc:	df000715 	stw	fp,28(sp)
   4e2d0:	df000704 	addi	fp,sp,28
   4e2d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4e2d8:	e0bfff17 	ldw	r2,-4(fp)
   4e2dc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4e2e0:	e0bffb17 	ldw	r2,-20(fp)
   4e2e4:	10800017 	ldw	r2,0(r2)
   4e2e8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e2ec:	e0bffc17 	ldw	r2,-16(fp)
   4e2f0:	10800104 	addi	r2,r2,4
   4e2f4:	10800037 	ldwio	r2,0(r2)
   4e2f8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4e2fc:	e0bffd17 	ldw	r2,-12(fp)
   4e300:	1080c00c 	andi	r2,r2,768
   4e304:	10006d26 	beq	r2,zero,4e4bc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4e308:	e0bffd17 	ldw	r2,-12(fp)
   4e30c:	1080400c 	andi	r2,r2,256
   4e310:	10003526 	beq	r2,zero,4e3e8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4e314:	00800074 	movhi	r2,1
   4e318:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e31c:	e0bffb17 	ldw	r2,-20(fp)
   4e320:	10800a17 	ldw	r2,40(r2)
   4e324:	10800044 	addi	r2,r2,1
   4e328:	1081ffcc 	andi	r2,r2,2047
   4e32c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4e330:	e0bffb17 	ldw	r2,-20(fp)
   4e334:	10c00b17 	ldw	r3,44(r2)
   4e338:	e0bffe17 	ldw	r2,-8(fp)
   4e33c:	18801526 	beq	r3,r2,4e394 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4e340:	e0bffc17 	ldw	r2,-16(fp)
   4e344:	10800037 	ldwio	r2,0(r2)
   4e348:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4e34c:	e0bff917 	ldw	r2,-28(fp)
   4e350:	10a0000c 	andi	r2,r2,32768
   4e354:	10001126 	beq	r2,zero,4e39c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4e358:	e0bffb17 	ldw	r2,-20(fp)
   4e35c:	10800a17 	ldw	r2,40(r2)
   4e360:	e0fff917 	ldw	r3,-28(fp)
   4e364:	1809883a 	mov	r4,r3
   4e368:	e0fffb17 	ldw	r3,-20(fp)
   4e36c:	1885883a 	add	r2,r3,r2
   4e370:	10800e04 	addi	r2,r2,56
   4e374:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e378:	e0bffb17 	ldw	r2,-20(fp)
   4e37c:	10800a17 	ldw	r2,40(r2)
   4e380:	10800044 	addi	r2,r2,1
   4e384:	10c1ffcc 	andi	r3,r2,2047
   4e388:	e0bffb17 	ldw	r2,-20(fp)
   4e38c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4e390:	003fe206 	br	4e31c <__alt_data_end+0xfffdc31c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4e394:	0001883a 	nop
   4e398:	00000106 	br	4e3a0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4e39c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4e3a0:	e0bff917 	ldw	r2,-28(fp)
   4e3a4:	10bfffec 	andhi	r2,r2,65535
   4e3a8:	10000f26 	beq	r2,zero,4e3e8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e3ac:	e0bffb17 	ldw	r2,-20(fp)
   4e3b0:	10c00817 	ldw	r3,32(r2)
   4e3b4:	00bfff84 	movi	r2,-2
   4e3b8:	1886703a 	and	r3,r3,r2
   4e3bc:	e0bffb17 	ldw	r2,-20(fp)
   4e3c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4e3c4:	e0bffc17 	ldw	r2,-16(fp)
   4e3c8:	10800104 	addi	r2,r2,4
   4e3cc:	1007883a 	mov	r3,r2
   4e3d0:	e0bffb17 	ldw	r2,-20(fp)
   4e3d4:	10800817 	ldw	r2,32(r2)
   4e3d8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e3dc:	e0bffc17 	ldw	r2,-16(fp)
   4e3e0:	10800104 	addi	r2,r2,4
   4e3e4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4e3e8:	e0bffd17 	ldw	r2,-12(fp)
   4e3ec:	1080800c 	andi	r2,r2,512
   4e3f0:	103fbe26 	beq	r2,zero,4e2ec <__alt_data_end+0xfffdc2ec>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4e3f4:	e0bffd17 	ldw	r2,-12(fp)
   4e3f8:	1004d43a 	srli	r2,r2,16
   4e3fc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4e400:	00001406 	br	4e454 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4e404:	e0bffc17 	ldw	r2,-16(fp)
   4e408:	e0fffb17 	ldw	r3,-20(fp)
   4e40c:	18c00d17 	ldw	r3,52(r3)
   4e410:	e13ffb17 	ldw	r4,-20(fp)
   4e414:	20c7883a 	add	r3,r4,r3
   4e418:	18c20e04 	addi	r3,r3,2104
   4e41c:	18c00003 	ldbu	r3,0(r3)
   4e420:	18c03fcc 	andi	r3,r3,255
   4e424:	18c0201c 	xori	r3,r3,128
   4e428:	18ffe004 	addi	r3,r3,-128
   4e42c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e430:	e0bffb17 	ldw	r2,-20(fp)
   4e434:	10800d17 	ldw	r2,52(r2)
   4e438:	10800044 	addi	r2,r2,1
   4e43c:	10c1ffcc 	andi	r3,r2,2047
   4e440:	e0bffb17 	ldw	r2,-20(fp)
   4e444:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4e448:	e0bffa17 	ldw	r2,-24(fp)
   4e44c:	10bfffc4 	addi	r2,r2,-1
   4e450:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4e454:	e0bffa17 	ldw	r2,-24(fp)
   4e458:	10000526 	beq	r2,zero,4e470 <altera_avalon_jtag_uart_irq+0x1a8>
   4e45c:	e0bffb17 	ldw	r2,-20(fp)
   4e460:	10c00d17 	ldw	r3,52(r2)
   4e464:	e0bffb17 	ldw	r2,-20(fp)
   4e468:	10800c17 	ldw	r2,48(r2)
   4e46c:	18bfe51e 	bne	r3,r2,4e404 <__alt_data_end+0xfffdc404>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4e470:	e0bffa17 	ldw	r2,-24(fp)
   4e474:	103f9d26 	beq	r2,zero,4e2ec <__alt_data_end+0xfffdc2ec>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e478:	e0bffb17 	ldw	r2,-20(fp)
   4e47c:	10c00817 	ldw	r3,32(r2)
   4e480:	00bfff44 	movi	r2,-3
   4e484:	1886703a 	and	r3,r3,r2
   4e488:	e0bffb17 	ldw	r2,-20(fp)
   4e48c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e490:	e0bffb17 	ldw	r2,-20(fp)
   4e494:	10800017 	ldw	r2,0(r2)
   4e498:	10800104 	addi	r2,r2,4
   4e49c:	1007883a 	mov	r3,r2
   4e4a0:	e0bffb17 	ldw	r2,-20(fp)
   4e4a4:	10800817 	ldw	r2,32(r2)
   4e4a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4e4ac:	e0bffc17 	ldw	r2,-16(fp)
   4e4b0:	10800104 	addi	r2,r2,4
   4e4b4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4e4b8:	003f8c06 	br	4e2ec <__alt_data_end+0xfffdc2ec>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4e4bc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4e4c0:	0001883a 	nop
   4e4c4:	e037883a 	mov	sp,fp
   4e4c8:	df000017 	ldw	fp,0(sp)
   4e4cc:	dec00104 	addi	sp,sp,4
   4e4d0:	f800283a 	ret

0004e4d4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4e4d4:	defff804 	addi	sp,sp,-32
   4e4d8:	df000715 	stw	fp,28(sp)
   4e4dc:	df000704 	addi	fp,sp,28
   4e4e0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4e4e4:	e0bffb17 	ldw	r2,-20(fp)
   4e4e8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4e4ec:	e0bff917 	ldw	r2,-28(fp)
   4e4f0:	10800017 	ldw	r2,0(r2)
   4e4f4:	10800104 	addi	r2,r2,4
   4e4f8:	10800037 	ldwio	r2,0(r2)
   4e4fc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4e500:	e0bffa17 	ldw	r2,-24(fp)
   4e504:	1081000c 	andi	r2,r2,1024
   4e508:	10000b26 	beq	r2,zero,4e538 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4e50c:	e0bff917 	ldw	r2,-28(fp)
   4e510:	10800017 	ldw	r2,0(r2)
   4e514:	10800104 	addi	r2,r2,4
   4e518:	1007883a 	mov	r3,r2
   4e51c:	e0bff917 	ldw	r2,-28(fp)
   4e520:	10800817 	ldw	r2,32(r2)
   4e524:	10810014 	ori	r2,r2,1024
   4e528:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4e52c:	e0bff917 	ldw	r2,-28(fp)
   4e530:	10000915 	stw	zero,36(r2)
   4e534:	00000a06 	br	4e560 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4e538:	e0bff917 	ldw	r2,-28(fp)
   4e53c:	10c00917 	ldw	r3,36(r2)
   4e540:	00a00034 	movhi	r2,32768
   4e544:	10bfff04 	addi	r2,r2,-4
   4e548:	10c00536 	bltu	r2,r3,4e560 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4e54c:	e0bff917 	ldw	r2,-28(fp)
   4e550:	10800917 	ldw	r2,36(r2)
   4e554:	10c00044 	addi	r3,r2,1
   4e558:	e0bff917 	ldw	r2,-28(fp)
   4e55c:	10c00915 	stw	r3,36(r2)
   4e560:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4e564:	e037883a 	mov	sp,fp
   4e568:	df000017 	ldw	fp,0(sp)
   4e56c:	dec00104 	addi	sp,sp,4
   4e570:	f800283a 	ret

0004e574 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4e574:	defffd04 	addi	sp,sp,-12
   4e578:	df000215 	stw	fp,8(sp)
   4e57c:	df000204 	addi	fp,sp,8
   4e580:	e13ffe15 	stw	r4,-8(fp)
   4e584:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4e588:	00000506 	br	4e5a0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4e58c:	e0bfff17 	ldw	r2,-4(fp)
   4e590:	1090000c 	andi	r2,r2,16384
   4e594:	10000226 	beq	r2,zero,4e5a0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4e598:	00bffd44 	movi	r2,-11
   4e59c:	00000b06 	br	4e5cc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4e5a0:	e0bffe17 	ldw	r2,-8(fp)
   4e5a4:	10c00d17 	ldw	r3,52(r2)
   4e5a8:	e0bffe17 	ldw	r2,-8(fp)
   4e5ac:	10800c17 	ldw	r2,48(r2)
   4e5b0:	18800526 	beq	r3,r2,4e5c8 <altera_avalon_jtag_uart_close+0x54>
   4e5b4:	e0bffe17 	ldw	r2,-8(fp)
   4e5b8:	10c00917 	ldw	r3,36(r2)
   4e5bc:	e0bffe17 	ldw	r2,-8(fp)
   4e5c0:	10800117 	ldw	r2,4(r2)
   4e5c4:	18bff136 	bltu	r3,r2,4e58c <__alt_data_end+0xfffdc58c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4e5c8:	0005883a 	mov	r2,zero
}
   4e5cc:	e037883a 	mov	sp,fp
   4e5d0:	df000017 	ldw	fp,0(sp)
   4e5d4:	dec00104 	addi	sp,sp,4
   4e5d8:	f800283a 	ret

0004e5dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4e5dc:	defffa04 	addi	sp,sp,-24
   4e5e0:	df000515 	stw	fp,20(sp)
   4e5e4:	df000504 	addi	fp,sp,20
   4e5e8:	e13ffd15 	stw	r4,-12(fp)
   4e5ec:	e17ffe15 	stw	r5,-8(fp)
   4e5f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4e5f4:	00bff9c4 	movi	r2,-25
   4e5f8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4e5fc:	e0bffe17 	ldw	r2,-8(fp)
   4e600:	10da8060 	cmpeqi	r3,r2,27137
   4e604:	1800031e 	bne	r3,zero,4e614 <altera_avalon_jtag_uart_ioctl+0x38>
   4e608:	109a80a0 	cmpeqi	r2,r2,27138
   4e60c:	1000181e 	bne	r2,zero,4e670 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4e610:	00002906 	br	4e6b8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4e614:	e0bffd17 	ldw	r2,-12(fp)
   4e618:	10c00117 	ldw	r3,4(r2)
   4e61c:	00a00034 	movhi	r2,32768
   4e620:	10bfffc4 	addi	r2,r2,-1
   4e624:	18802126 	beq	r3,r2,4e6ac <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4e628:	e0bfff17 	ldw	r2,-4(fp)
   4e62c:	10800017 	ldw	r2,0(r2)
   4e630:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4e634:	e0bffc17 	ldw	r2,-16(fp)
   4e638:	10800090 	cmplti	r2,r2,2
   4e63c:	1000061e 	bne	r2,zero,4e658 <altera_avalon_jtag_uart_ioctl+0x7c>
   4e640:	e0fffc17 	ldw	r3,-16(fp)
   4e644:	00a00034 	movhi	r2,32768
   4e648:	10bfffc4 	addi	r2,r2,-1
   4e64c:	18800226 	beq	r3,r2,4e658 <altera_avalon_jtag_uart_ioctl+0x7c>
   4e650:	e0bffc17 	ldw	r2,-16(fp)
   4e654:	00000206 	br	4e660 <altera_avalon_jtag_uart_ioctl+0x84>
   4e658:	00a00034 	movhi	r2,32768
   4e65c:	10bfff84 	addi	r2,r2,-2
   4e660:	e0fffd17 	ldw	r3,-12(fp)
   4e664:	18800115 	stw	r2,4(r3)
      rc = 0;
   4e668:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e66c:	00000f06 	br	4e6ac <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4e670:	e0bffd17 	ldw	r2,-12(fp)
   4e674:	10c00117 	ldw	r3,4(r2)
   4e678:	00a00034 	movhi	r2,32768
   4e67c:	10bfffc4 	addi	r2,r2,-1
   4e680:	18800c26 	beq	r3,r2,4e6b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4e684:	e0bffd17 	ldw	r2,-12(fp)
   4e688:	10c00917 	ldw	r3,36(r2)
   4e68c:	e0bffd17 	ldw	r2,-12(fp)
   4e690:	10800117 	ldw	r2,4(r2)
   4e694:	1885803a 	cmpltu	r2,r3,r2
   4e698:	10c03fcc 	andi	r3,r2,255
   4e69c:	e0bfff17 	ldw	r2,-4(fp)
   4e6a0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4e6a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e6a8:	00000206 	br	4e6b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4e6ac:	0001883a 	nop
   4e6b0:	00000106 	br	4e6b8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4e6b4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4e6b8:	e0bffb17 	ldw	r2,-20(fp)
}
   4e6bc:	e037883a 	mov	sp,fp
   4e6c0:	df000017 	ldw	fp,0(sp)
   4e6c4:	dec00104 	addi	sp,sp,4
   4e6c8:	f800283a 	ret

0004e6cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4e6cc:	defff304 	addi	sp,sp,-52
   4e6d0:	dfc00c15 	stw	ra,48(sp)
   4e6d4:	df000b15 	stw	fp,44(sp)
   4e6d8:	df000b04 	addi	fp,sp,44
   4e6dc:	e13ffc15 	stw	r4,-16(fp)
   4e6e0:	e17ffd15 	stw	r5,-12(fp)
   4e6e4:	e1bffe15 	stw	r6,-8(fp)
   4e6e8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4e6ec:	e0bffd17 	ldw	r2,-12(fp)
   4e6f0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e6f4:	00004706 	br	4e814 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4e6f8:	e0bffc17 	ldw	r2,-16(fp)
   4e6fc:	10800a17 	ldw	r2,40(r2)
   4e700:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4e704:	e0bffc17 	ldw	r2,-16(fp)
   4e708:	10800b17 	ldw	r2,44(r2)
   4e70c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4e710:	e0fff717 	ldw	r3,-36(fp)
   4e714:	e0bff817 	ldw	r2,-32(fp)
   4e718:	18800536 	bltu	r3,r2,4e730 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4e71c:	e0fff717 	ldw	r3,-36(fp)
   4e720:	e0bff817 	ldw	r2,-32(fp)
   4e724:	1885c83a 	sub	r2,r3,r2
   4e728:	e0bff615 	stw	r2,-40(fp)
   4e72c:	00000406 	br	4e740 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4e730:	00c20004 	movi	r3,2048
   4e734:	e0bff817 	ldw	r2,-32(fp)
   4e738:	1885c83a 	sub	r2,r3,r2
   4e73c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e740:	e0bff617 	ldw	r2,-40(fp)
   4e744:	10001e26 	beq	r2,zero,4e7c0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4e748:	e0fffe17 	ldw	r3,-8(fp)
   4e74c:	e0bff617 	ldw	r2,-40(fp)
   4e750:	1880022e 	bgeu	r3,r2,4e75c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4e754:	e0bffe17 	ldw	r2,-8(fp)
   4e758:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4e75c:	e0bffc17 	ldw	r2,-16(fp)
   4e760:	10c00e04 	addi	r3,r2,56
   4e764:	e0bff817 	ldw	r2,-32(fp)
   4e768:	1885883a 	add	r2,r3,r2
   4e76c:	e1bff617 	ldw	r6,-40(fp)
   4e770:	100b883a 	mov	r5,r2
   4e774:	e13ff517 	ldw	r4,-44(fp)
   4e778:	00468240 	call	46824 <memcpy>
      ptr   += n;
   4e77c:	e0fff517 	ldw	r3,-44(fp)
   4e780:	e0bff617 	ldw	r2,-40(fp)
   4e784:	1885883a 	add	r2,r3,r2
   4e788:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4e78c:	e0fffe17 	ldw	r3,-8(fp)
   4e790:	e0bff617 	ldw	r2,-40(fp)
   4e794:	1885c83a 	sub	r2,r3,r2
   4e798:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e79c:	e0fff817 	ldw	r3,-32(fp)
   4e7a0:	e0bff617 	ldw	r2,-40(fp)
   4e7a4:	1885883a 	add	r2,r3,r2
   4e7a8:	10c1ffcc 	andi	r3,r2,2047
   4e7ac:	e0bffc17 	ldw	r2,-16(fp)
   4e7b0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4e7b4:	e0bffe17 	ldw	r2,-8(fp)
   4e7b8:	00bfcf16 	blt	zero,r2,4e6f8 <__alt_data_end+0xfffdc6f8>
   4e7bc:	00000106 	br	4e7c4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4e7c0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4e7c4:	e0fff517 	ldw	r3,-44(fp)
   4e7c8:	e0bffd17 	ldw	r2,-12(fp)
   4e7cc:	1880141e 	bne	r3,r2,4e820 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4e7d0:	e0bfff17 	ldw	r2,-4(fp)
   4e7d4:	1090000c 	andi	r2,r2,16384
   4e7d8:	1000131e 	bne	r2,zero,4e828 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4e7dc:	0001883a 	nop
   4e7e0:	e0bffc17 	ldw	r2,-16(fp)
   4e7e4:	10c00a17 	ldw	r3,40(r2)
   4e7e8:	e0bff717 	ldw	r2,-36(fp)
   4e7ec:	1880051e 	bne	r3,r2,4e804 <altera_avalon_jtag_uart_read+0x138>
   4e7f0:	e0bffc17 	ldw	r2,-16(fp)
   4e7f4:	10c00917 	ldw	r3,36(r2)
   4e7f8:	e0bffc17 	ldw	r2,-16(fp)
   4e7fc:	10800117 	ldw	r2,4(r2)
   4e800:	18bff736 	bltu	r3,r2,4e7e0 <__alt_data_end+0xfffdc7e0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4e804:	e0bffc17 	ldw	r2,-16(fp)
   4e808:	10c00a17 	ldw	r3,40(r2)
   4e80c:	e0bff717 	ldw	r2,-36(fp)
   4e810:	18800726 	beq	r3,r2,4e830 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e814:	e0bffe17 	ldw	r2,-8(fp)
   4e818:	00bfb716 	blt	zero,r2,4e6f8 <__alt_data_end+0xfffdc6f8>
   4e81c:	00000506 	br	4e834 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4e820:	0001883a 	nop
   4e824:	00000306 	br	4e834 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4e828:	0001883a 	nop
   4e82c:	00000106 	br	4e834 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4e830:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4e834:	e0fff517 	ldw	r3,-44(fp)
   4e838:	e0bffd17 	ldw	r2,-12(fp)
   4e83c:	18801826 	beq	r3,r2,4e8a0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e840:	0005303a 	rdctl	r2,status
   4e844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e848:	e0fffb17 	ldw	r3,-20(fp)
   4e84c:	00bfff84 	movi	r2,-2
   4e850:	1884703a 	and	r2,r3,r2
   4e854:	1001703a 	wrctl	status,r2
  
  return context;
   4e858:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4e85c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e860:	e0bffc17 	ldw	r2,-16(fp)
   4e864:	10800817 	ldw	r2,32(r2)
   4e868:	10c00054 	ori	r3,r2,1
   4e86c:	e0bffc17 	ldw	r2,-16(fp)
   4e870:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e874:	e0bffc17 	ldw	r2,-16(fp)
   4e878:	10800017 	ldw	r2,0(r2)
   4e87c:	10800104 	addi	r2,r2,4
   4e880:	1007883a 	mov	r3,r2
   4e884:	e0bffc17 	ldw	r2,-16(fp)
   4e888:	10800817 	ldw	r2,32(r2)
   4e88c:	18800035 	stwio	r2,0(r3)
   4e890:	e0bffa17 	ldw	r2,-24(fp)
   4e894:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e898:	e0bff917 	ldw	r2,-28(fp)
   4e89c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4e8a0:	e0fff517 	ldw	r3,-44(fp)
   4e8a4:	e0bffd17 	ldw	r2,-12(fp)
   4e8a8:	18800426 	beq	r3,r2,4e8bc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4e8ac:	e0fff517 	ldw	r3,-44(fp)
   4e8b0:	e0bffd17 	ldw	r2,-12(fp)
   4e8b4:	1885c83a 	sub	r2,r3,r2
   4e8b8:	00000606 	br	4e8d4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4e8bc:	e0bfff17 	ldw	r2,-4(fp)
   4e8c0:	1090000c 	andi	r2,r2,16384
   4e8c4:	10000226 	beq	r2,zero,4e8d0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4e8c8:	00bffd44 	movi	r2,-11
   4e8cc:	00000106 	br	4e8d4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4e8d0:	00bffec4 	movi	r2,-5
}
   4e8d4:	e037883a 	mov	sp,fp
   4e8d8:	dfc00117 	ldw	ra,4(sp)
   4e8dc:	df000017 	ldw	fp,0(sp)
   4e8e0:	dec00204 	addi	sp,sp,8
   4e8e4:	f800283a 	ret

0004e8e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4e8e8:	defff304 	addi	sp,sp,-52
   4e8ec:	dfc00c15 	stw	ra,48(sp)
   4e8f0:	df000b15 	stw	fp,44(sp)
   4e8f4:	df000b04 	addi	fp,sp,44
   4e8f8:	e13ffc15 	stw	r4,-16(fp)
   4e8fc:	e17ffd15 	stw	r5,-12(fp)
   4e900:	e1bffe15 	stw	r6,-8(fp)
   4e904:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4e908:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4e90c:	e0bffd17 	ldw	r2,-12(fp)
   4e910:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e914:	00003706 	br	4e9f4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4e918:	e0bffc17 	ldw	r2,-16(fp)
   4e91c:	10800c17 	ldw	r2,48(r2)
   4e920:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4e924:	e0bffc17 	ldw	r2,-16(fp)
   4e928:	10800d17 	ldw	r2,52(r2)
   4e92c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4e930:	e0fff917 	ldw	r3,-28(fp)
   4e934:	e0bff517 	ldw	r2,-44(fp)
   4e938:	1880062e 	bgeu	r3,r2,4e954 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4e93c:	e0fff517 	ldw	r3,-44(fp)
   4e940:	e0bff917 	ldw	r2,-28(fp)
   4e944:	1885c83a 	sub	r2,r3,r2
   4e948:	10bfffc4 	addi	r2,r2,-1
   4e94c:	e0bff615 	stw	r2,-40(fp)
   4e950:	00000b06 	br	4e980 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4e954:	e0bff517 	ldw	r2,-44(fp)
   4e958:	10000526 	beq	r2,zero,4e970 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4e95c:	00c20004 	movi	r3,2048
   4e960:	e0bff917 	ldw	r2,-28(fp)
   4e964:	1885c83a 	sub	r2,r3,r2
   4e968:	e0bff615 	stw	r2,-40(fp)
   4e96c:	00000406 	br	4e980 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4e970:	00c1ffc4 	movi	r3,2047
   4e974:	e0bff917 	ldw	r2,-28(fp)
   4e978:	1885c83a 	sub	r2,r3,r2
   4e97c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e980:	e0bff617 	ldw	r2,-40(fp)
   4e984:	10001e26 	beq	r2,zero,4ea00 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4e988:	e0fffe17 	ldw	r3,-8(fp)
   4e98c:	e0bff617 	ldw	r2,-40(fp)
   4e990:	1880022e 	bgeu	r3,r2,4e99c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4e994:	e0bffe17 	ldw	r2,-8(fp)
   4e998:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4e99c:	e0bffc17 	ldw	r2,-16(fp)
   4e9a0:	10c20e04 	addi	r3,r2,2104
   4e9a4:	e0bff917 	ldw	r2,-28(fp)
   4e9a8:	1885883a 	add	r2,r3,r2
   4e9ac:	e1bff617 	ldw	r6,-40(fp)
   4e9b0:	e17ffd17 	ldw	r5,-12(fp)
   4e9b4:	1009883a 	mov	r4,r2
   4e9b8:	00468240 	call	46824 <memcpy>
      ptr   += n;
   4e9bc:	e0fffd17 	ldw	r3,-12(fp)
   4e9c0:	e0bff617 	ldw	r2,-40(fp)
   4e9c4:	1885883a 	add	r2,r3,r2
   4e9c8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4e9cc:	e0fffe17 	ldw	r3,-8(fp)
   4e9d0:	e0bff617 	ldw	r2,-40(fp)
   4e9d4:	1885c83a 	sub	r2,r3,r2
   4e9d8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e9dc:	e0fff917 	ldw	r3,-28(fp)
   4e9e0:	e0bff617 	ldw	r2,-40(fp)
   4e9e4:	1885883a 	add	r2,r3,r2
   4e9e8:	10c1ffcc 	andi	r3,r2,2047
   4e9ec:	e0bffc17 	ldw	r2,-16(fp)
   4e9f0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e9f4:	e0bffe17 	ldw	r2,-8(fp)
   4e9f8:	00bfc716 	blt	zero,r2,4e918 <__alt_data_end+0xfffdc918>
   4e9fc:	00000106 	br	4ea04 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4ea00:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ea04:	0005303a 	rdctl	r2,status
   4ea08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ea0c:	e0fffb17 	ldw	r3,-20(fp)
   4ea10:	00bfff84 	movi	r2,-2
   4ea14:	1884703a 	and	r2,r3,r2
   4ea18:	1001703a 	wrctl	status,r2
  
  return context;
   4ea1c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4ea20:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ea24:	e0bffc17 	ldw	r2,-16(fp)
   4ea28:	10800817 	ldw	r2,32(r2)
   4ea2c:	10c00094 	ori	r3,r2,2
   4ea30:	e0bffc17 	ldw	r2,-16(fp)
   4ea34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ea38:	e0bffc17 	ldw	r2,-16(fp)
   4ea3c:	10800017 	ldw	r2,0(r2)
   4ea40:	10800104 	addi	r2,r2,4
   4ea44:	1007883a 	mov	r3,r2
   4ea48:	e0bffc17 	ldw	r2,-16(fp)
   4ea4c:	10800817 	ldw	r2,32(r2)
   4ea50:	18800035 	stwio	r2,0(r3)
   4ea54:	e0bffa17 	ldw	r2,-24(fp)
   4ea58:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ea5c:	e0bff817 	ldw	r2,-32(fp)
   4ea60:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4ea64:	e0bffe17 	ldw	r2,-8(fp)
   4ea68:	0080100e 	bge	zero,r2,4eaac <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4ea6c:	e0bfff17 	ldw	r2,-4(fp)
   4ea70:	1090000c 	andi	r2,r2,16384
   4ea74:	1000101e 	bne	r2,zero,4eab8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4ea78:	0001883a 	nop
   4ea7c:	e0bffc17 	ldw	r2,-16(fp)
   4ea80:	10c00d17 	ldw	r3,52(r2)
   4ea84:	e0bff517 	ldw	r2,-44(fp)
   4ea88:	1880051e 	bne	r3,r2,4eaa0 <altera_avalon_jtag_uart_write+0x1b8>
   4ea8c:	e0bffc17 	ldw	r2,-16(fp)
   4ea90:	10c00917 	ldw	r3,36(r2)
   4ea94:	e0bffc17 	ldw	r2,-16(fp)
   4ea98:	10800117 	ldw	r2,4(r2)
   4ea9c:	18bff736 	bltu	r3,r2,4ea7c <__alt_data_end+0xfffdca7c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4eaa0:	e0bffc17 	ldw	r2,-16(fp)
   4eaa4:	10800917 	ldw	r2,36(r2)
   4eaa8:	1000051e 	bne	r2,zero,4eac0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4eaac:	e0bffe17 	ldw	r2,-8(fp)
   4eab0:	00bfd016 	blt	zero,r2,4e9f4 <__alt_data_end+0xfffdc9f4>
   4eab4:	00000306 	br	4eac4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4eab8:	0001883a 	nop
   4eabc:	00000106 	br	4eac4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4eac0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4eac4:	e0fffd17 	ldw	r3,-12(fp)
   4eac8:	e0bff717 	ldw	r2,-36(fp)
   4eacc:	18800426 	beq	r3,r2,4eae0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4ead0:	e0fffd17 	ldw	r3,-12(fp)
   4ead4:	e0bff717 	ldw	r2,-36(fp)
   4ead8:	1885c83a 	sub	r2,r3,r2
   4eadc:	00000606 	br	4eaf8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4eae0:	e0bfff17 	ldw	r2,-4(fp)
   4eae4:	1090000c 	andi	r2,r2,16384
   4eae8:	10000226 	beq	r2,zero,4eaf4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4eaec:	00bffd44 	movi	r2,-11
   4eaf0:	00000106 	br	4eaf8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4eaf4:	00bffec4 	movi	r2,-5
}
   4eaf8:	e037883a 	mov	sp,fp
   4eafc:	dfc00117 	ldw	ra,4(sp)
   4eb00:	df000017 	ldw	fp,0(sp)
   4eb04:	dec00204 	addi	sp,sp,8
   4eb08:	f800283a 	ret

0004eb0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4eb0c:	defff504 	addi	sp,sp,-44
   4eb10:	df000a15 	stw	fp,40(sp)
   4eb14:	df000a04 	addi	fp,sp,40
   4eb18:	e13ffc15 	stw	r4,-16(fp)
   4eb1c:	e17ffd15 	stw	r5,-12(fp)
   4eb20:	e1bffe15 	stw	r6,-8(fp)
   4eb24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4eb28:	e03ff615 	stw	zero,-40(fp)
   4eb2c:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
   4eb30:	10003c26 	beq	r2,zero,4ec24 <alt_alarm_start+0x118>
  {
    if (alarm)
   4eb34:	e0bffc17 	ldw	r2,-16(fp)
   4eb38:	10003826 	beq	r2,zero,4ec1c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4eb3c:	e0bffc17 	ldw	r2,-16(fp)
   4eb40:	e0fffe17 	ldw	r3,-8(fp)
   4eb44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4eb48:	e0bffc17 	ldw	r2,-16(fp)
   4eb4c:	e0ffff17 	ldw	r3,-4(fp)
   4eb50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4eb54:	0005303a 	rdctl	r2,status
   4eb58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4eb5c:	e0fff917 	ldw	r3,-28(fp)
   4eb60:	00bfff84 	movi	r2,-2
   4eb64:	1884703a 	and	r2,r3,r2
   4eb68:	1001703a 	wrctl	status,r2
  
  return context;
   4eb6c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4eb70:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4eb74:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
   4eb78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4eb7c:	e0fffd17 	ldw	r3,-12(fp)
   4eb80:	e0bff617 	ldw	r2,-40(fp)
   4eb84:	1885883a 	add	r2,r3,r2
   4eb88:	10c00044 	addi	r3,r2,1
   4eb8c:	e0bffc17 	ldw	r2,-16(fp)
   4eb90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4eb94:	e0bffc17 	ldw	r2,-16(fp)
   4eb98:	10c00217 	ldw	r3,8(r2)
   4eb9c:	e0bff617 	ldw	r2,-40(fp)
   4eba0:	1880042e 	bgeu	r3,r2,4ebb4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   4eba4:	e0bffc17 	ldw	r2,-16(fp)
   4eba8:	00c00044 	movi	r3,1
   4ebac:	10c00405 	stb	r3,16(r2)
   4ebb0:	00000206 	br	4ebbc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   4ebb4:	e0bffc17 	ldw	r2,-16(fp)
   4ebb8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4ebbc:	e0bffc17 	ldw	r2,-16(fp)
   4ebc0:	d0e00e04 	addi	r3,gp,-32712
   4ebc4:	e0fffa15 	stw	r3,-24(fp)
   4ebc8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ebcc:	e0bffb17 	ldw	r2,-20(fp)
   4ebd0:	e0fffa17 	ldw	r3,-24(fp)
   4ebd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4ebd8:	e0bffa17 	ldw	r2,-24(fp)
   4ebdc:	10c00017 	ldw	r3,0(r2)
   4ebe0:	e0bffb17 	ldw	r2,-20(fp)
   4ebe4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ebe8:	e0bffa17 	ldw	r2,-24(fp)
   4ebec:	10800017 	ldw	r2,0(r2)
   4ebf0:	e0fffb17 	ldw	r3,-20(fp)
   4ebf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4ebf8:	e0bffa17 	ldw	r2,-24(fp)
   4ebfc:	e0fffb17 	ldw	r3,-20(fp)
   4ec00:	10c00015 	stw	r3,0(r2)
   4ec04:	e0bff817 	ldw	r2,-32(fp)
   4ec08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ec0c:	e0bff717 	ldw	r2,-36(fp)
   4ec10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4ec14:	0005883a 	mov	r2,zero
   4ec18:	00000306 	br	4ec28 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4ec1c:	00bffa84 	movi	r2,-22
   4ec20:	00000106 	br	4ec28 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   4ec24:	00bfde84 	movi	r2,-134
  }
}
   4ec28:	e037883a 	mov	sp,fp
   4ec2c:	df000017 	ldw	fp,0(sp)
   4ec30:	dec00104 	addi	sp,sp,4
   4ec34:	f800283a 	ret

0004ec38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4ec38:	defffe04 	addi	sp,sp,-8
   4ec3c:	df000115 	stw	fp,4(sp)
   4ec40:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4ec44:	e03fff15 	stw	zero,-4(fp)
   4ec48:	00000506 	br	4ec60 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4ec4c:	e0bfff17 	ldw	r2,-4(fp)
   4ec50:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4ec54:	e0bfff17 	ldw	r2,-4(fp)
   4ec58:	10800804 	addi	r2,r2,32
   4ec5c:	e0bfff15 	stw	r2,-4(fp)
   4ec60:	e0bfff17 	ldw	r2,-4(fp)
   4ec64:	10820030 	cmpltui	r2,r2,2048
   4ec68:	103ff81e 	bne	r2,zero,4ec4c <__alt_data_end+0xfffdcc4c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4ec6c:	0001883a 	nop
   4ec70:	e037883a 	mov	sp,fp
   4ec74:	df000017 	ldw	fp,0(sp)
   4ec78:	dec00104 	addi	sp,sp,4
   4ec7c:	f800283a 	ret

0004ec80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ec80:	defffe04 	addi	sp,sp,-8
   4ec84:	dfc00115 	stw	ra,4(sp)
   4ec88:	df000015 	stw	fp,0(sp)
   4ec8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ec90:	d0a00b17 	ldw	r2,-32724(gp)
   4ec94:	10000326 	beq	r2,zero,4eca4 <alt_get_errno+0x24>
   4ec98:	d0a00b17 	ldw	r2,-32724(gp)
   4ec9c:	103ee83a 	callr	r2
   4eca0:	00000106 	br	4eca8 <alt_get_errno+0x28>
   4eca4:	d0a6d104 	addi	r2,gp,-25788
}
   4eca8:	e037883a 	mov	sp,fp
   4ecac:	dfc00117 	ldw	ra,4(sp)
   4ecb0:	df000017 	ldw	fp,0(sp)
   4ecb4:	dec00204 	addi	sp,sp,8
   4ecb8:	f800283a 	ret

0004ecbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4ecbc:	defffa04 	addi	sp,sp,-24
   4ecc0:	dfc00515 	stw	ra,20(sp)
   4ecc4:	df000415 	stw	fp,16(sp)
   4ecc8:	df000404 	addi	fp,sp,16
   4eccc:	e13ffe15 	stw	r4,-8(fp)
   4ecd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4ecd4:	e0bffe17 	ldw	r2,-8(fp)
   4ecd8:	10000326 	beq	r2,zero,4ece8 <alt_dev_llist_insert+0x2c>
   4ecdc:	e0bffe17 	ldw	r2,-8(fp)
   4ece0:	10800217 	ldw	r2,8(r2)
   4ece4:	1000061e 	bne	r2,zero,4ed00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4ece8:	004ec800 	call	4ec80 <alt_get_errno>
   4ecec:	1007883a 	mov	r3,r2
   4ecf0:	00800584 	movi	r2,22
   4ecf4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4ecf8:	00bffa84 	movi	r2,-22
   4ecfc:	00001306 	br	4ed4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4ed00:	e0bffe17 	ldw	r2,-8(fp)
   4ed04:	e0ffff17 	ldw	r3,-4(fp)
   4ed08:	e0fffc15 	stw	r3,-16(fp)
   4ed0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ed10:	e0bffd17 	ldw	r2,-12(fp)
   4ed14:	e0fffc17 	ldw	r3,-16(fp)
   4ed18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4ed1c:	e0bffc17 	ldw	r2,-16(fp)
   4ed20:	10c00017 	ldw	r3,0(r2)
   4ed24:	e0bffd17 	ldw	r2,-12(fp)
   4ed28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4ed2c:	e0bffc17 	ldw	r2,-16(fp)
   4ed30:	10800017 	ldw	r2,0(r2)
   4ed34:	e0fffd17 	ldw	r3,-12(fp)
   4ed38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4ed3c:	e0bffc17 	ldw	r2,-16(fp)
   4ed40:	e0fffd17 	ldw	r3,-12(fp)
   4ed44:	10c00015 	stw	r3,0(r2)

  return 0;  
   4ed48:	0005883a 	mov	r2,zero
}
   4ed4c:	e037883a 	mov	sp,fp
   4ed50:	dfc00117 	ldw	ra,4(sp)
   4ed54:	df000017 	ldw	fp,0(sp)
   4ed58:	dec00204 	addi	sp,sp,8
   4ed5c:	f800283a 	ret

0004ed60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4ed60:	defffd04 	addi	sp,sp,-12
   4ed64:	dfc00215 	stw	ra,8(sp)
   4ed68:	df000115 	stw	fp,4(sp)
   4ed6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4ed70:	00800174 	movhi	r2,5
   4ed74:	10bed704 	addi	r2,r2,-1188
   4ed78:	e0bfff15 	stw	r2,-4(fp)
   4ed7c:	00000606 	br	4ed98 <_do_ctors+0x38>
        (*ctor) (); 
   4ed80:	e0bfff17 	ldw	r2,-4(fp)
   4ed84:	10800017 	ldw	r2,0(r2)
   4ed88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4ed8c:	e0bfff17 	ldw	r2,-4(fp)
   4ed90:	10bfff04 	addi	r2,r2,-4
   4ed94:	e0bfff15 	stw	r2,-4(fp)
   4ed98:	e0ffff17 	ldw	r3,-4(fp)
   4ed9c:	00800174 	movhi	r2,5
   4eda0:	10bed804 	addi	r2,r2,-1184
   4eda4:	18bff62e 	bgeu	r3,r2,4ed80 <__alt_data_end+0xfffdcd80>
        (*ctor) (); 
}
   4eda8:	0001883a 	nop
   4edac:	e037883a 	mov	sp,fp
   4edb0:	dfc00117 	ldw	ra,4(sp)
   4edb4:	df000017 	ldw	fp,0(sp)
   4edb8:	dec00204 	addi	sp,sp,8
   4edbc:	f800283a 	ret

0004edc0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4edc0:	defffd04 	addi	sp,sp,-12
   4edc4:	dfc00215 	stw	ra,8(sp)
   4edc8:	df000115 	stw	fp,4(sp)
   4edcc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4edd0:	00800174 	movhi	r2,5
   4edd4:	10bed704 	addi	r2,r2,-1188
   4edd8:	e0bfff15 	stw	r2,-4(fp)
   4eddc:	00000606 	br	4edf8 <_do_dtors+0x38>
        (*dtor) (); 
   4ede0:	e0bfff17 	ldw	r2,-4(fp)
   4ede4:	10800017 	ldw	r2,0(r2)
   4ede8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4edec:	e0bfff17 	ldw	r2,-4(fp)
   4edf0:	10bfff04 	addi	r2,r2,-4
   4edf4:	e0bfff15 	stw	r2,-4(fp)
   4edf8:	e0ffff17 	ldw	r3,-4(fp)
   4edfc:	00800174 	movhi	r2,5
   4ee00:	10bed804 	addi	r2,r2,-1184
   4ee04:	18bff62e 	bgeu	r3,r2,4ede0 <__alt_data_end+0xfffdcde0>
        (*dtor) (); 
}
   4ee08:	0001883a 	nop
   4ee0c:	e037883a 	mov	sp,fp
   4ee10:	dfc00117 	ldw	ra,4(sp)
   4ee14:	df000017 	ldw	fp,0(sp)
   4ee18:	dec00204 	addi	sp,sp,8
   4ee1c:	f800283a 	ret

0004ee20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4ee20:	defffe04 	addi	sp,sp,-8
   4ee24:	dfc00115 	stw	ra,4(sp)
   4ee28:	df000015 	stw	fp,0(sp)
   4ee2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4ee30:	01440004 	movi	r5,4096
   4ee34:	0009883a 	mov	r4,zero
   4ee38:	004f88c0 	call	4f88c <alt_icache_flush>
#endif
}
   4ee3c:	0001883a 	nop
   4ee40:	e037883a 	mov	sp,fp
   4ee44:	dfc00117 	ldw	ra,4(sp)
   4ee48:	df000017 	ldw	fp,0(sp)
   4ee4c:	dec00204 	addi	sp,sp,8
   4ee50:	f800283a 	ret

0004ee54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4ee54:	defff904 	addi	sp,sp,-28
   4ee58:	dfc00615 	stw	ra,24(sp)
   4ee5c:	df000515 	stw	fp,20(sp)
   4ee60:	df000504 	addi	fp,sp,20
   4ee64:	e13ffc15 	stw	r4,-16(fp)
   4ee68:	e17ffd15 	stw	r5,-12(fp)
   4ee6c:	e1bffe15 	stw	r6,-8(fp)
   4ee70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4ee74:	e0800217 	ldw	r2,8(fp)
   4ee78:	d8800015 	stw	r2,0(sp)
   4ee7c:	e1ffff17 	ldw	r7,-4(fp)
   4ee80:	e1bffe17 	ldw	r6,-8(fp)
   4ee84:	e17ffd17 	ldw	r5,-12(fp)
   4ee88:	e13ffc17 	ldw	r4,-16(fp)
   4ee8c:	004f0040 	call	4f004 <alt_iic_isr_register>
}  
   4ee90:	e037883a 	mov	sp,fp
   4ee94:	dfc00117 	ldw	ra,4(sp)
   4ee98:	df000017 	ldw	fp,0(sp)
   4ee9c:	dec00204 	addi	sp,sp,8
   4eea0:	f800283a 	ret

0004eea4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4eea4:	defff904 	addi	sp,sp,-28
   4eea8:	df000615 	stw	fp,24(sp)
   4eeac:	df000604 	addi	fp,sp,24
   4eeb0:	e13ffe15 	stw	r4,-8(fp)
   4eeb4:	e17fff15 	stw	r5,-4(fp)
   4eeb8:	e0bfff17 	ldw	r2,-4(fp)
   4eebc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4eec0:	0005303a 	rdctl	r2,status
   4eec4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4eec8:	e0fffb17 	ldw	r3,-20(fp)
   4eecc:	00bfff84 	movi	r2,-2
   4eed0:	1884703a 	and	r2,r3,r2
   4eed4:	1001703a 	wrctl	status,r2
  
  return context;
   4eed8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4eedc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4eee0:	00c00044 	movi	r3,1
   4eee4:	e0bffa17 	ldw	r2,-24(fp)
   4eee8:	1884983a 	sll	r2,r3,r2
   4eeec:	1007883a 	mov	r3,r2
   4eef0:	d0a6d517 	ldw	r2,-25772(gp)
   4eef4:	1884b03a 	or	r2,r3,r2
   4eef8:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4eefc:	d0a6d517 	ldw	r2,-25772(gp)
   4ef00:	100170fa 	wrctl	ienable,r2
   4ef04:	e0bffc17 	ldw	r2,-16(fp)
   4ef08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ef0c:	e0bffd17 	ldw	r2,-12(fp)
   4ef10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4ef14:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4ef18:	0001883a 	nop
}
   4ef1c:	e037883a 	mov	sp,fp
   4ef20:	df000017 	ldw	fp,0(sp)
   4ef24:	dec00104 	addi	sp,sp,4
   4ef28:	f800283a 	ret

0004ef2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4ef2c:	defff904 	addi	sp,sp,-28
   4ef30:	df000615 	stw	fp,24(sp)
   4ef34:	df000604 	addi	fp,sp,24
   4ef38:	e13ffe15 	stw	r4,-8(fp)
   4ef3c:	e17fff15 	stw	r5,-4(fp)
   4ef40:	e0bfff17 	ldw	r2,-4(fp)
   4ef44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ef48:	0005303a 	rdctl	r2,status
   4ef4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ef50:	e0fffb17 	ldw	r3,-20(fp)
   4ef54:	00bfff84 	movi	r2,-2
   4ef58:	1884703a 	and	r2,r3,r2
   4ef5c:	1001703a 	wrctl	status,r2
  
  return context;
   4ef60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4ef64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4ef68:	00c00044 	movi	r3,1
   4ef6c:	e0bffa17 	ldw	r2,-24(fp)
   4ef70:	1884983a 	sll	r2,r3,r2
   4ef74:	0084303a 	nor	r2,zero,r2
   4ef78:	1007883a 	mov	r3,r2
   4ef7c:	d0a6d517 	ldw	r2,-25772(gp)
   4ef80:	1884703a 	and	r2,r3,r2
   4ef84:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4ef88:	d0a6d517 	ldw	r2,-25772(gp)
   4ef8c:	100170fa 	wrctl	ienable,r2
   4ef90:	e0bffc17 	ldw	r2,-16(fp)
   4ef94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ef98:	e0bffd17 	ldw	r2,-12(fp)
   4ef9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4efa0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4efa4:	0001883a 	nop
}
   4efa8:	e037883a 	mov	sp,fp
   4efac:	df000017 	ldw	fp,0(sp)
   4efb0:	dec00104 	addi	sp,sp,4
   4efb4:	f800283a 	ret

0004efb8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4efb8:	defffc04 	addi	sp,sp,-16
   4efbc:	df000315 	stw	fp,12(sp)
   4efc0:	df000304 	addi	fp,sp,12
   4efc4:	e13ffe15 	stw	r4,-8(fp)
   4efc8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4efcc:	000530fa 	rdctl	r2,ienable
   4efd0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4efd4:	00c00044 	movi	r3,1
   4efd8:	e0bfff17 	ldw	r2,-4(fp)
   4efdc:	1884983a 	sll	r2,r3,r2
   4efe0:	1007883a 	mov	r3,r2
   4efe4:	e0bffd17 	ldw	r2,-12(fp)
   4efe8:	1884703a 	and	r2,r3,r2
   4efec:	1004c03a 	cmpne	r2,r2,zero
   4eff0:	10803fcc 	andi	r2,r2,255
}
   4eff4:	e037883a 	mov	sp,fp
   4eff8:	df000017 	ldw	fp,0(sp)
   4effc:	dec00104 	addi	sp,sp,4
   4f000:	f800283a 	ret

0004f004 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f004:	defff504 	addi	sp,sp,-44
   4f008:	dfc00a15 	stw	ra,40(sp)
   4f00c:	df000915 	stw	fp,36(sp)
   4f010:	df000904 	addi	fp,sp,36
   4f014:	e13ffc15 	stw	r4,-16(fp)
   4f018:	e17ffd15 	stw	r5,-12(fp)
   4f01c:	e1bffe15 	stw	r6,-8(fp)
   4f020:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4f024:	00bffa84 	movi	r2,-22
   4f028:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4f02c:	e0bffd17 	ldw	r2,-12(fp)
   4f030:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4f034:	e0bff817 	ldw	r2,-32(fp)
   4f038:	10800808 	cmpgei	r2,r2,32
   4f03c:	1000271e 	bne	r2,zero,4f0dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f040:	0005303a 	rdctl	r2,status
   4f044:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f048:	e0fffb17 	ldw	r3,-20(fp)
   4f04c:	00bfff84 	movi	r2,-2
   4f050:	1884703a 	and	r2,r3,r2
   4f054:	1001703a 	wrctl	status,r2
  
  return context;
   4f058:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4f05c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4f060:	00800174 	movhi	r2,5
   4f064:	10970a04 	addi	r2,r2,23592
   4f068:	e0fff817 	ldw	r3,-32(fp)
   4f06c:	180690fa 	slli	r3,r3,3
   4f070:	10c5883a 	add	r2,r2,r3
   4f074:	e0fffe17 	ldw	r3,-8(fp)
   4f078:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4f07c:	00800174 	movhi	r2,5
   4f080:	10970a04 	addi	r2,r2,23592
   4f084:	e0fff817 	ldw	r3,-32(fp)
   4f088:	180690fa 	slli	r3,r3,3
   4f08c:	10c5883a 	add	r2,r2,r3
   4f090:	10800104 	addi	r2,r2,4
   4f094:	e0ffff17 	ldw	r3,-4(fp)
   4f098:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4f09c:	e0bffe17 	ldw	r2,-8(fp)
   4f0a0:	10000526 	beq	r2,zero,4f0b8 <alt_iic_isr_register+0xb4>
   4f0a4:	e0bff817 	ldw	r2,-32(fp)
   4f0a8:	100b883a 	mov	r5,r2
   4f0ac:	e13ffc17 	ldw	r4,-16(fp)
   4f0b0:	004eea40 	call	4eea4 <alt_ic_irq_enable>
   4f0b4:	00000406 	br	4f0c8 <alt_iic_isr_register+0xc4>
   4f0b8:	e0bff817 	ldw	r2,-32(fp)
   4f0bc:	100b883a 	mov	r5,r2
   4f0c0:	e13ffc17 	ldw	r4,-16(fp)
   4f0c4:	004ef2c0 	call	4ef2c <alt_ic_irq_disable>
   4f0c8:	e0bff715 	stw	r2,-36(fp)
   4f0cc:	e0bffa17 	ldw	r2,-24(fp)
   4f0d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f0d4:	e0bff917 	ldw	r2,-28(fp)
   4f0d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4f0dc:	e0bff717 	ldw	r2,-36(fp)
}
   4f0e0:	e037883a 	mov	sp,fp
   4f0e4:	dfc00117 	ldw	ra,4(sp)
   4f0e8:	df000017 	ldw	fp,0(sp)
   4f0ec:	dec00204 	addi	sp,sp,8
   4f0f0:	f800283a 	ret

0004f0f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4f0f4:	defff904 	addi	sp,sp,-28
   4f0f8:	dfc00615 	stw	ra,24(sp)
   4f0fc:	df000515 	stw	fp,20(sp)
   4f100:	df000504 	addi	fp,sp,20
   4f104:	e13ffc15 	stw	r4,-16(fp)
   4f108:	e17ffd15 	stw	r5,-12(fp)
   4f10c:	e1bffe15 	stw	r6,-8(fp)
   4f110:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4f114:	e1bfff17 	ldw	r6,-4(fp)
   4f118:	e17ffe17 	ldw	r5,-8(fp)
   4f11c:	e13ffd17 	ldw	r4,-12(fp)
   4f120:	004f3340 	call	4f334 <open>
   4f124:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4f128:	e0bffb17 	ldw	r2,-20(fp)
   4f12c:	10001c16 	blt	r2,zero,4f1a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4f130:	00800174 	movhi	r2,5
   4f134:	1082af04 	addi	r2,r2,2748
   4f138:	e0fffb17 	ldw	r3,-20(fp)
   4f13c:	18c00324 	muli	r3,r3,12
   4f140:	10c5883a 	add	r2,r2,r3
   4f144:	10c00017 	ldw	r3,0(r2)
   4f148:	e0bffc17 	ldw	r2,-16(fp)
   4f14c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4f150:	00800174 	movhi	r2,5
   4f154:	1082af04 	addi	r2,r2,2748
   4f158:	e0fffb17 	ldw	r3,-20(fp)
   4f15c:	18c00324 	muli	r3,r3,12
   4f160:	10c5883a 	add	r2,r2,r3
   4f164:	10800104 	addi	r2,r2,4
   4f168:	10c00017 	ldw	r3,0(r2)
   4f16c:	e0bffc17 	ldw	r2,-16(fp)
   4f170:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4f174:	00800174 	movhi	r2,5
   4f178:	1082af04 	addi	r2,r2,2748
   4f17c:	e0fffb17 	ldw	r3,-20(fp)
   4f180:	18c00324 	muli	r3,r3,12
   4f184:	10c5883a 	add	r2,r2,r3
   4f188:	10800204 	addi	r2,r2,8
   4f18c:	10c00017 	ldw	r3,0(r2)
   4f190:	e0bffc17 	ldw	r2,-16(fp)
   4f194:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4f198:	e13ffb17 	ldw	r4,-20(fp)
   4f19c:	004dda80 	call	4dda8 <alt_release_fd>
  }
} 
   4f1a0:	0001883a 	nop
   4f1a4:	e037883a 	mov	sp,fp
   4f1a8:	dfc00117 	ldw	ra,4(sp)
   4f1ac:	df000017 	ldw	fp,0(sp)
   4f1b0:	dec00204 	addi	sp,sp,8
   4f1b4:	f800283a 	ret

0004f1b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4f1b8:	defffb04 	addi	sp,sp,-20
   4f1bc:	dfc00415 	stw	ra,16(sp)
   4f1c0:	df000315 	stw	fp,12(sp)
   4f1c4:	df000304 	addi	fp,sp,12
   4f1c8:	e13ffd15 	stw	r4,-12(fp)
   4f1cc:	e17ffe15 	stw	r5,-8(fp)
   4f1d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4f1d4:	01c07fc4 	movi	r7,511
   4f1d8:	01800044 	movi	r6,1
   4f1dc:	e17ffd17 	ldw	r5,-12(fp)
   4f1e0:	01000174 	movhi	r4,5
   4f1e4:	2102b204 	addi	r4,r4,2760
   4f1e8:	004f0f40 	call	4f0f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4f1ec:	01c07fc4 	movi	r7,511
   4f1f0:	000d883a 	mov	r6,zero
   4f1f4:	e17ffe17 	ldw	r5,-8(fp)
   4f1f8:	01000174 	movhi	r4,5
   4f1fc:	2102af04 	addi	r4,r4,2748
   4f200:	004f0f40 	call	4f0f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4f204:	01c07fc4 	movi	r7,511
   4f208:	01800044 	movi	r6,1
   4f20c:	e17fff17 	ldw	r5,-4(fp)
   4f210:	01000174 	movhi	r4,5
   4f214:	2102b504 	addi	r4,r4,2772
   4f218:	004f0f40 	call	4f0f4 <alt_open_fd>
}  
   4f21c:	0001883a 	nop
   4f220:	e037883a 	mov	sp,fp
   4f224:	dfc00117 	ldw	ra,4(sp)
   4f228:	df000017 	ldw	fp,0(sp)
   4f22c:	dec00204 	addi	sp,sp,8
   4f230:	f800283a 	ret

0004f234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f234:	defffe04 	addi	sp,sp,-8
   4f238:	dfc00115 	stw	ra,4(sp)
   4f23c:	df000015 	stw	fp,0(sp)
   4f240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f244:	d0a00b17 	ldw	r2,-32724(gp)
   4f248:	10000326 	beq	r2,zero,4f258 <alt_get_errno+0x24>
   4f24c:	d0a00b17 	ldw	r2,-32724(gp)
   4f250:	103ee83a 	callr	r2
   4f254:	00000106 	br	4f25c <alt_get_errno+0x28>
   4f258:	d0a6d104 	addi	r2,gp,-25788
}
   4f25c:	e037883a 	mov	sp,fp
   4f260:	dfc00117 	ldw	ra,4(sp)
   4f264:	df000017 	ldw	fp,0(sp)
   4f268:	dec00204 	addi	sp,sp,8
   4f26c:	f800283a 	ret

0004f270 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4f270:	defffd04 	addi	sp,sp,-12
   4f274:	df000215 	stw	fp,8(sp)
   4f278:	df000204 	addi	fp,sp,8
   4f27c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4f280:	e0bfff17 	ldw	r2,-4(fp)
   4f284:	10800217 	ldw	r2,8(r2)
   4f288:	10d00034 	orhi	r3,r2,16384
   4f28c:	e0bfff17 	ldw	r2,-4(fp)
   4f290:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4f294:	e03ffe15 	stw	zero,-8(fp)
   4f298:	00001d06 	br	4f310 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4f29c:	00800174 	movhi	r2,5
   4f2a0:	1082af04 	addi	r2,r2,2748
   4f2a4:	e0fffe17 	ldw	r3,-8(fp)
   4f2a8:	18c00324 	muli	r3,r3,12
   4f2ac:	10c5883a 	add	r2,r2,r3
   4f2b0:	10c00017 	ldw	r3,0(r2)
   4f2b4:	e0bfff17 	ldw	r2,-4(fp)
   4f2b8:	10800017 	ldw	r2,0(r2)
   4f2bc:	1880111e 	bne	r3,r2,4f304 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4f2c0:	00800174 	movhi	r2,5
   4f2c4:	1082af04 	addi	r2,r2,2748
   4f2c8:	e0fffe17 	ldw	r3,-8(fp)
   4f2cc:	18c00324 	muli	r3,r3,12
   4f2d0:	10c5883a 	add	r2,r2,r3
   4f2d4:	10800204 	addi	r2,r2,8
   4f2d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4f2dc:	1000090e 	bge	r2,zero,4f304 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4f2e0:	e0bffe17 	ldw	r2,-8(fp)
   4f2e4:	10c00324 	muli	r3,r2,12
   4f2e8:	00800174 	movhi	r2,5
   4f2ec:	1082af04 	addi	r2,r2,2748
   4f2f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4f2f4:	e0bfff17 	ldw	r2,-4(fp)
   4f2f8:	18800226 	beq	r3,r2,4f304 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4f2fc:	00bffcc4 	movi	r2,-13
   4f300:	00000806 	br	4f324 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4f304:	e0bffe17 	ldw	r2,-8(fp)
   4f308:	10800044 	addi	r2,r2,1
   4f30c:	e0bffe15 	stw	r2,-8(fp)
   4f310:	d0a00a17 	ldw	r2,-32728(gp)
   4f314:	1007883a 	mov	r3,r2
   4f318:	e0bffe17 	ldw	r2,-8(fp)
   4f31c:	18bfdf2e 	bgeu	r3,r2,4f29c <__alt_data_end+0xfffdd29c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4f320:	0005883a 	mov	r2,zero
}
   4f324:	e037883a 	mov	sp,fp
   4f328:	df000017 	ldw	fp,0(sp)
   4f32c:	dec00104 	addi	sp,sp,4
   4f330:	f800283a 	ret

0004f334 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4f334:	defff604 	addi	sp,sp,-40
   4f338:	dfc00915 	stw	ra,36(sp)
   4f33c:	df000815 	stw	fp,32(sp)
   4f340:	df000804 	addi	fp,sp,32
   4f344:	e13ffd15 	stw	r4,-12(fp)
   4f348:	e17ffe15 	stw	r5,-8(fp)
   4f34c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4f350:	00bfffc4 	movi	r2,-1
   4f354:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4f358:	00bffb44 	movi	r2,-19
   4f35c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4f360:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4f364:	d1600804 	addi	r5,gp,-32736
   4f368:	e13ffd17 	ldw	r4,-12(fp)
   4f36c:	004f6500 	call	4f650 <alt_find_dev>
   4f370:	e0bff815 	stw	r2,-32(fp)
   4f374:	e0bff817 	ldw	r2,-32(fp)
   4f378:	1000051e 	bne	r2,zero,4f390 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4f37c:	e13ffd17 	ldw	r4,-12(fp)
   4f380:	004f6e00 	call	4f6e0 <alt_find_file>
   4f384:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4f388:	00800044 	movi	r2,1
   4f38c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4f390:	e0bff817 	ldw	r2,-32(fp)
   4f394:	10002926 	beq	r2,zero,4f43c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4f398:	e13ff817 	ldw	r4,-32(fp)
   4f39c:	004f7e80 	call	4f7e8 <alt_get_fd>
   4f3a0:	e0bff915 	stw	r2,-28(fp)
   4f3a4:	e0bff917 	ldw	r2,-28(fp)
   4f3a8:	1000030e 	bge	r2,zero,4f3b8 <open+0x84>
    {
      status = index;
   4f3ac:	e0bff917 	ldw	r2,-28(fp)
   4f3b0:	e0bffa15 	stw	r2,-24(fp)
   4f3b4:	00002306 	br	4f444 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4f3b8:	e0bff917 	ldw	r2,-28(fp)
   4f3bc:	10c00324 	muli	r3,r2,12
   4f3c0:	00800174 	movhi	r2,5
   4f3c4:	1082af04 	addi	r2,r2,2748
   4f3c8:	1885883a 	add	r2,r3,r2
   4f3cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4f3d0:	e0fffe17 	ldw	r3,-8(fp)
   4f3d4:	00900034 	movhi	r2,16384
   4f3d8:	10bfffc4 	addi	r2,r2,-1
   4f3dc:	1886703a 	and	r3,r3,r2
   4f3e0:	e0bffc17 	ldw	r2,-16(fp)
   4f3e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4f3e8:	e0bffb17 	ldw	r2,-20(fp)
   4f3ec:	1000051e 	bne	r2,zero,4f404 <open+0xd0>
   4f3f0:	e13ffc17 	ldw	r4,-16(fp)
   4f3f4:	004f2700 	call	4f270 <alt_file_locked>
   4f3f8:	e0bffa15 	stw	r2,-24(fp)
   4f3fc:	e0bffa17 	ldw	r2,-24(fp)
   4f400:	10001016 	blt	r2,zero,4f444 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4f404:	e0bff817 	ldw	r2,-32(fp)
   4f408:	10800317 	ldw	r2,12(r2)
   4f40c:	10000826 	beq	r2,zero,4f430 <open+0xfc>
   4f410:	e0bff817 	ldw	r2,-32(fp)
   4f414:	10800317 	ldw	r2,12(r2)
   4f418:	e1ffff17 	ldw	r7,-4(fp)
   4f41c:	e1bffe17 	ldw	r6,-8(fp)
   4f420:	e17ffd17 	ldw	r5,-12(fp)
   4f424:	e13ffc17 	ldw	r4,-16(fp)
   4f428:	103ee83a 	callr	r2
   4f42c:	00000106 	br	4f434 <open+0x100>
   4f430:	0005883a 	mov	r2,zero
   4f434:	e0bffa15 	stw	r2,-24(fp)
   4f438:	00000206 	br	4f444 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4f43c:	00bffb44 	movi	r2,-19
   4f440:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4f444:	e0bffa17 	ldw	r2,-24(fp)
   4f448:	1000090e 	bge	r2,zero,4f470 <open+0x13c>
  {
    alt_release_fd (index);  
   4f44c:	e13ff917 	ldw	r4,-28(fp)
   4f450:	004dda80 	call	4dda8 <alt_release_fd>
    ALT_ERRNO = -status;
   4f454:	004f2340 	call	4f234 <alt_get_errno>
   4f458:	1007883a 	mov	r3,r2
   4f45c:	e0bffa17 	ldw	r2,-24(fp)
   4f460:	0085c83a 	sub	r2,zero,r2
   4f464:	18800015 	stw	r2,0(r3)
    return -1;
   4f468:	00bfffc4 	movi	r2,-1
   4f46c:	00000106 	br	4f474 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4f470:	e0bff917 	ldw	r2,-28(fp)
}
   4f474:	e037883a 	mov	sp,fp
   4f478:	dfc00117 	ldw	ra,4(sp)
   4f47c:	df000017 	ldw	fp,0(sp)
   4f480:	dec00204 	addi	sp,sp,8
   4f484:	f800283a 	ret

0004f488 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4f488:	defffa04 	addi	sp,sp,-24
   4f48c:	df000515 	stw	fp,20(sp)
   4f490:	df000504 	addi	fp,sp,20
   4f494:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f498:	0005303a 	rdctl	r2,status
   4f49c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f4a0:	e0fffc17 	ldw	r3,-16(fp)
   4f4a4:	00bfff84 	movi	r2,-2
   4f4a8:	1884703a 	and	r2,r3,r2
   4f4ac:	1001703a 	wrctl	status,r2
  
  return context;
   4f4b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4f4b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4f4b8:	e0bfff17 	ldw	r2,-4(fp)
   4f4bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4f4c0:	e0bffd17 	ldw	r2,-12(fp)
   4f4c4:	10800017 	ldw	r2,0(r2)
   4f4c8:	e0fffd17 	ldw	r3,-12(fp)
   4f4cc:	18c00117 	ldw	r3,4(r3)
   4f4d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4f4d4:	e0bffd17 	ldw	r2,-12(fp)
   4f4d8:	10800117 	ldw	r2,4(r2)
   4f4dc:	e0fffd17 	ldw	r3,-12(fp)
   4f4e0:	18c00017 	ldw	r3,0(r3)
   4f4e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4f4e8:	e0bffd17 	ldw	r2,-12(fp)
   4f4ec:	e0fffd17 	ldw	r3,-12(fp)
   4f4f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4f4f4:	e0bffd17 	ldw	r2,-12(fp)
   4f4f8:	e0fffd17 	ldw	r3,-12(fp)
   4f4fc:	10c00015 	stw	r3,0(r2)
   4f500:	e0bffb17 	ldw	r2,-20(fp)
   4f504:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f508:	e0bffe17 	ldw	r2,-8(fp)
   4f50c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4f510:	0001883a 	nop
   4f514:	e037883a 	mov	sp,fp
   4f518:	df000017 	ldw	fp,0(sp)
   4f51c:	dec00104 	addi	sp,sp,4
   4f520:	f800283a 	ret

0004f524 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4f524:	defffb04 	addi	sp,sp,-20
   4f528:	dfc00415 	stw	ra,16(sp)
   4f52c:	df000315 	stw	fp,12(sp)
   4f530:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4f534:	d0a00e17 	ldw	r2,-32712(gp)
   4f538:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4f53c:	d0a6d717 	ldw	r2,-25764(gp)
   4f540:	10800044 	addi	r2,r2,1
   4f544:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f548:	00002e06 	br	4f604 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4f54c:	e0bffd17 	ldw	r2,-12(fp)
   4f550:	10800017 	ldw	r2,0(r2)
   4f554:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4f558:	e0bffd17 	ldw	r2,-12(fp)
   4f55c:	10800403 	ldbu	r2,16(r2)
   4f560:	10803fcc 	andi	r2,r2,255
   4f564:	10000426 	beq	r2,zero,4f578 <alt_tick+0x54>
   4f568:	d0a6d717 	ldw	r2,-25764(gp)
   4f56c:	1000021e 	bne	r2,zero,4f578 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4f570:	e0bffd17 	ldw	r2,-12(fp)
   4f574:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4f578:	e0bffd17 	ldw	r2,-12(fp)
   4f57c:	10800217 	ldw	r2,8(r2)
   4f580:	d0e6d717 	ldw	r3,-25764(gp)
   4f584:	18801d36 	bltu	r3,r2,4f5fc <alt_tick+0xd8>
   4f588:	e0bffd17 	ldw	r2,-12(fp)
   4f58c:	10800403 	ldbu	r2,16(r2)
   4f590:	10803fcc 	andi	r2,r2,255
   4f594:	1000191e 	bne	r2,zero,4f5fc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4f598:	e0bffd17 	ldw	r2,-12(fp)
   4f59c:	10800317 	ldw	r2,12(r2)
   4f5a0:	e0fffd17 	ldw	r3,-12(fp)
   4f5a4:	18c00517 	ldw	r3,20(r3)
   4f5a8:	1809883a 	mov	r4,r3
   4f5ac:	103ee83a 	callr	r2
   4f5b0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4f5b4:	e0bfff17 	ldw	r2,-4(fp)
   4f5b8:	1000031e 	bne	r2,zero,4f5c8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4f5bc:	e13ffd17 	ldw	r4,-12(fp)
   4f5c0:	004f4880 	call	4f488 <alt_alarm_stop>
   4f5c4:	00000d06 	br	4f5fc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4f5c8:	e0bffd17 	ldw	r2,-12(fp)
   4f5cc:	10c00217 	ldw	r3,8(r2)
   4f5d0:	e0bfff17 	ldw	r2,-4(fp)
   4f5d4:	1887883a 	add	r3,r3,r2
   4f5d8:	e0bffd17 	ldw	r2,-12(fp)
   4f5dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4f5e0:	e0bffd17 	ldw	r2,-12(fp)
   4f5e4:	10c00217 	ldw	r3,8(r2)
   4f5e8:	d0a6d717 	ldw	r2,-25764(gp)
   4f5ec:	1880032e 	bgeu	r3,r2,4f5fc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4f5f0:	e0bffd17 	ldw	r2,-12(fp)
   4f5f4:	00c00044 	movi	r3,1
   4f5f8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4f5fc:	e0bffe17 	ldw	r2,-8(fp)
   4f600:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f604:	e0fffd17 	ldw	r3,-12(fp)
   4f608:	d0a00e04 	addi	r2,gp,-32712
   4f60c:	18bfcf1e 	bne	r3,r2,4f54c <__alt_data_end+0xfffdd54c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4f610:	0001883a 	nop
}
   4f614:	0001883a 	nop
   4f618:	e037883a 	mov	sp,fp
   4f61c:	dfc00117 	ldw	ra,4(sp)
   4f620:	df000017 	ldw	fp,0(sp)
   4f624:	dec00204 	addi	sp,sp,8
   4f628:	f800283a 	ret

0004f62c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4f62c:	deffff04 	addi	sp,sp,-4
   4f630:	df000015 	stw	fp,0(sp)
   4f634:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4f638:	000170fa 	wrctl	ienable,zero
}
   4f63c:	0001883a 	nop
   4f640:	e037883a 	mov	sp,fp
   4f644:	df000017 	ldw	fp,0(sp)
   4f648:	dec00104 	addi	sp,sp,4
   4f64c:	f800283a 	ret

0004f650 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4f650:	defffa04 	addi	sp,sp,-24
   4f654:	dfc00515 	stw	ra,20(sp)
   4f658:	df000415 	stw	fp,16(sp)
   4f65c:	df000404 	addi	fp,sp,16
   4f660:	e13ffe15 	stw	r4,-8(fp)
   4f664:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4f668:	e0bfff17 	ldw	r2,-4(fp)
   4f66c:	10800017 	ldw	r2,0(r2)
   4f670:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4f674:	e13ffe17 	ldw	r4,-8(fp)
   4f678:	0040d180 	call	40d18 <strlen>
   4f67c:	10800044 	addi	r2,r2,1
   4f680:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f684:	00000d06 	br	4f6bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4f688:	e0bffc17 	ldw	r2,-16(fp)
   4f68c:	10800217 	ldw	r2,8(r2)
   4f690:	e0fffd17 	ldw	r3,-12(fp)
   4f694:	180d883a 	mov	r6,r3
   4f698:	e17ffe17 	ldw	r5,-8(fp)
   4f69c:	1009883a 	mov	r4,r2
   4f6a0:	004f9cc0 	call	4f9cc <memcmp>
   4f6a4:	1000021e 	bne	r2,zero,4f6b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4f6a8:	e0bffc17 	ldw	r2,-16(fp)
   4f6ac:	00000706 	br	4f6cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4f6b0:	e0bffc17 	ldw	r2,-16(fp)
   4f6b4:	10800017 	ldw	r2,0(r2)
   4f6b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f6bc:	e0fffc17 	ldw	r3,-16(fp)
   4f6c0:	e0bfff17 	ldw	r2,-4(fp)
   4f6c4:	18bff01e 	bne	r3,r2,4f688 <__alt_data_end+0xfffdd688>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4f6c8:	0005883a 	mov	r2,zero
}
   4f6cc:	e037883a 	mov	sp,fp
   4f6d0:	dfc00117 	ldw	ra,4(sp)
   4f6d4:	df000017 	ldw	fp,0(sp)
   4f6d8:	dec00204 	addi	sp,sp,8
   4f6dc:	f800283a 	ret

0004f6e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4f6e0:	defffb04 	addi	sp,sp,-20
   4f6e4:	dfc00415 	stw	ra,16(sp)
   4f6e8:	df000315 	stw	fp,12(sp)
   4f6ec:	df000304 	addi	fp,sp,12
   4f6f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4f6f4:	d0a00617 	ldw	r2,-32744(gp)
   4f6f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f6fc:	00003106 	br	4f7c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4f700:	e0bffd17 	ldw	r2,-12(fp)
   4f704:	10800217 	ldw	r2,8(r2)
   4f708:	1009883a 	mov	r4,r2
   4f70c:	0040d180 	call	40d18 <strlen>
   4f710:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4f714:	e0bffd17 	ldw	r2,-12(fp)
   4f718:	10c00217 	ldw	r3,8(r2)
   4f71c:	e0bffe17 	ldw	r2,-8(fp)
   4f720:	10bfffc4 	addi	r2,r2,-1
   4f724:	1885883a 	add	r2,r3,r2
   4f728:	10800003 	ldbu	r2,0(r2)
   4f72c:	10803fcc 	andi	r2,r2,255
   4f730:	1080201c 	xori	r2,r2,128
   4f734:	10bfe004 	addi	r2,r2,-128
   4f738:	10800bd8 	cmpnei	r2,r2,47
   4f73c:	1000031e 	bne	r2,zero,4f74c <alt_find_file+0x6c>
    {
      len -= 1;
   4f740:	e0bffe17 	ldw	r2,-8(fp)
   4f744:	10bfffc4 	addi	r2,r2,-1
   4f748:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f74c:	e0bffe17 	ldw	r2,-8(fp)
   4f750:	e0ffff17 	ldw	r3,-4(fp)
   4f754:	1885883a 	add	r2,r3,r2
   4f758:	10800003 	ldbu	r2,0(r2)
   4f75c:	10803fcc 	andi	r2,r2,255
   4f760:	1080201c 	xori	r2,r2,128
   4f764:	10bfe004 	addi	r2,r2,-128
   4f768:	10800be0 	cmpeqi	r2,r2,47
   4f76c:	1000081e 	bne	r2,zero,4f790 <alt_find_file+0xb0>
   4f770:	e0bffe17 	ldw	r2,-8(fp)
   4f774:	e0ffff17 	ldw	r3,-4(fp)
   4f778:	1885883a 	add	r2,r3,r2
   4f77c:	10800003 	ldbu	r2,0(r2)
   4f780:	10803fcc 	andi	r2,r2,255
   4f784:	1080201c 	xori	r2,r2,128
   4f788:	10bfe004 	addi	r2,r2,-128
   4f78c:	10000a1e 	bne	r2,zero,4f7b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4f790:	e0bffd17 	ldw	r2,-12(fp)
   4f794:	10800217 	ldw	r2,8(r2)
   4f798:	e0fffe17 	ldw	r3,-8(fp)
   4f79c:	180d883a 	mov	r6,r3
   4f7a0:	e17fff17 	ldw	r5,-4(fp)
   4f7a4:	1009883a 	mov	r4,r2
   4f7a8:	004f9cc0 	call	4f9cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f7ac:	1000021e 	bne	r2,zero,4f7b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4f7b0:	e0bffd17 	ldw	r2,-12(fp)
   4f7b4:	00000706 	br	4f7d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4f7b8:	e0bffd17 	ldw	r2,-12(fp)
   4f7bc:	10800017 	ldw	r2,0(r2)
   4f7c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f7c4:	e0fffd17 	ldw	r3,-12(fp)
   4f7c8:	d0a00604 	addi	r2,gp,-32744
   4f7cc:	18bfcc1e 	bne	r3,r2,4f700 <__alt_data_end+0xfffdd700>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4f7d0:	0005883a 	mov	r2,zero
}
   4f7d4:	e037883a 	mov	sp,fp
   4f7d8:	dfc00117 	ldw	ra,4(sp)
   4f7dc:	df000017 	ldw	fp,0(sp)
   4f7e0:	dec00204 	addi	sp,sp,8
   4f7e4:	f800283a 	ret

0004f7e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4f7e8:	defffc04 	addi	sp,sp,-16
   4f7ec:	df000315 	stw	fp,12(sp)
   4f7f0:	df000304 	addi	fp,sp,12
   4f7f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4f7f8:	00bffa04 	movi	r2,-24
   4f7fc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f800:	e03ffd15 	stw	zero,-12(fp)
   4f804:	00001906 	br	4f86c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   4f808:	00800174 	movhi	r2,5
   4f80c:	1082af04 	addi	r2,r2,2748
   4f810:	e0fffd17 	ldw	r3,-12(fp)
   4f814:	18c00324 	muli	r3,r3,12
   4f818:	10c5883a 	add	r2,r2,r3
   4f81c:	10800017 	ldw	r2,0(r2)
   4f820:	10000f1e 	bne	r2,zero,4f860 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4f824:	00800174 	movhi	r2,5
   4f828:	1082af04 	addi	r2,r2,2748
   4f82c:	e0fffd17 	ldw	r3,-12(fp)
   4f830:	18c00324 	muli	r3,r3,12
   4f834:	10c5883a 	add	r2,r2,r3
   4f838:	e0ffff17 	ldw	r3,-4(fp)
   4f83c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4f840:	d0e00a17 	ldw	r3,-32728(gp)
   4f844:	e0bffd17 	ldw	r2,-12(fp)
   4f848:	1880020e 	bge	r3,r2,4f854 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   4f84c:	e0bffd17 	ldw	r2,-12(fp)
   4f850:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   4f854:	e0bffd17 	ldw	r2,-12(fp)
   4f858:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4f85c:	00000606 	br	4f878 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f860:	e0bffd17 	ldw	r2,-12(fp)
   4f864:	10800044 	addi	r2,r2,1
   4f868:	e0bffd15 	stw	r2,-12(fp)
   4f86c:	e0bffd17 	ldw	r2,-12(fp)
   4f870:	10800810 	cmplti	r2,r2,32
   4f874:	103fe41e 	bne	r2,zero,4f808 <__alt_data_end+0xfffdd808>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4f878:	e0bffe17 	ldw	r2,-8(fp)
}
   4f87c:	e037883a 	mov	sp,fp
   4f880:	df000017 	ldw	fp,0(sp)
   4f884:	dec00104 	addi	sp,sp,4
   4f888:	f800283a 	ret

0004f88c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4f88c:	defffb04 	addi	sp,sp,-20
   4f890:	df000415 	stw	fp,16(sp)
   4f894:	df000404 	addi	fp,sp,16
   4f898:	e13ffe15 	stw	r4,-8(fp)
   4f89c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4f8a0:	e0bfff17 	ldw	r2,-4(fp)
   4f8a4:	10840070 	cmpltui	r2,r2,4097
   4f8a8:	1000021e 	bne	r2,zero,4f8b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4f8ac:	00840004 	movi	r2,4096
   4f8b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4f8b4:	e0fffe17 	ldw	r3,-8(fp)
   4f8b8:	e0bfff17 	ldw	r2,-4(fp)
   4f8bc:	1885883a 	add	r2,r3,r2
   4f8c0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4f8c4:	e0bffe17 	ldw	r2,-8(fp)
   4f8c8:	e0bffc15 	stw	r2,-16(fp)
   4f8cc:	00000506 	br	4f8e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4f8d0:	e0bffc17 	ldw	r2,-16(fp)
   4f8d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4f8d8:	e0bffc17 	ldw	r2,-16(fp)
   4f8dc:	10800804 	addi	r2,r2,32
   4f8e0:	e0bffc15 	stw	r2,-16(fp)
   4f8e4:	e0fffc17 	ldw	r3,-16(fp)
   4f8e8:	e0bffd17 	ldw	r2,-12(fp)
   4f8ec:	18bff836 	bltu	r3,r2,4f8d0 <__alt_data_end+0xfffdd8d0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4f8f0:	e0bffe17 	ldw	r2,-8(fp)
   4f8f4:	108007cc 	andi	r2,r2,31
   4f8f8:	10000226 	beq	r2,zero,4f904 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4f8fc:	e0bffc17 	ldw	r2,-16(fp)
   4f900:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4f904:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4f908:	0001883a 	nop
   4f90c:	e037883a 	mov	sp,fp
   4f910:	df000017 	ldw	fp,0(sp)
   4f914:	dec00104 	addi	sp,sp,4
   4f918:	f800283a 	ret

0004f91c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4f91c:	defffe04 	addi	sp,sp,-8
   4f920:	df000115 	stw	fp,4(sp)
   4f924:	df000104 	addi	fp,sp,4
   4f928:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4f92c:	e0bfff17 	ldw	r2,-4(fp)
   4f930:	10bffe84 	addi	r2,r2,-6
   4f934:	10c00428 	cmpgeui	r3,r2,16
   4f938:	18001a1e 	bne	r3,zero,4f9a4 <alt_exception_cause_generated_bad_addr+0x88>
   4f93c:	100690ba 	slli	r3,r2,2
   4f940:	00800174 	movhi	r2,5
   4f944:	10be5504 	addi	r2,r2,-1708
   4f948:	1885883a 	add	r2,r3,r2
   4f94c:	10800017 	ldw	r2,0(r2)
   4f950:	1000683a 	jmp	r2
   4f954:	0004f994 	movui	zero,5094
   4f958:	0004f994 	movui	zero,5094
   4f95c:	0004f9a4 	muli	zero,zero,5094
   4f960:	0004f9a4 	muli	zero,zero,5094
   4f964:	0004f9a4 	muli	zero,zero,5094
   4f968:	0004f994 	movui	zero,5094
   4f96c:	0004f99c 	xori	zero,zero,5094
   4f970:	0004f9a4 	muli	zero,zero,5094
   4f974:	0004f994 	movui	zero,5094
   4f978:	0004f994 	movui	zero,5094
   4f97c:	0004f9a4 	muli	zero,zero,5094
   4f980:	0004f994 	movui	zero,5094
   4f984:	0004f99c 	xori	zero,zero,5094
   4f988:	0004f9a4 	muli	zero,zero,5094
   4f98c:	0004f9a4 	muli	zero,zero,5094
   4f990:	0004f994 	movui	zero,5094
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4f994:	00800044 	movi	r2,1
   4f998:	00000306 	br	4f9a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4f99c:	0005883a 	mov	r2,zero
   4f9a0:	00000106 	br	4f9a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4f9a4:	0005883a 	mov	r2,zero
  }
}
   4f9a8:	e037883a 	mov	sp,fp
   4f9ac:	df000017 	ldw	fp,0(sp)
   4f9b0:	dec00104 	addi	sp,sp,4
   4f9b4:	f800283a 	ret

0004f9b8 <atexit>:
   4f9b8:	200b883a 	mov	r5,r4
   4f9bc:	000f883a 	mov	r7,zero
   4f9c0:	000d883a 	mov	r6,zero
   4f9c4:	0009883a 	mov	r4,zero
   4f9c8:	004fa481 	jmpi	4fa48 <__register_exitproc>

0004f9cc <memcmp>:
   4f9cc:	01c000c4 	movi	r7,3
   4f9d0:	3980192e 	bgeu	r7,r6,4fa38 <memcmp+0x6c>
   4f9d4:	2144b03a 	or	r2,r4,r5
   4f9d8:	11c4703a 	and	r2,r2,r7
   4f9dc:	10000f26 	beq	r2,zero,4fa1c <memcmp+0x50>
   4f9e0:	20800003 	ldbu	r2,0(r4)
   4f9e4:	28c00003 	ldbu	r3,0(r5)
   4f9e8:	10c0151e 	bne	r2,r3,4fa40 <memcmp+0x74>
   4f9ec:	31bfff84 	addi	r6,r6,-2
   4f9f0:	01ffffc4 	movi	r7,-1
   4f9f4:	00000406 	br	4fa08 <memcmp+0x3c>
   4f9f8:	20800003 	ldbu	r2,0(r4)
   4f9fc:	28c00003 	ldbu	r3,0(r5)
   4fa00:	31bfffc4 	addi	r6,r6,-1
   4fa04:	10c00e1e 	bne	r2,r3,4fa40 <memcmp+0x74>
   4fa08:	21000044 	addi	r4,r4,1
   4fa0c:	29400044 	addi	r5,r5,1
   4fa10:	31fff91e 	bne	r6,r7,4f9f8 <__alt_data_end+0xfffdd9f8>
   4fa14:	0005883a 	mov	r2,zero
   4fa18:	f800283a 	ret
   4fa1c:	20c00017 	ldw	r3,0(r4)
   4fa20:	28800017 	ldw	r2,0(r5)
   4fa24:	18bfee1e 	bne	r3,r2,4f9e0 <__alt_data_end+0xfffdd9e0>
   4fa28:	31bfff04 	addi	r6,r6,-4
   4fa2c:	21000104 	addi	r4,r4,4
   4fa30:	29400104 	addi	r5,r5,4
   4fa34:	39bff936 	bltu	r7,r6,4fa1c <__alt_data_end+0xfffdda1c>
   4fa38:	303fe91e 	bne	r6,zero,4f9e0 <__alt_data_end+0xfffdd9e0>
   4fa3c:	003ff506 	br	4fa14 <__alt_data_end+0xfffdda14>
   4fa40:	10c5c83a 	sub	r2,r2,r3
   4fa44:	f800283a 	ret

0004fa48 <__register_exitproc>:
   4fa48:	defffa04 	addi	sp,sp,-24
   4fa4c:	dc000315 	stw	r16,12(sp)
   4fa50:	04000174 	movhi	r16,5
   4fa54:	84072704 	addi	r16,r16,7324
   4fa58:	80c00017 	ldw	r3,0(r16)
   4fa5c:	dc400415 	stw	r17,16(sp)
   4fa60:	dfc00515 	stw	ra,20(sp)
   4fa64:	18805217 	ldw	r2,328(r3)
   4fa68:	2023883a 	mov	r17,r4
   4fa6c:	10003726 	beq	r2,zero,4fb4c <__register_exitproc+0x104>
   4fa70:	10c00117 	ldw	r3,4(r2)
   4fa74:	010007c4 	movi	r4,31
   4fa78:	20c00e16 	blt	r4,r3,4fab4 <__register_exitproc+0x6c>
   4fa7c:	1a000044 	addi	r8,r3,1
   4fa80:	8800221e 	bne	r17,zero,4fb0c <__register_exitproc+0xc4>
   4fa84:	18c00084 	addi	r3,r3,2
   4fa88:	18c7883a 	add	r3,r3,r3
   4fa8c:	18c7883a 	add	r3,r3,r3
   4fa90:	12000115 	stw	r8,4(r2)
   4fa94:	10c7883a 	add	r3,r2,r3
   4fa98:	19400015 	stw	r5,0(r3)
   4fa9c:	0005883a 	mov	r2,zero
   4faa0:	dfc00517 	ldw	ra,20(sp)
   4faa4:	dc400417 	ldw	r17,16(sp)
   4faa8:	dc000317 	ldw	r16,12(sp)
   4faac:	dec00604 	addi	sp,sp,24
   4fab0:	f800283a 	ret
   4fab4:	00800034 	movhi	r2,0
   4fab8:	10800004 	addi	r2,r2,0
   4fabc:	10002626 	beq	r2,zero,4fb58 <__register_exitproc+0x110>
   4fac0:	01006404 	movi	r4,400
   4fac4:	d9400015 	stw	r5,0(sp)
   4fac8:	d9800115 	stw	r6,4(sp)
   4facc:	d9c00215 	stw	r7,8(sp)
   4fad0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   4fad4:	d9400017 	ldw	r5,0(sp)
   4fad8:	d9800117 	ldw	r6,4(sp)
   4fadc:	d9c00217 	ldw	r7,8(sp)
   4fae0:	10001d26 	beq	r2,zero,4fb58 <__register_exitproc+0x110>
   4fae4:	81000017 	ldw	r4,0(r16)
   4fae8:	10000115 	stw	zero,4(r2)
   4faec:	02000044 	movi	r8,1
   4faf0:	22405217 	ldw	r9,328(r4)
   4faf4:	0007883a 	mov	r3,zero
   4faf8:	12400015 	stw	r9,0(r2)
   4fafc:	20805215 	stw	r2,328(r4)
   4fb00:	10006215 	stw	zero,392(r2)
   4fb04:	10006315 	stw	zero,396(r2)
   4fb08:	883fde26 	beq	r17,zero,4fa84 <__alt_data_end+0xfffdda84>
   4fb0c:	18c9883a 	add	r4,r3,r3
   4fb10:	2109883a 	add	r4,r4,r4
   4fb14:	1109883a 	add	r4,r2,r4
   4fb18:	21802215 	stw	r6,136(r4)
   4fb1c:	01800044 	movi	r6,1
   4fb20:	12406217 	ldw	r9,392(r2)
   4fb24:	30cc983a 	sll	r6,r6,r3
   4fb28:	4992b03a 	or	r9,r9,r6
   4fb2c:	12406215 	stw	r9,392(r2)
   4fb30:	21c04215 	stw	r7,264(r4)
   4fb34:	01000084 	movi	r4,2
   4fb38:	893fd21e 	bne	r17,r4,4fa84 <__alt_data_end+0xfffdda84>
   4fb3c:	11006317 	ldw	r4,396(r2)
   4fb40:	218cb03a 	or	r6,r4,r6
   4fb44:	11806315 	stw	r6,396(r2)
   4fb48:	003fce06 	br	4fa84 <__alt_data_end+0xfffdda84>
   4fb4c:	18805304 	addi	r2,r3,332
   4fb50:	18805215 	stw	r2,328(r3)
   4fb54:	003fc606 	br	4fa70 <__alt_data_end+0xfffdda70>
   4fb58:	00bfffc4 	movi	r2,-1
   4fb5c:	003fd006 	br	4faa0 <__alt_data_end+0xfffddaa0>
